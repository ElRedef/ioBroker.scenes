{"version":3,"sources":["serviceWorker.js","components/SceneForm.js","components/SceneMembersForm.js","components/ExportImportDialog.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","SceneForm","props","setStateWithParent","newState","cb","setState","updateScene","common","native","sceneObj","scene","JSON","parse","stringify","members","state","showDialog","sceneId","_id","this","key","imagePrefix","socket","dialogName","title","I18n","t","selected","onOk","onClose","name","on","className","classes","editItem","onTrue","onFalse","enabled","right","Switch","checked","trigger","id","onChange","e","target","condition","Grid","container","spacing","item","xs","TextField","fullWidth","InputLabelProps","shrink","label","value","onClick","FormControl","InputLabel","Select","MenuItem","cron","console","log","width","Box","clsx","columnContainer","oneColumn","height","scroll","desc","sm","width100","engine","instances","map","replace","min","burstInterval","helperText","type","parseInt","FormControlLabel","style","paddingTop","control","Checkbox","virtualGroup","renderOnTrueFalse","renderSelectIdDialog","React","Component","withStyles","theme","alignRight","textAlign","buttonsContainer","margin","display","flexDirection","float","overflowY","overflowX","paddingRight","marginBottom","color","palette","p","background","SceneMembersForm","memberStateChange","states","val","objectTypes","undefined","parseFloat","createSceneMembers","ids","filter","find","length","openedMembers","objectNames","Promise","all","getObject","then","obj","template","setIfTrue","setIfFalse","stopAllDelays","disabled","delay","Utils","getObjectNameFromObj","language","getLanguage","onFalseEnabled","push","forEach","subscribeState","catch","showError","deleteSceneMember","i","splice","deleteDialog","unsubscribeState","renderMember","member","index","_valStr","toString","setIfTrueTolerance","Math","abs","memberTrueFalse","memberTrue","setIfFalseTolerance","memberFalse","memberUncertain","opened","includes","countEnabled","u","Paper","memberCard","memberToolbar","memberTitle","memberDesc","memberButtons","IconButton","pos","indexOf","sort","localStorage","setItem","size","marginLeft","aria-label","intervalBetweenCommands","setValue","doNotOverwrite","smallOnTrueFalse","stateValueTrue","stateValueFalse","getItemStyle","isDragging","draggableStyle","userSelect","getListStyle","isDraggingOver","render","sceneState","selectedSceneChanged","engineId","Toolbar","gutters","guttersZero","Typography","variant","sceneTitle","instanceNotActive","sceneSubTitle","sceneTrue","sceneFalse","sceneUncertain","testButtons","width100WithButton","defaultValue","onKeyUp","keyCode","onWriteScene","writeSceneState","sceneEnabled","Button","btnTestTrue","btnTestFalse","onDragEnd","droppableId","provided","snapshot","droppableProps","ref","innerRef","draggableId","draggableProps","dragHandleProps","placeholder","renderDeleteDialog","getItem","bind","readObjects","result","destination","source","removed","results","resolve","that","updateSceneMembers","multiSelect","Dialog","open","DialogTitle","DialogActions","changed","borderRadius","padding","fontSize","fontWeight","whiteSpace","maxWidth","overflow","textOverflow","backgroundColor","flexGrow","marginRight","position","content","top","fontStyle","minHeight","minWidth","opacity","ExportImportDialog","text","error","toast","Snackbar","autoHideDuration","Alert","severity","aria-labelledby","fullScreen","aria-describedby","isImport","DialogContent","divWithoutTitle","autoFocus","mode","onLoad","editor","codeEditor","focus","themeType","newValue","readOnly","editorProps","$blockScrolling","copy","setTimeout","renderToast","border","getFolderPrefix","split","shift","pop","join","FORBIDDEN_CHARS","App","extendedProps","translations","require","sceneSwitch","event","scenes","selectedSceneId","selectedSceneData","setObject","refreshData","addSceneToFolderPrefix","folderPrefix","noRefresh","oldId","delObject","changeSelectedScene","renderTreeScene","level","search","ListItem","paddingLeft","button","ListItemIcon","root","itemIconRoot","itemIcon","ListItemText","primary","listItemTitle","secondary","listItemSubTitle","ListItemSecondaryAction","changingScene","CircularProgress","deleteScene","Object","keys","nextId","query","parts","decodeURIComponent","getUrlQuery","port","host","iobForceHost","lang","systemLang","ready","folders","addFolderDialog","addFolderDialogTitle","editFolderDialog","editFolderDialogTitle","showSearch","moveDialog","newFolder","exportDialog","importDialog","menuOpened","getSystemConfig","systemConfig","getAdapterInstances","adapterName","values","subFolders","prefix","currentFolder","parent","folder","findFolder","getObjectView","_scenes","buildTree","getData","burstIntervall","from","user","ts","acl","parentFolder","_parentFolder","newName","newSelectedId","promises","newId","isIdUnique","getFolderList","subFolder","concat","confirmCb","sceneChangeDialog","noGutters","folderItem","toggleFolder","itemIconFolder","createScene","getNewSceneId","editFolderDialogTitleOrigin","a","b","renderTree","List","list","leftMenuItem","parentId","role","read","write","def","astro","matches","ignoreUnsaved","buttonIcon","addFolder","isUnique","renameFolder","writeScene","importedScene","mainToolbar","textInput","showDrawer","cloneScene","toolbarButtons","renderListToolbar","heightMinusToolbar","Drawer","anchor","paper","drawer","renderDrawerContent","renderSceneTopToolbar","heightMinus2Toolbars","renderSceneSettings","renderSceneMembers","renderSceneBottomToolbar","Container","fullWidthContainer","settingsBackground","heightMinusMargin","membersCell","themeName","renderInOneColumn","renderInMoreThanOneColumn","renderSceneChangeDialog","renderEditFolderDialog","renderMoveDialog","renderAddFolderDialog","renderExportImportDialog","renderError","GenericApp","withWidth","main","tabContent","cursor","paddingBottom","buttonsContainer1","marginTop","noHeight","withTheme","version","getThemeName","Sentry","dsn","release","integrations","SentryIntegrations","build","ReactDOM","onThemeChange","_theme","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.818a36ac.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nconst styles = theme => ({\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    width100: {\r\n        width: '100%'\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    editItem: {\r\n        display: 'block',\r\n        marginBottom: theme.spacing(2),\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    onTrue: {\r\n        background: 'lightgreen',\r\n    },\r\n    onFalse: {\r\n        background: '#ff9999',\r\n    },\r\n});\r\n\r\nclass SceneForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        this.state = {\r\n            common: sceneObj.common,\r\n            native: sceneObj.native,\r\n            showDialog: null,\r\n            sceneId: props.scene._id,\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        if (JSON.stringify(sceneObj.common) !== JSON.stringify(state.common) || JSON.stringify(sceneObj.native) !== JSON.stringify(state.native)) {\r\n            return {\r\n                common: sceneObj.common,\r\n                native: sceneObj.native,\r\n            }\r\n        }\r\n    }\r\n\r\n    setStateWithParent = (newState, cb) => {\r\n        this.setState(newState, () =>\r\n            this.props.updateScene(newState.common, newState.native, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n                key=\"selectDialog\"\r\n                imagePrefix={'../..'}\r\n                socket={ this.props.socket }\r\n                dialogName=\"memberEdit\"\r\n                title={ I18n.t('Select for ') }\r\n                selected={ null }\r\n                onOk={ this.state.showDialog }\r\n                onClose={ () => this.setState({showDialog: false}) }\r\n            /> : null;\r\n    };\r\n\r\n    renderOnTrueFalse(name) {\r\n        const on = this.state.native[name];\r\n\r\n        return [\r\n            <div key=\"switch\" className={ this.props.classes.editItem }>\r\n                <h4>{ on === this.state.native.onTrue ? (this.state.native.onFalse.enabled ? I18n.t('Trigger for TRUE') : I18n.t('Trigger')) : I18n.t('Trigger for FALSE') }\r\n                    <span className={ this.props.classes.right }>\r\n                        <Switch checked={ !!on.trigger.id }\r\n                                onChange={ e => {\r\n                                    if (e.target.checked) {\r\n                                        this.setState({\r\n                                            showDialog: id => {\r\n                                                const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                native[name].trigger.id = id;\r\n                                                native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                                this.setStateWithParent({native});\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                        native[name].trigger.id = '';\r\n                                        this.setStateWithParent({native});\r\n                                    }\r\n                                } }\r\n                        />\r\n                    </span>\r\n                </h4>\r\n            </div>,\r\n            <div key=\"id\" className={ this.props.classes.editItem }>\r\n                {on.trigger.id ?\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={8}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Trigger ID') }\r\n                                value={ on.trigger.id }\r\n                                onClick={ () => {\r\n                                    this.setState({\r\n                                        showDialog: id => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.id = id;\r\n                                            native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                            this.setStateWithParent({native});\r\n                                        }\r\n                                    });\r\n                                } }\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2}>\r\n                            <FormControl>\r\n                                <InputLabel shrink={ true }>{ I18n.t('Condition') }</InputLabel>\r\n                                <Select value={ on.trigger.condition || '==' }\r\n                                        onChange={ e => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.condition = e.target.value;\r\n                                            this.setStateWithParent({native});\r\n                                        } }\r\n                                >\r\n                                    <MenuItem value=\"==\">==</MenuItem>\r\n                                    <MenuItem value=\"!=\">!=</MenuItem>\r\n                                    <MenuItem value=\">\">&gt;</MenuItem>\r\n                                    <MenuItem value=\"<\">&lt;</MenuItem>\r\n                                    <MenuItem value=\">=\">&gt;=</MenuItem>\r\n                                    <MenuItem value=\"<=\">&lt;=</MenuItem>\r\n                                    <MenuItem value=\"update\">{ I18n.t('on update') }</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps= {{shrink: true} } label={ I18n.t('Value') }\r\n                                value={ on.trigger.value || '' }\r\n                                onChange={ e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native[name].trigger.value = e.target.value;\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    : null}\r\n            </div>,\r\n            <div key=\"cron\" className={ this.props.classes.editItem }>\r\n                <TextField\r\n                    fullWidth\r\n                    InputLabelProps={{shrink: true}}\r\n                    label={ name === 'onTrue' ? I18n.t('On time (CRON expression)') : I18n.t('Off time (CRON expression)')}\r\n                    value={ on.cron || '' }\r\n                    onChange={e => {\r\n                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                        native[name].cron = e.target.value;\r\n                        this.setStateWithParent({native});\r\n                    }}\r\n                />\r\n            </div>\r\n        ];\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.width);\r\n        let result = <Box key=\"sceneForm\" className={ clsx(this.props.classes.columnContainer, !this.props.oneColumn && this.props.classes.height) }>\r\n            <Box className={ this.props.classes.scroll }>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene name') }\r\n                        value={ this.state.common.name }\r\n                        onChange={ e => {\r\n                           const common = JSON.parse(JSON.stringify(this.state.common));\r\n                           common.name = e.target.value;\r\n                           this.setStateWithParent({common});\r\n                       } }/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene description') }\r\n                        value={ this.state.common.desc }\r\n                        onChange={ e => {\r\n                               const common = JSON.parse(JSON.stringify(this.state.common));\r\n                               common.desc = e.target.value;\r\n                               this.setStateWithParent({common});\r\n                           }\r\n                        }/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={ 1 }>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControl className={this.props.classes.width100}>\r\n                                <InputLabel shrink={true}>{ I18n.t('Instance') }</InputLabel>\r\n                                <Select\r\n                                    value={ this.state.common.engine }\r\n                                    onChange={e => {\r\n                                        const common = JSON.parse(JSON.stringify(this.state.common));\r\n                                        common.engine = e.target.value;\r\n                                        this.setStateWithParent({common});\r\n                                    }}\r\n                                >\r\n                                    { this.props.instances.map(id => <MenuItem key={ id } value={ id }>{ id.replace('system.adapter.', '') }</MenuItem>) }\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Interval between commands') }\r\n                                min={ 0 }\r\n                                value={ this.state.native.burstInterval || 0 }\r\n                                helperText=\"ms\"\r\n                                type=\"number\"\r\n                                onChange={e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native.burstInterval = parseInt(e.target.value, 10);\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControlLabel\r\n                                style={{paddingTop: 10}}\r\n                                title={ I18n.t('virtual_group_tooltip') }\r\n                                label={ I18n.t('Virtual group') } control={\r\n                                <Checkbox checked={this.state.native.virtualGroup}\r\n                                          onChange={e => {\r\n                                              const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                              native.virtualGroup = e.target.checked;\r\n                                              this.setStateWithParent({native});\r\n                                          }}/>\r\n                            }/>\r\n                        </Grid>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            { !this.state.native.virtualGroup ?\r\n                                <FormControlLabel\r\n                                    style={{paddingTop: 10}}\r\n                                    label={I18n.t('Set value if false')}\r\n                                    control={\r\n                                          <Checkbox\r\n                                              checked={ this.state.native.onFalse.enabled }\r\n                                                    onChange={e => {\r\n                                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                        native.onFalse.enabled = e.target.checked;\r\n                                                        this.setStateWithParent({native});\r\n                                                    }}/>}\r\n                                />\r\n                                : null}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                { !this.state.native.virtualGroup ? this.renderOnTrueFalse('onTrue') : null }\r\n                { !this.state.native.virtualGroup && this.state.native.onFalse.enabled ? this.renderOnTrueFalse('onFalse') : null }\r\n            </Box>\r\n        </Box>;\r\n\r\n        return [\r\n            result,\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateScene: PropTypes.func.isRequired,\r\n    instances: PropTypes.array,\r\n    oneColumn: PropTypes.bool,\r\n    showError: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(SceneForm);","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\n// own components\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\n// icons\r\nimport {AiOutlineClockCircle as IconClock} from 'react-icons/ai';\r\nimport {MdDelete as IconDelete} from 'react-icons/md';\r\nimport {MdModeEdit as IconEdit} from 'react-icons/md';\r\nimport {IoMdClose as IconClose} from 'react-icons/io';\r\nimport {MdAdd as IconAdd} from 'react-icons/md';\r\nimport {MdPlayArrow as IconPlay} from 'react-icons/md';\r\n\r\nconst TRUE_COLOR       = '#90ee90';\r\nconst FALSE_COLOR      = '#ff9999';\r\nconst TRUE_DARK_COLOR  = '#528952';\r\nconst FALSE_DARK_COLOR = '#774747';\r\nconst UNCERTAIN_COLOR  = '#bfb7be';\r\n\r\nconst styles = theme => ({\r\n    memberTrueFalse: {\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n        fontSize: 'initial',\r\n        fontWeight: 'initial',\r\n        margin: '0 ' + theme.spacing(1) + 'px',\r\n        textAlign: 'right',\r\n        whiteSpace: 'nowrap',\r\n        maxWidth: 300,\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    memberTrue: {\r\n        backgroundColor: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    memberFalse: {\r\n        backgroundColor: 'pink',\r\n    },\r\n    memberUncertain: {\r\n        color: '#FFF',\r\n        backgroundColor: '#808080',\r\n    },\r\n    memberCard: {\r\n        padding: 4,\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    guttersZero: {\r\n        padding: 0,\r\n    },\r\n    sceneTitle: {\r\n        flexGrow: 1,\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    sceneSubTitle: {\r\n        fontSize: 'small',\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n    },\r\n    sceneTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    sceneFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n    },\r\n    sceneUncertain: {\r\n        background: UNCERTAIN_COLOR,\r\n    },\r\n    btnTestTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n        marginRight: theme.spacing(1),\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    btnTestFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    smallOnTrueFalse: {\r\n        fontSize: 'small',\r\n        textAlign: 'right',\r\n        width: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    stateValueTrue: {\r\n        color: '#60a060',\r\n        fontWeight: 'bold',\r\n    },\r\n    stateValueFalse: {\r\n        color: '#c15454',\r\n        fontWeight: 'bold',\r\n    },\r\n    changed: {\r\n        position: 'relative',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            width: 6,\r\n            height: 6,\r\n            borderRadius: 6,\r\n            background: '#FF0000',\r\n            position: 'absolute',\r\n            top: 5,\r\n            right: 5,\r\n        },\r\n    },\r\n    memberDesc: {\r\n        display: 'inline-block',\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n    },\r\n    memberTitle: {\r\n        fontSize: 14,\r\n        fontWeight: 'bold',\r\n    },\r\n    memberToolbar: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        minHeight: 72,\r\n    },\r\n    memberButtons: {\r\n        textAlign: 'right',\r\n        position: 'absolute',\r\n        top: 2,\r\n        right: 2,\r\n    },\r\n    width100WithButton: {\r\n        width: 'calc(100% - 48px)',\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n    testButtons: {\r\n        minHeight: 48,\r\n    },\r\n    setValue: {\r\n        width: 'calc(50% - ' + theme.spacing(1) + 'px)',\r\n        minWidth: 100,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    disabled: {\r\n        opacity: 0.3\r\n    },\r\n    instanceNotActive: {\r\n        marginLeft: theme.spacing(1),\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n        color: '#FF0000',\r\n    }\r\n});\r\n\r\nclass SceneMembersForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let openedMembers = window.localStorage.getItem('Scenes.openedMembers') || '[]';\r\n        try {\r\n            openedMembers = JSON.parse(openedMembers);\r\n        } catch (e) {\r\n            openedMembers = [];\r\n        }\r\n\r\n        this.state = {\r\n            states: {},\r\n            openedMembers,\r\n            objectTypes: {},\r\n            objectNames: {},\r\n            members: JSON.parse(JSON.stringify(props.members)),\r\n            writeSceneState: '',\r\n            deleteDialog: null,\r\n            onFalseEnabled: props.onFalseEnabled,\r\n            virtualGroup: props.virtualGroup,\r\n            sceneEnabled: props.sceneEnabled,\r\n            selectedSceneChanged: props.selectedSceneChanged,\r\n            engineId: props.engineId,\r\n        };\r\n\r\n        this.engineId = this.state.engineId;\r\n\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.readObjects()\r\n            .then(newState =>\r\n                this.setState(newState, () => {\r\n                    // subscribe on scene state\r\n                    this.props.socket.subscribeState(this.props.sceneId, this.memberStateChange);\r\n                    this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n                    // subscribe on all states\r\n                    this.state.members.forEach(member =>\r\n                        member.id && this.props.socket.subscribeState(member.id, this.memberStateChange))\r\n                }));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.unsubscribeState(this.props.sceneId, this.memberStateChange);\r\n        this.state.engineId && this.props.socket.unsubscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n        this.state.members.forEach(member =>\r\n            this.props.socket.unsubscribeState(member.id, this.memberStateChange));\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const newState = {};\r\n        let changed = false;\r\n\r\n        if (props.onFalseEnabled !== state.onFalseEnabled) {\r\n            newState.onFalseEnabled = props.onFalseEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.virtualGroup !== state.virtualGroup) {\r\n            newState.virtualGroup = props.virtualGroup;\r\n            changed = true;\r\n        }\r\n        if (props.selectedSceneChanged !== state.selectedSceneChanged) {\r\n            newState.selectedSceneChanged = props.selectedSceneChanged;\r\n            changed = true;\r\n        }\r\n        if (props.sceneEnabled !== state.sceneEnabled) {\r\n            newState.sceneEnabled = props.sceneEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.engineId !== state.engineId) {\r\n            newState.engineId = props.engineId;\r\n            changed = true;\r\n        }\r\n\r\n        return changed ? newState : null;\r\n    }\r\n\r\n    onDragEnd(result) {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n        const members = JSON.parse(JSON.stringify(this.state.members));\r\n        const [removed] = members.splice(result.source.index, 1);\r\n        members.splice(result.destination.index, 0, removed);\r\n\r\n        this.setStateWithParent({members});\r\n    }\r\n\r\n    readObjects() {\r\n        if (this.state.members) {\r\n            return Promise.all(\r\n                this.state.members.map(member =>\r\n                    this.props.socket.getObject(member.id)))\r\n                .then(results => {\r\n                    const objectTypes = {};\r\n                    const objectNames = {};\r\n                    results.forEach(obj => {\r\n                        if (obj && obj.common && obj.common.type) {\r\n                            objectTypes[obj._id] = obj.common.type;\r\n                            objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, false);\r\n                        }\r\n                    });\r\n\r\n                    return {objectTypes, objectNames};\r\n                })\r\n                .catch(e => this.props.showError(e));\r\n        } else {\r\n            return Promise.resolve({});\r\n        }\r\n    }\r\n\r\n    memberStateChange = (id, state) => {\r\n        const states = JSON.parse(JSON.stringify(this.state.states));\r\n        states[id] = state ? state.val : null;\r\n        const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n\r\n        if (!objectTypes[id] && states[id] !== null && states[id] !== undefined) {\r\n            objectTypes[id] = typeof states[id];\r\n        }\r\n\r\n        if (objectTypes[id] === 'boolean') {\r\n            if (states[id] === 'true') {\r\n                states[id] = true;\r\n            }\r\n            if (states[id] === 'false') {\r\n                states[id] = false;\r\n            }\r\n        } else if (objectTypes[id] === 'number') {\r\n            states[id] = parseFloat(states[id]);\r\n        }\r\n\r\n        this.setState({states, objectTypes});\r\n    };\r\n\r\n    createSceneMembers = ids => {\r\n        this.setState({showDialog: false}, () => {\r\n            // filter out yet existing IDs\r\n            ids = ids.filter(id => !this.state.members.find(item => item.id === id));\r\n            if (ids.length) {\r\n                const openedMembers = [...this.state.openedMembers];\r\n                const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n                const objectNames = JSON.parse(JSON.stringify(this.state.objectNames));\r\n                const members     = JSON.parse(JSON.stringify(this.state.members));\r\n\r\n                Promise.all(ids.map(id =>\r\n                    // Read type of state\r\n                    this.props.socket.getObject(id)\r\n                        .then(obj => {\r\n                            if (!obj) {\r\n                                return;\r\n                            }\r\n\r\n                            const template = {\r\n                                id,\r\n                                setIfTrue: null,\r\n                                setIfFalse: null,\r\n                                stopAllDelays: true,\r\n                                desc: null,\r\n                                disabled: false,\r\n                                delay: 0\r\n                            };\r\n\r\n                            if (obj) {\r\n                                objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, true);\r\n                            }\r\n\r\n\r\n                            if (obj && obj.common && obj.common.type) {\r\n                                objectTypes[id] = obj.common.type;\r\n\r\n                                if (objectTypes[id] === 'boolean') {\r\n                                    template.setIfTrue = true;\r\n                                    if (this.state.onFalseEnabled) {\r\n                                        template.setIfFalse = false;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            members.push(template);\r\n\r\n                            // open added state\r\n                            openedMembers.push(id);\r\n                        })\r\n                        .then(() => this.setStateWithParent({objectTypes, objectNames, members, openedMembers}, () =>\r\n                            // Subscribe on all new members\r\n                            ids.forEach(id => this.props.socket.subscribeState(id, this.memberStateChange)))\r\n                        )\r\n                    )\r\n                )\r\n                    .catch(e => this.props.showError(e));\r\n            } else {\r\n                // Show alert\r\n                this.props.showError(I18n.t('Unknown error!'));\r\n            }\r\n        });\r\n    };\r\n\r\n    deleteSceneMember = id => {\r\n        let members = JSON.parse(JSON.stringify(this.state.members));\r\n\r\n        for (let i = 0; i < members.length; i++) {\r\n            if (members[i].id === id) {\r\n                members.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        this.setStateWithParent({members, deleteDialog: null}, () =>\r\n            this.props.socket.unsubscribeState(id, this.memberStateChange));\r\n    };\r\n\r\n    setStateWithParent(newState, cb) {\r\n        const that = this;\r\n        this.setState(newState, () =>\r\n            this.props.updateSceneMembers(that.state.members, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n            imagePrefix={'../..'}\r\n            key=\"selectDialogMembers\"\r\n            socket={ this.props.socket }\r\n            dialogName=\"memberEdit\"\r\n            multiSelect={ true }\r\n            title={ I18n.t('Select for ') }\r\n            selected={ null }\r\n            onOk={ id => this.createSceneMembers(id) }\r\n            onClose={ () => this.setState({showDialog: false}) }\r\n        /> : null;\r\n    }\r\n\r\n    renderDeleteDialog() {\r\n        if (this.state.deleteDialog === null) {\r\n            return;\r\n        }\r\n\r\n        return <Dialog\r\n            open={ true }\r\n            key=\"deleteDialog\"\r\n            onClose={ () =>\r\n                this.setState({deleteDialog: null}) }\r\n            >\r\n                <DialogTitle>{ I18n.t('Are you sure for delete this state?') }</DialogTitle>\r\n\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: null}) }>\r\n                        {I18n.t('Cancel')}\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={ e => this.deleteSceneMember(this.state.deleteDialog) }>\r\n                        { I18n.t('Delete') }\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>;\r\n    };\r\n\r\n    renderMember = (member, index) => {\r\n        let value = null;\r\n        const classes = this.props.classes;\r\n        if (this.state.states[member.id] !== undefined && this.state.states[member.id] !== null) {\r\n            let _valStr = this.state.states[member.id].toString();\r\n\r\n            if (_valStr === 'true') {\r\n                _valStr = 'TRUE';\r\n            } else if (_valStr === 'false') {\r\n                _valStr = 'FALSE';\r\n            }\r\n\r\n            if (member.setIfTrueTolerance && Math.abs(this.state.states[member.id] - member.setIfTrue) <= member.setIfTrueTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (this.state.states[member.id] === member.setIfTrue) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && member.setIfFalseTolerance && Math.abs(this.state.states[member.id] - member.setIfFalse) <= member.setIfFalseTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && this.state.states[member.id] === member.setIfFalse) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberUncertain) }>{ _valStr }</div>;\r\n            }\r\n        }\r\n\r\n        let setIfTrue = member.setIfTrue;\r\n        if (setIfTrue === undefined || setIfTrue === null) {\r\n            setIfTrue = '';\r\n        } else {\r\n            if (setIfTrue === true) {\r\n                setIfTrue = 'TRUE';\r\n            } else if (setIfTrue === false) {\r\n                setIfTrue = 'FALSE';\r\n            } else {\r\n                if (member.setIfTrueTolerance) {\r\n                    setIfTrue = setIfTrue + '±' + member.setIfTrueTolerance;\r\n                } else {\r\n                    setIfTrue = setIfTrue.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        let setIfFalse = member.setIfFalse;\r\n        if (setIfFalse === undefined || setIfFalse === null) {\r\n            setIfFalse = '';\r\n        } else {\r\n            if (setIfFalse === true) {\r\n                setIfFalse = 'TRUE';\r\n            } else if (setIfFalse === false) {\r\n                setIfFalse = 'FALSE';\r\n            } else {\r\n                if (member.setIfFalseTolerance) {\r\n                    setIfFalse = setIfFalse + '±' + member.setIfFalseTolerance;\r\n                } else {\r\n                    setIfFalse = setIfFalse.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        const opened = this.state.openedMembers.includes(member.id);\r\n        const onFalseEnabled = !this.state.virtualGroup && this.state.onFalseEnabled;\r\n\r\n        // calculate enabled states\r\n        let countEnabled = 0;\r\n        for (let u = 0; u < index; u++) {\r\n            if (!this.state.members[u].disabled) {\r\n                countEnabled++;\r\n            }\r\n        }\r\n\r\n        return <Paper key={ member.id } className={ clsx(classes.memberCard, member.disabled && classes.disabled) }>\r\n            <div className={ classes.memberToolbar }>\r\n                <div className={ classes.memberTitle }>{ member.id }</div>\r\n                <div className={ classes.memberDesc }>{ member.desc || this.state.objectNames[member.id] || '' }</div>\r\n                <div className={ classes.memberButtons }>\r\n                    <IconButton title={ I18n.t('Edit') } onClick={ () => {\r\n                        const openedMembers = [...this.state.openedMembers];\r\n                        const pos = openedMembers.indexOf(member.id);\r\n                        if (pos !== -1) {\r\n                            openedMembers.splice(pos, 1);\r\n                        } else {\r\n                            openedMembers.push(member.id);\r\n                            openedMembers.sort();\r\n                        }\r\n                        window.localStorage.setItem('Scenes.openedMembers', JSON.stringify(openedMembers));\r\n                        this.setState({openedMembers});\r\n                    }}>\r\n                        { opened ? <IconClose/> : <IconEdit/> }\r\n                    </IconButton>\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 5 }} aria-label=\"Delete\" title={I18n.t('Delete')}\r\n                        onClick={ () => this.setState({deleteDialog: member.id}) }>\r\n                        <IconDelete/>\r\n                    </IconButton>\r\n                    <Switch\r\n                        checked={ !member.disabled }\r\n                        onChange={ e => {\r\n                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                            members[index].disabled = !e.target.checked;\r\n                            this.setStateWithParent({members});\r\n                        }}\r\n                        name={ member.id }\r\n                    />\r\n                    { value }\r\n                </div>\r\n            </div>\r\n            <div>{ member.desc } { !opened && !member.disabled && (this.props.intervalBetweenCommands || member.delay) ?\r\n                <span> <IconClock/> { this.props.intervalBetweenCommands * countEnabled + (member.delay || 0) + I18n.t('ms') + ' ' + I18n.t('from scene start')}</span> : null }</div>\r\n            {\r\n                opened ?\r\n                    <div>\r\n                        {/*<Box className={classes.p}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}} label={I18n.t('Description')}\r\n                                value={member.desc || ''}\r\n                                onChange={e => {\r\n                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                    members[index].desc = e.target.value;\r\n                                    this.setStateWithParent({members});\r\n                                }}\r\n                            />\r\n                        </Box>*/ }\r\n                        { !this.state.virtualGroup ? <Box className={ classes.p }>\r\n                            { this.state.objectTypes[member.id] === 'boolean' ?\r\n                                <FormControl className={ classes.setValue }>\r\n                                    <InputLabel>{ onFalseEnabled ? I18n.t('Setpoint by TRUE') : I18n.t('Setpoint') }</InputLabel>\r\n                                    <Select\r\n                                        value={ member.setIfTrue === true || member.setIfTrue === 'true' ? 'true' : 'false'}\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].setIfTrue = e.target.value === 'true';\r\n                                            this.setStateWithParent({members});\r\n                                        } }\r\n                                    >\r\n                                        <MenuItem value=\"false\">FALSE</MenuItem>\r\n                                        <MenuItem value=\"true\">TRUE</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                                :\r\n                                <Box className={ classes.p }>\r\n                                    <TextField\r\n                                        InputLabelProps={ {shrink: true} }\r\n                                        label={ onFalseEnabled ? I18n.t('Setpoint by TRUE') : I18n.t('Setpoint') }\r\n                                        value={ member.setIfTrue === undefined || member.setIfTrue === null ? '' : member.setIfTrue }\r\n                                        className={ classes.setValue }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            if (this.state.objectTypes[member.id] === 'number') {\r\n                                                members[index].setIfTrue = parseFloat(e.target.value.replace(',', '.'));\r\n                                            } else {\r\n                                                members[index].setIfTrue = e.target.value;\r\n                                            }\r\n\r\n                                            this.setStateWithParent({members});\r\n                                         } }/>\r\n                                    <TextField\r\n                                        InputLabelProps={ {shrink: true} }\r\n                                        label={ '± ' + (onFalseEnabled ? I18n.t('Tolerance by TRUE') : I18n.t('Tolerance')) }\r\n                                        value={ member.setIfTrueTolerance === undefined || member.setIfTrueTolerance === null ? '' : member.setIfTrueTolerance }\r\n                                        title={ I18n.t('Absolute value, not percent') }\r\n                                        className={ classes.setValue }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].setIfTrueTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                                            this.setStateWithParent({members});\r\n                                        } }/>\r\n                                </Box>\r\n                            }\r\n                        </Box> : null }\r\n                        { !this.state.virtualGroup && this.state.onFalseEnabled ?\r\n                            <Box className={ classes.p }>\r\n                                {\r\n                                    this.state.objectTypes[member.id] === 'boolean' ?\r\n                                        <FormControl className={ classes.setValue }>\r\n                                            <InputLabel>{ I18n.t('Setpoint by FALSE') }</InputLabel>\r\n                                            <Select\r\n                                                value={ member.setIfFalse === true || member.setIfFalse === 'true' ? 'true' : 'false'}\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].setIfFalse = e.target.value === 'true';\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            >\r\n                                                <MenuItem value=\"false\">FALSE</MenuItem>\r\n                                                <MenuItem value=\"true\">TRUE</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        <Box className={ classes.p }>\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                InputLabelProps={ {shrink: true} }\r\n                                                label={ I18n.t('Setpoint by FALSE') }\r\n                                                value={ member.setIfFalse === undefined || member.setIfFalse === null ? '' : member.setIfFalse }\r\n                                                className={ classes.setValue }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    if (this.state.objectTypes[member.id] === 'number') {\r\n                                                        members[index].setIfFalse = parseFloat(e.target.value.replace(',', '.'));\r\n                                                    } else {\r\n                                                        members[index].setIfFalse = e.target.value;\r\n                                                    }\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                            <TextField\r\n                                                InputLabelProps={ {shrink: true} }\r\n                                                label={ '± ' + I18n.t('Tolerance by FALSE') }\r\n                                                title={ I18n.t('Absolute value, not percent') }\r\n                                                value={ member.setIfFalseTolerance === undefined || member.setIfFalseTolerance === null ? '' : member.setIfFalseTolerance }\r\n                                                className={ classes.setValue }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].setIfFalseTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                        </Box>\r\n                                }\r\n                            </Box>\r\n                            : null}\r\n                        <Box className={ classes.p }>\r\n                            <Grid container spacing={ 4 }>\r\n                                <Grid item xs={ 12 } sm={ 6 }>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        InputLabelProps={{shrink: true}}\r\n                                        label={ I18n.t('Delay from start of scene (ms)')}\r\n                                        title={ I18n.t(\r\n                                            'Additionally to the interval between commands. E.g. if the interval %s, this state will be set after %s ms from scene start',\r\n                                            this.props.intervalBetweenCommands,\r\n                                            this.props.intervalBetweenCommands * index + (member.delay || 0)\r\n                                        )}\r\n                                        value={ member.delay || 0}\r\n                                        min={ 0 }\r\n                                        type=\"number\"\r\n                                        onChange={e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].delay = parseInt(e.target.value, 10);\r\n                                            this.setStateWithParent({members});\r\n                                        }}/>\r\n                                </Grid>\r\n                                <Grid item xs={ 12 } sm={ 6 }>\r\n                                    <FormControlLabel\r\n                                        label={ I18n.t('Stop already started commands') }\r\n                                        control={\r\n                                            <Checkbox\r\n                                                checked={ member.stopAllDelays }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].stopAllDelays = e.target.checked;\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                    }/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                        <Box className={ classes.p }>\r\n                            <FormControlLabel\r\n                                label={ I18n.t('Do not overwrite state if it has the required value') }\r\n                                title={\r\n                                    I18n.t('For example, if the value is already at \"%s\" and \"%s\" is the setpoint, then write the value anyway if this checkbox is activated.',\r\n                                        member.setIfTrue === undefined || member.setIfTrue === null ? 'null' : member.setIfTrue.toString(),\r\n                                        member.setIfTrue === undefined || member.setIfTrue === null ? 'null' : member.setIfTrue.toString())\r\n                                }\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={ !!member.doNotOverwrite }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].doNotOverwrite = e.target.checked;\r\n                                            this.setStateWithParent({members});\r\n                                        } }\r\n                                    />\r\n                            }/>\r\n                        </Box>\r\n                    </div> :\r\n                    (!this.state.virtualGroup ? <div className={ classes.smallOnTrueFalse }>\r\n                        { (onFalseEnabled ? I18n.t('Set if TRUE') : I18n.t('Setpoint')) + ': ' } <span className={ classes.stateValueTrue }>{ setIfTrue }</span>\r\n                        { onFalseEnabled ? ' / ' + I18n.t('Set if FALSE') + ': ' : null}\r\n                        { onFalseEnabled ? <span className={ classes.stateValueFalse }>{ setIfFalse }</span> : null}\r\n                    </div> : <div style={ {height: 8} }/>)\r\n            }\r\n        </Paper>\r\n    };\r\n\r\n    onWriteScene(val) {\r\n        if (val === 'true') {\r\n            val = true;\r\n        } else if (val === 'false') {\r\n            val = false;\r\n        } else if (typeof val === 'string' && parseFloat(val.replace(',', '.')).toString() === val) {\r\n            val = parseFloat(val.replace(',', '.'));\r\n        }\r\n\r\n        this.props.socket.setState(this.props.sceneId, val)\r\n            .catch(e => this.props.showError(e));\r\n    }\r\n\r\n    getItemStyle = (isDragging, draggableStyle) => ({\r\n        // some basic styles to make the items look a bit nicer\r\n        userSelect: 'none',\r\n        background: isDragging ? 'lightgreen' : 'inherit',\r\n\r\n        // styles we need to apply on draggables\r\n        ...draggableStyle\r\n    });\r\n\r\n    getListStyle = isDraggingOver => ({\r\n        background: isDraggingOver ? 'lightblue' : 'inherit',\r\n    });\r\n\r\n    render = () => {\r\n        let sceneState = this.state.states[this.props.sceneId];\r\n        if (this.state.selectedSceneChanged) {\r\n            sceneState = I18n.t('Save scene before test');\r\n        } else if (sceneState === undefined || sceneState === null) {\r\n            sceneState = '';\r\n        }\r\n\r\n        if (this.engineId !== this.state.engineId) {\r\n            this.engineId && this.props.socket.unsubscribeState(this.engineId + '.alive', this.memberStateChange);\r\n            this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n            this.engineId = this.state.engineId;\r\n        }\r\n\r\n        const onFalseEnabled =!this.state.virtualGroup && this.state.onFalseEnabled;\r\n\r\n        let result = <div key=\"SceneMembersForm\" className={ clsx(!this.props.oneColumn && this.props.classes.height, this.props.classes.columnContainer) }>\r\n            <Toolbar classes={{ gutters: this.props.classes.guttersZero }}>\r\n                <Typography variant=\"h6\" className={ clsx(this.props.classes.sceneTitle) } >\r\n                    { I18n.t('Scene states') }{ !this.state.states[this.state.engineId + '.alive'] ? <span className={ this.props.classes.instanceNotActive }>{ I18n.t('Instance not active') }</span> : ''}\r\n                    <br/>\r\n                    <span className={ clsx(\r\n                        this.props.classes.sceneSubTitle,\r\n                        !this.state.virtualGroup && sceneState === true && this.props.classes.sceneTrue,\r\n                        !this.state.virtualGroup && sceneState === false && this.props.classes.sceneFalse,\r\n                        !this.state.virtualGroup && sceneState === 'uncertain' && this.props.classes.sceneUncertain,\r\n                    ) }>{ I18n.t('Scene state:') } { sceneState === true ? 'TRUE' : (sceneState === false ? 'FALSE' : sceneState.toString()) }</span>\r\n                </Typography>\r\n                <IconButton title={I18n.t('Add new state')} onClick={() => this.setState({showDialog: true})}>\r\n                    <IconAdd/>\r\n                </IconButton>\r\n            </Toolbar>\r\n            <div className={ clsx(this.props.classes.testButtons, this.props.classes.width100) }>\r\n                {  !this.state.selectedSceneChanged && this.state.virtualGroup ? <TextField\r\n                    className={ this.props.classes.width100WithButton }\r\n                    label={ I18n.t('Write to virtual group') }\r\n                    defaultValue={ sceneState }\r\n                    onKeyUp={e => e.keyCode === 13 && this.onWriteScene(this.state.writeSceneState)}\r\n                    onChange={e => this.setState({writeSceneState: e.target.value}) }\r\n                /> : null}\r\n                { !this.state.selectedSceneChanged && this.state.virtualGroup && this.state.members.length ? <IconButton\r\n                    onClick={e => this.onWriteScene(this.state.writeSceneState) }\r\n                ><IconPlay/></IconButton> : null}\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && !this.state.virtualGroup ? <Button\r\n                    className={ this.props.classes.btnTestTrue }\r\n                    onClick={ () => this.onWriteScene(true) }\r\n                ><IconPlay/>{ !onFalseEnabled ? I18n.t('Test') : I18n.t('Test TRUE') }</Button> : null }\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && onFalseEnabled && this.state.members.length ? <Button\r\n                    className={ this.props.classes.btnTestFalse }\r\n                    onClick={ () => this.onWriteScene(false) }\r\n                ><IconPlay/>{ I18n.t('Test FALSE') }</Button> : null }\r\n            </div>\r\n            <DragDropContext onDragEnd={ this.onDragEnd }>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div className={ this.props.classes.scroll }\r\n                             {...provided.droppableProps}\r\n                             ref={ provided.innerRef }\r\n                             style={ this.getListStyle(snapshot.isDraggingOver) }\r\n                        >\r\n                            { this.state.members.map((member, i) =>\r\n                                <Draggable key={ member.id } draggableId={ member.id } index={ i }>\r\n                                    {(provided, snapshot) =>\r\n                                        <div\r\n                                            ref={ provided.innerRef }\r\n                                            {...provided.draggableProps }\r\n                                            {...provided.dragHandleProps }\r\n                                            style={ this.getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            ) }\r\n                                        >{ this.renderMember(member, i) }</div>}\r\n                                </Draggable>\r\n                            )}\r\n                            { provided.placeholder }\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>;\r\n\r\n        return [\r\n            result,\r\n            this.renderDeleteDialog(),\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneMembersForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateSceneMembers: PropTypes.func,\r\n    sceneId: PropTypes.string,\r\n    onFalseEnabled: PropTypes.bool,\r\n    virtualGroup: PropTypes.bool,\r\n    sceneEnabled: PropTypes.bool,\r\n    selectedSceneChanged: PropTypes.bool,\r\n    intervalBetweenCommands: PropTypes.number,\r\n    engineId: PropTypes.string,\r\n    oneColumn: PropTypes.bool,\r\n    showError: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(SceneMembersForm);","// Common\nimport React from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Alert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-noconflict/mode-json';\nimport 'ace-builds/src-noconflict/theme-clouds_midnight';\nimport 'ace-builds/src-noconflict/theme-chrome';\nimport 'ace-builds/src-noconflict/ext-language_tools'\n\n// Own\nimport I18n from '@iobroker/adapter-react/i18n';\nimport copy from '@iobroker/adapter-react/Components/copy-to-clipboard';\n\nconst styles = theme => ({\n    divWithoutTitle: {\n        width: '100%',\n        height: '100%',\n        border: '2px solid #00000000',\n    },\n    error: {\n        border: '2px solid #FF0000',\n    },\n});\n\nclass ExportImportDialog extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: props.sceneObj ? JSON.stringify(props.sceneObj, null, 2) : '',\n            error: false,\n            toast: '',\n        };\n    }\n\n    onChange(value) {\n        const newState = {text: value};\n        try {\n            JSON.parse(value);\n            if (this.state.error) {\n                newState.error = false;\n            }\n\n            this.setState(newState);\n        } catch (e) {\n            newState.error = true;\n            this.setState(newState);\n        }\n    }\n\n    renderToast() {\n        return <Snackbar open={ !!this.state.toast } autoHideDuration={ 3000 } onClick={ () => this.setState({ toast: '' }) } onClose={ () => this.setState({ toast: '' }) }>\n            <Alert color=\"info\" severity=\"success\" >{ this.state.toast }</Alert>\n        </Snackbar>;\n    }\n\n    render() {\n        return <Dialog\n            open={ true }\n            onClose={ () => this.props.onClose() }\n            aria-labelledby=\"export-dialog-title\"\n            fullWidth\n            maxWidth=\"lg\"\n            fullScreen={ true }\n            aria-describedby=\"export-dialog-description\"\n        >\n            <DialogTitle id=\"export-dialog-title\">{ this.props.isImport ? I18n.t('Import scene') : I18n.t('Export scene') }</DialogTitle>\n            <DialogContent>\n                <div className={ clsx(this.props.classes.divWithoutTitle, this.state.error && this.props.classes.error) }>\n                    <AceEditor\n                        autoFocus\n                        mode=\"json\"\n                        width=\"100%\"\n                        height=\"100%\"\n                        onLoad={editor => {\n                            this.codeEditor = editor;\n                            this.codeEditor.focus();\n                        }}\n                        theme={ this.props.themeType === 'dark' ? 'clouds_midnight' : 'chrome' }\n                        onChange={ newValue => this.onChange(newValue) }\n                        value={ this.state.text || '' }\n                        name=\"UNIQUE_ID_OF_DIV\"\n                        fontSize={ 14 }\n                        readOnly={ !this.props.isImport }\n                        editorProps={{ $blockScrolling: true }}\n                    />\n                </div>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={ () => this.props.onClose() } autoFocus={ !this.props.isImport }>\n                    { I18n.t('Close') }\n                </Button>\n                { this.props.isImport ?\n                    <Button\n                        disabled={ !this.state.text || this.state.error }\n                        onClick={ () => this.props.onClose(JSON.parse(this.state.text)) }\n                        color=\"primary\"\n                    >\n                        { I18n.t('Import') }\n                    </Button>\n                    :\n                    <Button onClick={ () => {\n                        copy(this.state.text);\n                        this.setState({ toast: I18n.t('Copied') });\n                        setTimeout(() => this.props.onClose(), 500);\n                    } } color=\"primary\" autoFocus>\n                        { I18n.t('Copy to clipboard') }\n                    </Button>}\n                { this.renderToast() }\n            </DialogActions>\n        </Dialog>;\n    }\n}\n\nExportImportDialog.propTypes = {\n    classes: PropTypes.object,\n    sceneObj: PropTypes.object,\n    themeType: PropTypes.string,\n    onClose: PropTypes.func,\n    isImport: PropTypes.bool,\n};\n\nexport default withStyles(styles)(ExportImportDialog);","// Common\nimport React from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport { withTheme } from '@material-ui/core/styles';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport withWidth from \"@material-ui/core/withWidth\";\n\n// MaterialUi\nimport Grid from '@material-ui/core/Grid';\nimport Switch from '@material-ui/core/Switch';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Drawer from '@material-ui/core/Drawer';\n\n// Own\nimport Utils from '@iobroker/adapter-react/Components/Utils';\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\nimport Loader from '@iobroker/adapter-react/Components/Loader'\nimport I18n from '@iobroker/adapter-react/i18n';\n\nimport SceneForm from './components/SceneForm';\nimport SceneMembersForm from './components/SceneMembersForm';\nimport ExportImportDialog from './components/ExportImportDialog';\n\n// icons\nimport {MdExpandLess as IconCollapse} from 'react-icons/md';\nimport {MdExpandMore as IconExpand} from 'react-icons/md';\nimport {MdAdd as IconAdd} from 'react-icons/md';\nimport {MdModeEdit as IconEdit} from 'react-icons/md';\nimport {RiFolderAddLine as IconFolderAdd} from 'react-icons/ri';\nimport {MdClose as IconCancel} from 'react-icons/md';\nimport {MdCheck as IconCheck} from 'react-icons/md';\nimport {MdSave as IconSave} from 'react-icons/md';\nimport {MdDelete as IconDelete} from 'react-icons/md';\nimport {MdFileDownload as IconExport} from 'react-icons/md';\nimport {FaScroll as IconScript} from 'react-icons/all';\nimport {FaFolder as IconFolderClosed} from 'react-icons/all';\nimport {FaFolderOpen as IconFolderOpened} from 'react-icons/all';\n// import {MdFileUpload as IconImport} from 'react-icons/md';\nimport {FaClone as IconClone} from 'react-icons/fa';\nimport {FaBars as IconMenu} from 'react-icons/fa';\nimport {BsFolderSymlink as IconMoveToFolder} from 'react-icons/bs';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nconst LEVEL_PADDING = 16;\nconst MARGIN_MEMBERS = 20;\n\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        height: 'calc(100% + 4px)',\n        backgroundColor: theme.palette.type === 'dark' ? '#000': '#fff',\n        overflowX: 'hidden',\n    },\n    mainToolbar: {\n        background: theme.palette.primary.main,\n    },\n    tabContent: {\n        padding: 10,\n        height: 'calc(100% - 64px - 48px - 20px)',\n        overflow: 'auto'\n    },\n    textInput: {\n        display: 'block',\n    },\n    width100: {\n        width: '100%',\n    },\n    noGutters: {\n        paddingLeft: 0,\n        paddingRight: 0,\n    },\n    height: {\n        height: '100%',\n    },\n    heightMinusToolbar: {\n        height: 'calc(100% - 48px)',\n    },\n    heightMinus2Toolbars: {\n        height: 'calc(100% - 96px)',\n    },\n    heightMinusMargin: {\n        height: 'calc(100% - ' + MARGIN_MEMBERS + 'px)',\n    },\n    folderItem: {\n        fontWeight: 'bold',\n        cursor: 'pointer',\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\n    },\n    fullWidthContainer: {\n        maxWidth: 'inherit',\n        paddingTop: 2,\n        paddingBottom: 2,\n        paddingLeft: 2,\n        paddingRight: 2,\n        overflow: 'hidden'\n    },\n    columnContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    scroll: {\n        overflowY: 'auto',\n        overflowX: 'hidden',\n        height: '100%',\n        width: '100%',\n    },\n    buttonsContainer1: {\n        '& button': {\n            margin: '0 ' + theme.spacing(1) + 'px',\n        },\n    },\n    alignRight: {\n        textAlign: 'right',\n    },\n    list: {\n        width: '100%',\n        padding: 0,\n    },\n    right: {\n        float: 'right',\n    },\n    membersCell: {\n        backgroundColor: theme.palette.type === 'dark' ? '#566770': '#ADD8E6',\n        marginTop: MARGIN_MEMBERS,\n        marginRight: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n        paddingTop: 0,\n        paddingLeft: 10,\n        paddingRight: 10,\n        paddingBottom: 10,\n\n        borderRadius: 4,\n        height: 'calc(100% - ' + theme.spacing(1) + 'px)',\n    },\n    leftMenuItem: {\n        display: 'block',\n        borderRadius: 10,\n    },\n    p: {\n        margin: '1em 0',\n    },\n    changed: {\n        position: 'relative',\n        '&:after': {\n            content: '\"\"',\n            width: 6,\n            height: 6,\n            borderRadius: 6,\n            background: '#FF0000',\n            position: 'absolute',\n            top: 5,\n            right: 5,\n        },\n    },\n    sceneTitle: {\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\n        flexGrow: 1,\n        paddingLeft: theme.spacing(1),\n    },\n    sceneSubTitle: {\n        fontSize: 'small',\n        display: 'block'\n    },\n    toolbarButtons: {\n        marginRight: theme.spacing(1),\n    },\n    settingsBackground: {\n        background: theme.palette.type === 'dark' ? '#3a3a3a': '#eeeeee',\n    },\n    listItemTitle: {\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\n    },\n    listItemSubTitle: {\n        color: theme.palette.type === 'dark' ? '#bababa': '#2a2a2a',\n    },\n    disabled: {\n        opacity: 0.3\n    },\n    itemIconRoot: {\n        minWidth: 24 + theme.spacing(1),\n    },\n    itemIcon: {\n        width: 24,\n        height: 24,\n    },\n    itemIconFolder: {\n        color: theme.palette.type === 'dark' ? '#ffca2c' : '#ffca2c'\n    },\n    noHeight: {\n        height: 'inherit',\n    },\n    drawer: {\n        overflow: 'hidden'\n    },\n});\n\nfunction getUrlQuery() {\n    const parts = (window.location.search || '').replace(/^\\?/, '').split('&');\n    const query = {};\n    parts.forEach(item => {\n        const [name, val] = item.split('=');\n        query[decodeURIComponent(name)] = val !== undefined ? decodeURIComponent(val) : true;\n    });\n    return query;\n}\n\nfunction getFolderPrefix(sceneId) {\n    let result = sceneId.split('.');\n    result.shift();\n    result.shift();\n    result.pop();\n    result = result.join('.');\n    return result;\n}\n\nfunction getFolderList(folder) {\n    let result = [];\n    result.push(folder);\n    Object.values(folder.subFolders).forEach(subFolder =>\n        result = result.concat(getFolderList(subFolder)));\n\n    return result;\n}\n\nconst FORBIDDEN_CHARS = /[.\\][*,;'\"`<>\\\\?]/g;\n\nclass App extends GenericApp {\n    constructor(props) {\n        const extendedProps = {...props};\n        extendedProps.translations = {\n            'en': require('./i18n/en'),\n            'de': require('./i18n/de'),\n            'ru': require('./i18n/ru'),\n            'pt': require('./i18n/pt'),\n            'nl': require('./i18n/nl'),\n            'fr': require('./i18n/fr'),\n            'it': require('./i18n/it'),\n            'es': require('./i18n/es'),\n            'pl': require('./i18n/pl'),\n            'zh-cn': require('./i18n/zh-cn'),\n        };\n\n        super(props, extendedProps);\n\n        const query = getUrlQuery();\n\n        this.port = query.port || (window.location.port === '3000' ? 8081 : window.location.port);\n        this.host = query.host || window.location.hostname;\n\n        window.iobForceHost = this.host;\n    }\n\n    onConnectionReady() {\n        let opened;\n        try {\n            opened = JSON.parse(window.localStorage.getItem('Scenes.opened')) || [];\n        } catch (e) {\n            opened = [];\n        }\n\n        const newState = {\n            lang: this.socket.systemLang,\n            ready: false,\n            selectedSceneId: window.localStorage.getItem('Scenes.selectedSceneId') || '',\n            opened,\n            scenes: {},\n            folders: null,\n            search: null,\n            addFolderDialog: null,\n            addFolderDialogTitle: null,\n            editFolderDialog: null,\n            editFolderDialogTitle: null,\n            changingScene: '',\n            showSearch: null,\n            instances: [],\n            selectedSceneChanged: false,\n            deleteDialog: null,\n            moveDialog: null,\n            newFolder: '',\n            selectedSceneData: null,\n            exportDialog: false,\n            importDialog: false,\n            menuOpened: false,\n        };\n\n        this.socket.getSystemConfig()\n            .then(systemConfig => {\n                newState.systemConfig = systemConfig;\n\n                return this.socket.getAdapterInstances(window.adapterName)\n                    .then(instances => {\n                        newState.instances = instances.map(item => item._id);\n                        this.setState(newState, () =>\n                            this.refreshData());\n                    });\n            })\n            .catch(e => this.showError(e));\n    }\n\n    sceneSwitch = event => {\n        const id = event.target.name;\n        let scenes = JSON.parse(JSON.stringify(this.state.scenes));\n\n        if (id === this.state.selectedSceneId) {\n            scenes[id] = JSON.parse(JSON.stringify(this.state.selectedSceneData));\n            scenes[id].common.enabled = event.target.checked;\n        }\n\n        scenes[id].common.enabled = event.target.checked;\n\n        this.socket.setObject(id, scenes[id])\n            .then(() => this.refreshData(id))\n            .catch(e => this.showError(e));\n    };\n\n    buildTree(scenes) {\n        scenes = Object.values(scenes);\n\n        let folders = {subFolders: {}, scenes: {}, id: '', prefix: ''};\n\n        // create missing folders\n        scenes.forEach((scene) => {\n            let id = scene._id;\n            const parts = id.split('.');\n            parts.shift();\n            parts.shift();\n            let currentFolder = folders;\n            let prefix = '';\n            for (let i = 0; i < parts.length - 1; i++) {\n                if (prefix) {\n                    prefix = prefix + '.';\n                }\n                prefix = prefix + parts[i];\n                if (!currentFolder.subFolders[parts[i]]) {\n                    currentFolder.subFolders[parts[i]] = {\n                        subFolders: {},\n                        scenes: {},\n                        id: parts[i],\n                        prefix,\n                    }\n                }\n                currentFolder = currentFolder.subFolders[parts[i]];\n            }\n            currentFolder.scenes[id] = scene;\n        });\n\n        return folders;\n    }\n\n    findFolder(parent, folder) {\n        if (parent.prefix === folder.prefix) {\n            return parent;\n        }\n        for (let index in parent.subFolders) {\n            let result = this.findFolder(parent.subFolders[index], folder);\n            if (result) {\n                return result;\n            }\n        }\n    }\n\n    getData() {\n        let scenes;\n        return this.socket.getObjectView('scene.0.', 'scene.\\u9999', 'state')\n            .then(_scenes => {\n                scenes = _scenes;\n                return {scenes, folders: this.buildTree(scenes)};\n            })\n            .catch(e => this.showError(e));\n    }\n\n    refreshData(changingScene) {\n        const that = this;\n        return new Promise(resolve => {\n            if (changingScene) {\n                this.setState({changingScene}, () => resolve());\n            } else {\n                this.setState({ready: false}, () => resolve());\n            }\n        })\n            .then(() => this.getData())\n            .then(newState => {\n                newState.ready = true;\n                newState.changingScene = '';\n                newState.selectedSceneChanged = false;\n\n                // Fill missing data\n                Object.keys(newState.scenes).forEach(id => {\n                    const sceneObj = newState.scenes[id];\n                    sceneObj.common = sceneObj.common || {};\n                    sceneObj.native = sceneObj.native || {};\n\n                    // rename attribute\n                    if (sceneObj.native.burstIntervall !== undefined) {\n                        sceneObj.native.burstInterval = sceneObj.native.burstIntervall;\n                        delete sceneObj.native.burstIntervall;\n                    }\n\n                    sceneObj.native.burstInterval = parseInt(sceneObj.native.burstInterval || 0, 10);\n                    sceneObj.native.onFalse = sceneObj.native.onFalse || {};\n                    sceneObj.native.onTrue  = sceneObj.native.onTrue  || {};\n                    sceneObj.native.onFalse.trigger = sceneObj.native.onFalse.trigger || {condition: '=='};\n                    sceneObj.native.onTrue.trigger  = sceneObj.native.onTrue.trigger  || {condition: '=='};\n                    sceneObj.native.members = sceneObj.native.members || [];\n                    const members = sceneObj.native.members;\n                    delete sceneObj.native.members;\n                    sceneObj.native.members = members; // place it on the last place\n\n                    delete sceneObj.from;\n                    delete sceneObj.user;\n                    delete sceneObj.ts;\n                    delete sceneObj.acl;\n                });\n\n                if (!newState.scenes[this.state.selectedSceneId]) {\n                    newState.selectedSceneId = Object.keys(newState.scenes).shift() || '';\n                }\n\n                if ((newState.selectedSceneId || that.state.selectedSceneId) &&\n                    newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]) {\n                    newState.selectedSceneData = JSON.parse(JSON.stringify(newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]));\n                } else {\n                    newState.selectedSceneData = null;\n                }\n\n                that.setState(newState);\n            });\n    }\n\n    addFolder(parentFolder, id) {\n        let folders = JSON.parse(JSON.stringify(this.state.folders));\n        let _parentFolder = this.findFolder(folders, parentFolder);\n\n        let opened = JSON.parse(JSON.stringify(this.state.opened));\n\n        _parentFolder.subFolders[id] = {\n            scenes: {},\n            subFolders: {},\n            id,\n            prefix: _parentFolder.prefix ? _parentFolder.prefix + '.' + id : id\n        };\n\n        opened.push(id);\n\n        this.setState({folders, opened});\n    }\n\n    addSceneToFolderPrefix = (scene, folderPrefix, noRefresh) => {\n        let oldId = scene._id;\n        let sceneId = scene._id.split('.').pop();\n        scene._id = 'scene.0.' + folderPrefix + (folderPrefix ? '.' : '') + sceneId;\n\n        return this.socket.delObject(oldId)\n            .then(() => {\n                console.log('Deleted ' + oldId);\n                return this.socket.setObject(scene._id, scene)\n            })\n            .catch(e => this.showError(e))\n            .then(() => {\n                console.log('Set new ID: ' + scene._id);\n                return !noRefresh && this.refreshData(sceneId)\n                    .then(() => this.changeSelectedScene(scene._id))\n                    .catch(e => this.showError(e));\n            });\n    };\n\n    renameFolder(folder, newName) {\n        return new Promise(resolve => this.setState({changingScene: folder}, () => resolve()))\n            .then(() => {\n                let newSelectedId;\n                let pos;\n                // if selected folder opened, replace its ID in this.state.opened\n                if ((pos = this.state.opened.indexOf(folder.prefix)) !== -1) {\n                    const opened = [...this.state.opened];\n                    opened.splice(pos, 1);\n                    opened.push(newName);\n                    opened.sort();\n                    this.setState({opened});\n                }\n\n                let prefix = folder.prefix.split('.');\n                prefix[prefix.length - 1] = newName;\n                prefix = prefix.join('.');\n\n                if (Object.keys(folder.scenes).find(id => id === this.state.selectedSceneId)) {\n                    newSelectedId = 'scene.0.' + prefix + '.' + this.state.selectedSceneId.split('.').pop();\n                }\n\n                const promises = Object.keys(folder.scenes).map(sceneId =>\n                    this.addSceneToFolderPrefix(folder.scenes[sceneId], prefix, true));\n\n                return Promise.all(promises)\n                    .then(() => this.refreshData(folder))\n                    .then(() => newSelectedId && this.setState({selectedSceneId: newSelectedId}));\n            });\n    }\n\n    renderMoveDialog() {\n        if (!this.state.moveDialog) {\n            return null;\n        }\n\n        const newFolder = this.state.newFolder === '__root__' ? '' : this.state.newFolder;\n        const sceneId = this.state.selectedSceneId.split('.').pop();\n        const newId = 'scene.0.' + newFolder + (newFolder ? '.' : '') + sceneId;\n\n        const isIdUnique = !Object.keys(this.state.scenes).find(id => id === newId);\n\n        return <Dialog\n            open={ true }\n            key=\"moveDialog\"\n            onClose={ () => this.setState({moveDialog: null}) }\n        >\n            <DialogTitle>{ I18n.t('Move to folder') }</DialogTitle>\n            <DialogContent>\n                <FormControl classes={ {root: this.props.classes.width100} }>\n                    <InputLabel shrink={ true }>{ I18n.t('Folder') }</InputLabel>\n                    <Select\n                        className={ this.props.classes.width100 }\n                        value={ this.state.newFolder || '__root__' }\n                        onChange={e => this.setState({newFolder: e.target.value}) }>\n                        { getFolderList(this.state.folders).map(folder =>\n                            <MenuItem\n                                key={ folder.prefix }\n                                value={ folder.prefix || '__root__' }\n                            >\n                                { folder.prefix ? folder.prefix.replace('.', ' > ') : I18n.t('Root') }\n                            </MenuItem>)\n                        }\n                    </Select>\n                </FormControl>\n            </DialogContent>\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                <Button variant=\"contained\" onClick={ () => this.setState({moveDialog: null}) }>\n                    { I18n.t('Cancel') }\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    disabled={ !isIdUnique }\n                    color=\"primary\" onClick={ e =>\n                        this.setState({moveDialog: null}, () =>\n                            this.addSceneToFolderPrefix(this.state.scenes[this.state.selectedSceneId], this.state.newFolder === '__root__' ? '' : this.state.newFolder))\n                    }\n                >\n                    { I18n.t('Move to folder') }\n                </Button>\n            </DialogActions>\n        </Dialog>;\n    }\n\n    /*deleteFolder(folder) {\n        if (Object.values(folder.scenes).length) {\n            return this.showError(I18n.t('Cannot delete non-empty folder'));\n        } else {\n            //delete folder;\n            this.setState(this.state);\n        }\n    }*/\n\n    renderTreeScene = (item, level) => {\n        const scene = this.state.scenes[item._id];\n        if (!scene || (this.state.search && !item.common.name.includes(this.state.search))) {\n            return null;\n        }\n\n        level = level || 0;\n\n        const changed = this.state.selectedSceneId && this.state.selectedSceneId === scene._id && this.state.selectedSceneChanged;\n\n        return <ListItem\n            style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\n            key={ item._id }\n            selected={ this.state.selectedSceneId ? this.state.selectedSceneId === scene._id : false }\n            button\n            className={ clsx(changed && this.props.classes.changed, !scene.common.enabled && this.props.classes.disabled) }\n            onClick={ () =>\n                this.changeSelectedScene(scene._id)\n                    .catch(() => console.log('ignore')) }>\n            <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} }><IconScript className={ this.props.classes.itemIcon }/></ListItemIcon>\n            <ListItemText\n                classes={ {primary: this.props.classes.listItemTitle, secondary: this.props.classes.listItemSubTitle} }\n                primary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) }\n                secondary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}, true) }\n                />\n            <ListItemSecondaryAction>\n                {this.state.changingScene === scene._id ?\n                    <CircularProgress size={ 24 }/>\n                    :\n                    <Switch\n                        checked={ scene.common.enabled }\n                        onChange={ this.sceneSwitch }\n                        name={ scene._id }\n                    />\n                }\n            </ListItemSecondaryAction>\n        </ListItem>;\n    };\n\n    toggleFolder(folder) {\n        const opened = [...this.state.opened];\n        const pos = opened.indexOf(folder.prefix);\n        if (pos === -1) {\n            opened.push(folder.prefix);\n        } else {\n            opened.splice(pos, 1);\n\n            // If active scene is inside this folder select the first scene\n            if (Object.keys(folder.scenes).includes(this.state.selectedSceneId)) {\n                // To do ask question\n                if (this.state.selectedSceneChanged) {\n                    this.confirmCb = () => {\n                        this.setState({selectedSceneId: '', selectedSceneData: null, selectedSceneChanged: false, opened});\n                        window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\n                    };\n                    return this.setState({sceneChangeDialog: 'empty'});\n                }\n\n                this.setState({selectedSceneId: '', selectedSceneData: null, selectedSceneChanged: false});\n            }\n        }\n\n        window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\n\n        this.setState({opened});\n    }\n\n    renderTree(parent, level) {\n        let result = [];\n        level = level || 0;\n        let opened = this.state.opened ? this.state.opened.includes(parent.prefix) : false;\n\n        // Show folder item\n        parent && parent.id && result.push(<ListItem\n            key={ parent.prefix }\n            classes={ {gutters: this.props.classes.noGutters} }\n            className={ clsx(this.props.classes.width100, this.props.classes.folderItem) }\n            style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\n        >\n            <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} } onClick={ () => this.toggleFolder(parent) }>{ opened ?\n                <IconFolderOpened className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/> :\n                <IconFolderClosed className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/>\n            }</ListItemIcon>\n            <ListItemText>{ parent.id }</ListItemText>\n            <ListItemSecondaryAction>\n                <IconButton onClick={ () => this.toggleFolder(parent) } title={ opened ? I18n.t('Collapse') : I18n.t('Expand')  }>\n                    { opened ? <IconExpand/> : <IconCollapse/> }\n                </IconButton>\n            </ListItemSecondaryAction>\n        </ListItem>);\n\n        if (parent && (opened || !parent.id)) { // root cannot be closed and have id === ''\n            parent.id && result.push(<ListItem key={ 'keys_' + parent.prefix }>\n                <ListItemSecondaryAction>\n                    <IconButton\n                        onClick={() => this.createScene(this.getNewSceneId(), parent.id) }\n                        title={ I18n.t('Create new scene') }\n                    ><IconAdd/></IconButton>\n                    { /* <IconButton\n                        onClick={() => this.setState({addFolderDialog: parent, addFolderDialogTitle: ''})}\n                        title={ I18n.t('Create new folder') }\n                    ><IconFolderAdd/></IconButton> */ }\n\n                    <IconButton onClick={ () => this.setState({editFolderDialog: parent, editFolderDialogTitle: parent.id, editFolderDialogTitleOrigin: parent.id}) }\n                                title={ I18n.t('Edit folder name') }\n                    ><IconEdit/></IconButton>\n                </ListItemSecondaryAction>\n            </ListItem>);\n\n            const values = Object.values(parent.scenes);\n            const subFolders = Object.values(parent.subFolders);\n\n            // add first sub-folders\n            result.push(subFolders.sort((a, b) => a.id > b.id ? 1 : (a.id < b.id ? -1 : 0)).map(subFolder =>\n                this.renderTree(subFolder, level + 1)));\n\n            // Add as second scenes\n\n            result.push(<ListItem\n                key={ 'items_' + parent.prefix }\n                classes={ {gutters: this.props.classes.noGutters} }\n                className={ this.props.classes.width100 }>\n                <List\n                    className={ this.props.classes.list }\n                    classes={ {root: this.props.classes.leftMenuItem} }\n                    style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\n                >\n                    { values.length ?\n                        values.sort((a, b) => a._id > b._id ? 1 : (a._id < b._id ? -1 : 0)).map(scene => this.renderTreeScene(scene, level))\n                        :\n                        (!subFolders.length ? <ListItem><ListItemText className={ this.props.classes.folderItem}>{ I18n.t('No scenes created yet')}</ListItemText></ListItem> : '')\n                    }\n                </List>\n            </ListItem>);\n        }\n\n        return result;\n    };\n\n    createScene(name, parentId) {\n        let template = {\n            common: {\n                name: '',\n                type: 'boolean',\n                role: 'scene.state',\n                desc: '',\n                enabled: true,\n                read: true,\n                write: true,\n                def: false,\n                engine: 'system.adapter.scenes.0'\n            },\n            native: {\n                onTrue: {\n                    trigger: {},\n                    cron: null,\n                    astro: null\n                },\n                onFalse: {\n                    enabled: false,\n                    trigger: {},\n                    cron: null,\n                    astro: null\n                },\n                members: []\n            },\n            type: 'state'\n        };\n\n        template.common.name = name;\n        let id = 'scene.0.' + (parentId ? parentId + '.' : '') + template.common.name;\n\n        this.setState({changingScene: id}, () =>\n            this.socket.setObject(id, template)\n                .then(() => this.refreshData(id))\n                .then(() => this.changeSelectedScene(id))\n                .catch(e => this.showError(e))\n        );\n    };\n\n    cloneScene(id) {\n        let scene = JSON.parse(JSON.stringify(this.state.scenes[id]));\n        scene._id = scene._id.split('.');\n        scene._id.pop();\n        scene._id.push(this.getNewSceneId());\n        scene._id = scene._id.join('.');\n        scene.common.name = scene.common.name + ' ' + I18n.t('copy');\n\n        this.setState({changingScene: scene._id}, () =>\n            this.socket.setObject(scene._id, scene)\n                .then(() => this.refreshData(scene._id))\n                .then(() => this.changeSelectedScene(scene._id))\n                .catch(e => this.showError(e))\n        );\n    };\n\n    writeScene() {\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\n        scene._id = this.state.selectedSceneId;\n\n        const folder = getFolderPrefix(scene._id);\n        const newId = 'scene.0.' + (folder ? folder + '.' : '') + scene.common.name.replace(FORBIDDEN_CHARS, '_').replace(/\\s/g, '_');\n\n        if (scene._id !== newId) {\n            // check if the scene name is unique\n            if (Object.keys(this.state.scenes).find(id => id === newId)) {\n                return this.showError(I18n.t('Name is not unique. Please change name before the save.'));\n            }\n\n            // delete first the old scene\n            return this.socket.delObject(scene._id)\n                .then(() => {\n                    scene._id = newId;\n                    return this.socket.setObject(scene._id, scene);\n                })\n                .then(() => this.refreshData(this.state.selectedSceneId))\n                .then(() => this.changeSelectedScene(newId))\n                .catch(e => this.showError(e));\n        } else {\n            return this.socket.setObject(this.state.selectedSceneId, scene)\n                .then(() => this.refreshData(this.state.selectedSceneId))\n                .catch(e => this.showError(e));\n        }\n    }\n\n    updateScene(common, native, cb) {\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\n        if (common) {\n            scene.common = JSON.parse(JSON.stringify(common));\n        }\n        if (native) {\n            const members = scene.native.members;\n            scene.native = JSON.parse(JSON.stringify(native));\n            scene.native.members = members;\n        }\n\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\n    };\n\n    deleteScene = (id) => {\n        return this.socket.delObject(id)\n            .then(() => {\n                if (this.state.selectedSceneId === id) {\n                    return this.refreshData(id)\n                        .then(() => {\n                            const ids = Object.keys(this.state.scenes);\n                            // Find next scene\n                            let nextId = ids.find(_id => _id > id) || '';\n                            if (!nextId) {\n                                // try prev scene\n                                for (let i = ids.length - 1; i >= 0; i--) {\n                                    if (ids[i] < id) {\n                                        nextId = ids[i];\n                                        break;\n                                    }\n                                }\n                            }\n                            if (!nextId && ids.length) {\n                                nextId = ids.shift();\n                            }\n\n                            return this.changeSelectedScene(nextId);\n                        });\n                } else {\n                    return this.refreshData(id);\n                }\n            })\n            .catch(e => this.showError(e));\n    };\n\n    getNewSceneId() {\n        let newId = 0;\n\n        for (const id in this.state.scenes) {\n            let shortId = id.split('.').pop();\n            let matches = shortId.match(/^scene([0-9]+)$/);\n            if (matches && parseInt(matches[1], 10) >= newId) {\n                newId = parseInt(matches[1]) + 1;\n            }\n        }\n\n        return 'scene' + newId;\n    };\n\n    updateSceneMembers(members, cb) {\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\n        scene.native.members = JSON.parse(JSON.stringify(members));\n\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\n    };\n\n    changeSelectedScene(newId, ignoreUnsaved, cb) {\n        return new Promise(resolve => {\n            if (this.state.selectedSceneId !== newId) {\n                if (this.state.selectedSceneChanged && !ignoreUnsaved) {\n                    this.confirmCb = cb;\n                    this.setState({sceneChangeDialog: newId}, () => resolve());\n                } else {\n                    window.localStorage.setItem('Scenes.selectedSceneId', newId);\n                    this.setState({\n                        selectedSceneData: this.state.scenes[newId] ? JSON.parse(JSON.stringify(this.state.scenes[newId])) : null,\n                        sceneChangeDialog: '',\n                        selectedSceneId: newId || '',\n                        selectedSceneChanged: false,\n                        menuOpened: false,\n                    }, () => {\n                        resolve();\n                        cb && cb();\n                    });\n                }\n            } else {\n                resolve();\n                cb && cb();\n            }\n        });\n    }\n\n    renderAddFolderDialog() {\n        return this.state.addFolderDialog ?\n            <Dialog\n                open={ !!this.state.addFolderDialog }\n                onClose={ () => this.setState({addFolderDialog: null}) }\n            >\n                <DialogTitle>{I18n.t('Create folder')}</DialogTitle>\n                <DialogContent className={ this.props.classes.p }>\n                    <TextField label={ I18n.t('Title') } value={ this.state.addFolderDialogTitle } onChange={ e =>\n                        this.setState({addFolderDialogTitle: e.target.value.replace(FORBIDDEN_CHARS, '_')}) }/>\n                </DialogContent>\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                    <Button variant=\"contained\" onClick={ () => this.setState({addFolderDialog: null}) }>\n                        <IconCancel className={ this.props.classes.buttonIcon }/>\n                        { I18n.t('Cancel') }\n                    </Button>\n                    <Button variant=\"contained\" disabled={!this.state.addFolderDialogTitle || Object.keys(this.state.folders.subFolders).find(name => name === this.state.addFolderDialogTitle)} onClick={() => {\n                        this.addFolder(this.state.addFolderDialog, this.state.addFolderDialogTitle);\n                        this.setState({addFolderDialog: null});\n                    }} color=\"primary\" autoFocus>\n                        <IconCheck className={ this.props.classes.buttonIcon }/>\n                        {I18n.t('Create')}\n                    </Button>\n                </DialogActions>\n            </Dialog> : null;\n    }\n\n    renderEditFolderDialog() {\n        const isUnique = !Object.keys(this.state.folders.subFolders).find(folder => folder.id === this.state.editFolderDialogTitle);\n\n        return this.state.editFolderDialog ? <Dialog open={ !!this.state.editFolderDialog } onClose={ () => this.setState({editFolderDialog: null}) }>\n            <DialogTitle>{ I18n.t('Edit folder') }</DialogTitle>\n            <DialogContent>\n                <TextField\n                    label={ I18n.t('Title') }\n                    value={ this.state.editFolderDialogTitle }\n                    onChange={ e => this.setState({editFolderDialogTitle: e.target.value.replace(FORBIDDEN_CHARS, '_')}) }/>\n            </DialogContent>\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                <Button variant=\"contained\" onClick={ () => this.setState({editFolderDialog: null}) }>\n                    <IconCancel className={ this.props.classes.buttonIcon }/>\n                    { I18n.t('Cancel') }\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    disabled={ !this.state.editFolderDialogTitle || this.state.editFolderDialogTitleOrigin === this.state.editFolderDialogTitle || !isUnique}\n                    onClick={ () => {\n                        this.renameFolder(this.state.editFolderDialog, this.state.editFolderDialogTitle)\n                            .then(() => this.setState({editFolderDialog: null}));\n                    }}\n                    color=\"primary\"\n                    autoFocus\n                >\n                    <IconCheck className={ this.props.classes.buttonIcon }/>\n                    { I18n.t('Apply') }\n                </Button>\n            </DialogActions>\n        </Dialog> : null;\n    }\n\n    renderSceneChangeDialog() {\n        const that = this;\n        return this.state.sceneChangeDialog ? <Dialog\n            open={ true }\n            key=\"sceneChangeDialog\"\n            onClose={ () => this.setState({sceneChangeDialog: ''}) }>\n                <DialogTitle>{ I18n.t('Are you sure for cancel unsaved changes?') }</DialogTitle>\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                    <Button variant=\"contained\" onClick={() => {\n                        this.confirmCb = null; // cancel callback\n                        this.setState({sceneChangeDialog: ''});\n                    }}>\n                        <IconCancel/> { I18n.t('Cancel') }\n                    </Button>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={ () =>\n                        this.changeSelectedScene(this.state.sceneChangeDialog, true, () => {\n                            const cb = this.confirmCb;\n                            this.confirmCb = null;\n                            cb && cb();\n                        })\n                            .catch(() => console.log('ignore')) }>\n                        { I18n.t('Discard') }\n                    </Button>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={e => {\n                        // save scene\n                        this.writeScene()\n                            .then(() => that.changeSelectedScene(that.state.sceneChangeDialog === 'empty' ? '' : that.state.sceneChangeDialog, true, () => {\n                                const cb = this.confirmCb;\n                                this.confirmCb = null;\n                                cb && cb();\n                            }))\n                            .catch(() => console.log('ignore'))\n                    }}>\n                        <IconSave/> { I18n.t('Save changes') }\n                    </Button>\n                </DialogActions>\n            </Dialog> : null;\n    };\n\n    renderDeleteDialog() {\n        return this.state.deleteDialog ? <Dialog\n            open={ true }\n            key=\"deleteDialog\"\n            onClose={ () => this.setState({deleteDialog: false}) }\n        >\n            <DialogTitle>{ I18n.t('Are you sure for delete this scene?') }</DialogTitle>\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: false}) }>\n                    {I18n.t('Cancel')}\n                </Button>\n                <Button variant=\"contained\" color=\"secondary\" onClick={e => {\n                    this.deleteScene(this.state.selectedSceneId);\n                    this.setState({deleteDialog: false});\n                }}>\n                    { I18n.t('Delete') }\n                </Button>\n            </DialogActions>\n        </Dialog> : null;\n    }\n\n    renderExportImportDialog() {\n        if (!this.state.exportDialog && !this.state.importDialog) {\n            return null;\n        }\n\n        return <ExportImportDialog\n            isImport={ !!this.state.importDialog }\n            themeType={ this.state.themeType }\n            onClose={ importedScene => {\n                if (this.state.importDialog && importedScene) {\n                    const scene = this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId];\n                    importedScene.common._id = scene._id;\n                    importedScene.common.name = scene.name || importedScene.common.name;\n                    this.setState({selectedSceneData: importedScene,  importDialog: false});\n                } else {\n                    this.setState({exportDialog: false, importDialog: false})\n                }\n            } }\n            sceneObj={ this.state.exportDialog ? this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId] : '' }\n        />\n    }\n\n    renderListToolbar() {\n        return <Toolbar key=\"toolbar\" variant=\"dense\" className={ this.props.classes.mainToolbar }>\n                <IconButton\n                    onClick={ () => this.createScene(this.getNewSceneId()) }\n                    title={ I18n.t('Create new scene') }\n                ><IconAdd/></IconButton>\n\n                <IconButton\n                    onClick={ () => this.setState({addFolderDialog: this.state.folders, addFolderDialogTitle: ''}) }\n                    title={ I18n.t('Create new folder') }\n                ><IconFolderAdd/></IconButton>\n\n                <span className={this.props.classes.right}>\n                                            <IconButton onClick={() => this.setState({showSearch: !this.state.showSearch}) }>\n                                                <SearchIcon/>\n                                            </IconButton>\n                                        </span>\n                {this.state.showSearch ?\n                    <TextField\n                        value={ this.state.search }\n                        className={ this.props.classes.textInput }\n                        onChange={ e => this.setState({search: e.target.value}) }/> : null\n                }\n            </Toolbar>;\n    }\n\n    renderSceneTopToolbar(showDrawer) {\n        return <Toolbar variant=\"dense\" key=\"topToolbar\" classes={ {gutters: this.props.classes.noGutters} }>\n            { this.props.width !== 'md' && this.props.width !== 'sm' && this.props.width !== 'xs' ? <Typography variant=\"h6\" className={ this.props.classes.sceneTitle }>\n                { I18n.t('Scene options') /*Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) */}\n                <span className={this.props.classes.sceneSubTitle}>{ Utils.getObjectNameFromObj(this.state.scenes[this.state.selectedSceneId], null, {language: I18n.getLanguage()}, true) }</span>\n            </Typography> : null }\n\n            { showDrawer ? <IconButton aria-label=\"Open list\" title={ I18n.t('Open list') } onClick={ () => this.setState({menuOpened: true}) }><IconMenu/></IconButton> : null }\n            <IconButton aria-label=\"Clone\" title={ I18n.t('Clone') } onClick={ () => this.cloneScene(this.state.selectedSceneId) }><IconClone/></IconButton>\n\n            <IconButton aria-label=\"Delete\" title={ I18n.t('Delete') } onClick={ () => this.setState({deleteDialog: true}) }><IconDelete/></IconButton>\n\n            <IconButton aria-label=\"Move to folder\" title={ I18n.t('Move to folder') } onClick={ () => this.setState({moveDialog: true, newFolder: getFolderPrefix(this.state.selectedSceneId)}) }><IconMoveToFolder/></IconButton>\n\n            <IconButton aria-label=\"Export\" title={ I18n.t('Export scene') } onClick={ () => this.setState({exportDialog: true}) }><IconExport/></IconButton>\n\n            {/*<IconButton aria-label=\"Import\" title={ I18n.t('Import scene') } onClick={ () => this.setState({importDialog: true}) }><IconImport/></IconButton>*/}\n        </Toolbar>;\n    }\n\n    renderSceneBottomToolbar() {\n        return <Toolbar variant=\"dense\" key=\"bottomToolbar\" classes={ {gutters: this.props.classes.noGutters} }>\n            <div style={{flexGrow: 1}}/>\n            { this.state.selectedSceneChanged ? <Button\n                className={ this.props.classes.toolbarButtons }\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => this.writeScene()}\n            >\n                { I18n.t('Save') }\n            </Button> : null }\n\n            { this.state.selectedSceneChanged ? <Button\n                className={ this.props.classes.toolbarButtons }\n                variant=\"contained\"\n                onClick={ () => this.refreshData(this.state.selectedSceneId) }\n            >\n                { I18n.t('Cancel') }\n            </Button> : null }\n        </Toolbar>;\n    }\n\n    renderDrawerContent() {\n        return [\n            this.renderListToolbar(),\n            <div key=\"list\" className={ this.props.classes.heightMinusToolbar }>\n                <List className={ this.props.classes.scroll }>\n                    { this.renderTree(this.state.folders) }\n                </List>\n            </div>\n        ];\n    }\n\n    renderSceneMembers(oneColumn) {\n        return <SceneMembersForm\n            key={ 'selected' + this.state.selectedSceneId }\n            oneColumn={ oneColumn }\n            showError={ e => this.showError(e) }\n            updateSceneMembers={ (members, cb) => this.updateSceneMembers(members, cb) }\n            selectedSceneChanged={ this.state.selectedSceneChanged }\n            sceneEnabled={ this.state.selectedSceneData.common.enabled }\n            members={ this.state.selectedSceneData.native.members }\n            socket={ this.socket }\n            onFalseEnabled={ this.state.selectedSceneData.native.onFalse.enabled }\n            virtualGroup={ this.state.selectedSceneData.native.virtualGroup }\n            sceneId={ this.state.selectedSceneId }\n            engineId={ this.state.selectedSceneData.common.engine }\n            intervalBetweenCommands={ this.state.selectedSceneData.native.burstInterval || 0 }\n        />;\n    }\n\n    renderSceneSettings(oneColumn) {\n        if (!this.state.selectedSceneData) {\n            this.state.selectedSceneData = JSON.parse(JSON.stringify(this.state.scenes[this.state.selectedSceneId]));\n        }\n\n        return <SceneForm\n            key={ this.state.selectedSceneId }\n            showError={ e => this.showError(e) }\n            oneColumn={ oneColumn }\n            updateScene={ (common, native, cb) => this.updateScene(common, native, cb) }\n            scene={ this.state.selectedSceneData }\n            socket={ this.socket }\n            instances={ this.state.instances }\n        />;\n    }\n\n    renderInOneColumn() {\n        return [\n            <Drawer\n                key=\"drawer\"\n                anchor=\"left\"\n                open={ this.state.menuOpened }\n                onClose={() => this.setState({menuOpened: false}) }\n                classes={ {paper: this.props.classes.drawer }}\n            >\n                { this.renderDrawerContent() }\n            </Drawer>,\n            this.renderSceneTopToolbar(true),\n            this.state.selectedSceneId ? <div\n                    key=\"main\"\n                    className={ this.props.classes.heightMinus2Toolbars }\n                    style={{ overflowY: 'auto', overflowX: 'hidden'}}\n                >\n                    { this.renderSceneSettings(true) }\n                    { this.renderSceneMembers(true) }\n                </div> : null,\n            this.renderSceneBottomToolbar(),\n        ]\n    }\n\n    renderInMoreThanOneColumn() {\n        const showDrawer = this.props.width === 'sm' || this.props.width === 'xs';\n\n        return <Container className={ clsx(this.props.classes.height, this.props.classes.fullWidthContainer) }>\n            <Grid container spacing={ 1 } className={ this.props.classes.height }>\n                { showDrawer ?\n                    <Drawer anchor=\"left\" open={ this.state.menuOpened } onClose={() => this.setState({menuOpened: false}) }>\n                        { this.renderDrawerContent() }\n                    </Drawer> :\n                    <Grid item xs={ 3 } className={ clsx(this.props.classes.columnContainer, this.props.classes.height) }>\n                        { this.renderDrawerContent() }\n                    </Grid>\n                }\n                { this.state.selectedSceneId && this.state.scenes[this.state.selectedSceneId] ?\n                    <Grid item xs={ showDrawer ? 12 : 9 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\n                        <Grid container spacing={ 1 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\n                            <Grid item xs={ this.props.width === 'xs' ? 12 : 5 } className={ this.props.classes.heightMinus2Toolbars }>\n                                { this.renderSceneTopToolbar(showDrawer) }\n                                <div className={this.props.classes.height}>\n                                    {this.state.selectedSceneId ? this.renderSceneSettings() : null}\n                                </div>\n                                { this.renderSceneBottomToolbar() }\n                            </Grid>\n                            <Grid item xs={ this.props.width === 'xs' ? 12 : 7 } className={ clsx(this.props.classes.height) }>\n                                <div className={ clsx(this.props.classes.heightMinusMargin) }>\n                                    { this.state.selectedSceneId ?\n                                        <div className={ clsx(this.props.classes.membersCell, this.props.classes.height) }>\n                                            { this.renderSceneMembers() }\n                                        </div>\n                                        : null}\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    : null\n                }\n            </Grid>\n        </Container>\n    }\n\n    render() {\n        if (!this.state.ready) {\n            return <MuiThemeProvider theme={ this.state.theme }>\n                <Loader theme={ this.state.themeName }/>\n            </MuiThemeProvider>;\n        }\n\n        const oneColumn = this.props.width === 'xs';\n\n        return (\n            <MuiThemeProvider theme={ this.state.theme }>\n                <div className={ this.props.classes.root }>\n                    { oneColumn ?\n                        this.renderInOneColumn() :\n                        this.renderInMoreThanOneColumn()\n                    }\n\n                    { this.renderSceneChangeDialog() }\n                    { this.renderEditFolderDialog() }\n                    { this.renderMoveDialog() }\n                    { this.renderDeleteDialog() }\n                    { this.renderAddFolderDialog() }\n                    { this.renderExportImportDialog() }\n                    { this.renderError() }\n                </div>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default withWidth()(withStyles(styles)(withTheme(App)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Sentry from '@sentry/browser';\nimport * as SentryIntegrations from '@sentry/integrations';\nimport { MuiThemeProvider} from '@material-ui/core/styles';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\nimport { version } from '../package.json';\n\nimport theme from '@iobroker/adapter-react/Theme';\nimport Utils from '@iobroker/adapter-react/Components/Utils';\n\nwindow.adapterName = 'scenes';\n\nconsole.log('iobroker.' + window.adapterName + '@' + version);\nlet themeName = Utils.getThemeName();\n\nfunction build() {\n    return ReactDOM.render(<MuiThemeProvider theme={ theme(themeName) }>\n        <App onThemeChange={_theme => {\n            themeName = _theme;\n            build();\n        }}/>\n    </MuiThemeProvider>, document.getElementById('root'));\n}\n\n// if not local development\nif (window.location.host !== 'localhost:3000') {\n    Sentry.init({\n        dsn: 'https://89fc6260a1af4df68f9db767a603b7e5@sentry.iobroker.net/86',\n        release: 'iobroker.' + window.adapterName + '@' + version,\n        integrations: [\n            new SentryIntegrations.Dedupe()\n        ]\n    });\n}\n\nbuild();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n// Service worker works only with HTTPS and valid certificates, so do not enable it\nserviceWorker.unregister();\n\n"],"sourceRoot":""}