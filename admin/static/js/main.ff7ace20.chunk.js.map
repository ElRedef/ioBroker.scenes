{"version":3,"sources":["serviceWorker.js","components/SceneForm.js","components/SceneMembersForm.js","components/ExportImportDialog.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","SceneForm","props","setStateWithParent","newState","cb","setState","updateScene","common","native","sceneObj","scene","JSON","parse","stringify","members","state","showDialog","sceneId","_id","this","key","socket","dialogName","title","I18n","t","selected","onOk","onClose","name","on","className","classes","editItem","onTrue","onFalse","enabled","right","Switch","checked","trigger","id","onChange","e","target","condition","Grid","container","spacing","item","xs","TextField","fullWidth","InputLabelProps","shrink","label","value","onClick","FormControl","InputLabel","Select","MenuItem","cron","console","log","width","Box","clsx","columnContainer","oneColumn","height","scroll","desc","sm","width100","engine","instances","map","replace","min","burstInterval","helperText","type","parseInt","FormControlLabel","style","paddingTop","control","Checkbox","virtualGroup","renderOnTrueFalse","renderSelectIdDialog","React","Component","withStyles","theme","alignRight","textAlign","buttonsContainer","margin","display","flexDirection","float","overflowY","overflowX","paddingRight","marginBottom","color","palette","p","background","SceneMembersForm","memberStateChange","states","val","objectTypes","undefined","parseFloat","createSceneMembers","ids","filter","find","length","openedMembers","objectNames","Promise","all","getObject","then","obj","template","setIfTrue","setIfFalse","stopAllDelays","disabled","delay","Utils","getObjectNameFromObj","language","getLanguage","onFalseEnabled","push","forEach","subscribeState","catch","showError","deleteSceneMember","i","splice","deleteDialog","unsubscribeState","renderMember","member","index","_valStr","toString","setIfTrueTolerance","Math","abs","memberTrueFalse","memberTrue","setIfFalseTolerance","memberFalse","memberUncertain","opened","includes","countEnabled","u","Paper","memberCard","memberToolbar","memberTitle","memberDesc","memberButtons","IconButton","pos","indexOf","sort","localStorage","setItem","size","marginLeft","aria-label","intervalBetweenCommands","setValue","doNotOverwrite","smallOnTrueFalse","stateValueTrue","stateValueFalse","getItemStyle","isDragging","draggableStyle","userSelect","getListStyle","isDraggingOver","render","sceneState","selectedSceneChanged","engineId","Toolbar","gutters","guttersZero","Typography","variant","sceneTitle","instanceNotActive","sceneSubTitle","sceneTrue","sceneFalse","sceneUncertain","testButtons","width100WithButton","defaultValue","onKeyUp","keyCode","onWriteScene","writeSceneState","sceneEnabled","Button","btnTestTrue","btnTestFalse","onDragEnd","droppableId","provided","snapshot","droppableProps","ref","innerRef","draggableId","draggableProps","dragHandleProps","placeholder","renderDeleteDialog","getItem","bind","readObjects","result","destination","source","removed","results","resolve","that","updateSceneMembers","multiSelect","Dialog","open","DialogTitle","DialogActions","changed","borderRadius","padding","fontSize","fontWeight","whiteSpace","maxWidth","overflow","textOverflow","backgroundColor","flexGrow","marginRight","position","content","top","fontStyle","minHeight","minWidth","opacity","ExportImportDialog","text","error","toast","Snackbar","autoHideDuration","Alert","severity","aria-labelledby","fullScreen","aria-describedby","isImport","DialogContent","divWithoutTitle","autoFocus","mode","onLoad","editor","codeEditor","focus","themeType","newValue","readOnly","editorProps","$blockScrolling","copy","setTimeout","renderToast","border","getFolderPrefix","split","shift","pop","join","FORBIDDEN_CHARS","App","sceneSwitch","event","scenes","selectedSceneId","selectedSceneData","setObject","refreshData","addSceneToFolderPrefix","folderPrefix","noRefresh","oldId","delObject","changeSelectedScene","renderTreeScene","level","search","ListItem","paddingLeft","button","ListItemIcon","root","itemIconRoot","itemIcon","ListItemText","primary","listItemTitle","secondary","listItemSubTitle","ListItemSecondaryAction","changingScene","CircularProgress","deleteScene","Object","keys","nextId","translations","require","setTranslations","setLanguage","navigator","userLanguage","substring","toLowerCase","query","parts","decodeURIComponent","getUrlQuery","port","host","iobForceHost","lang","systemLang","ready","folders","addFolderDialog","addFolderDialogTitle","editFolderDialog","editFolderDialogTitle","showSearch","moveDialog","newFolder","exportDialog","importDialog","menuOpened","getSystemConfig","systemConfig","getAdapterInstances","adapterName","values","subFolders","prefix","currentFolder","parent","folder","findFolder","getObjectView","_scenes","buildTree","getData","burstIntervall","from","user","ts","acl","parentFolder","_parentFolder","newName","newSelectedId","promises","newId","isIdUnique","getFolderList","subFolder","concat","confirmCb","sceneChangeDialog","noGutters","folderItem","toggleFolder","itemIconFolder","createScene","getNewSceneId","editFolderDialogTitleOrigin","a","b","renderTree","List","list","leftMenuItem","parentId","role","read","write","def","astro","matches","ignoreUnsaved","buttonIcon","addFolder","isUnique","renameFolder","writeScene","importedScene","mainToolbar","textInput","showDrawer","cloneScene","toolbarButtons","renderListToolbar","heightMinusToolbar","Drawer","anchor","paper","drawer","renderDrawerContent","renderSceneTopToolbar","heightMinus2Toolbars","renderSceneSettings","renderSceneMembers","renderSceneBottomToolbar","Container","fullWidthContainer","settingsBackground","heightMinusMargin","membersCell","themeName","renderInOneColumn","renderInMoreThanOneColumn","renderSceneChangeDialog","renderEditFolderDialog","renderMoveDialog","renderAddFolderDialog","renderExportImportDialog","renderError","GenericApp","withWidth","main","tabContent","cursor","paddingBottom","buttonsContainer1","marginTop","noHeight","withTheme","version","getThemeName","Sentry","dsn","release","integrations","SentryIntegrations","build","ReactDOM","onThemeChange","_theme","document","getElementById","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.ff7ace20.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nconst styles = theme => ({\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    width100: {\r\n        width: '100%'\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    editItem: {\r\n        display: 'block',\r\n        marginBottom: theme.spacing(2),\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    onTrue: {\r\n        background: 'lightgreen',\r\n    },\r\n    onFalse: {\r\n        background: '#ff9999',\r\n    },\r\n});\r\n\r\nclass SceneForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        this.state = {\r\n            common: sceneObj.common,\r\n            native: sceneObj.native,\r\n            showDialog: null,\r\n            sceneId: props.scene._id,\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        if (JSON.stringify(sceneObj.common) !== JSON.stringify(state.common) || JSON.stringify(sceneObj.native) !== JSON.stringify(state.native)) {\r\n            return {\r\n                common: sceneObj.common,\r\n                native: sceneObj.native,\r\n            }\r\n        }\r\n    }\r\n\r\n    setStateWithParent = (newState, cb) => {\r\n        this.setState(newState, () =>\r\n            this.props.updateScene(newState.common, newState.native, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n                key=\"selectDialog\"\r\n                socket={ this.props.socket }\r\n                dialogName=\"memberEdit\"\r\n                title={ I18n.t('Select for ') }\r\n                selected={ null }\r\n                onOk={ this.state.showDialog }\r\n                onClose={ () => this.setState({showDialog: false}) }\r\n            /> : null;\r\n    };\r\n\r\n    renderOnTrueFalse(name) {\r\n        const on = this.state.native[name];\r\n\r\n        return [\r\n            <div key=\"switch\" className={ this.props.classes.editItem }>\r\n                <h4>{ on === this.state.native.onTrue ? (this.state.native.onFalse.enabled ? I18n.t('Trigger for TRUE') : I18n.t('Trigger')) : I18n.t('Trigger for FALSE') }\r\n                    <span className={ this.props.classes.right }>\r\n                        <Switch checked={ !!on.trigger.id }\r\n                                onChange={ e => {\r\n                                    if (e.target.checked) {\r\n                                        this.setState({\r\n                                            showDialog: id => {\r\n                                                const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                native[name].trigger.id = id;\r\n                                                native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                                this.setStateWithParent({native});\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                        native[name].trigger.id = '';\r\n                                        this.setStateWithParent({native});\r\n                                    }\r\n                                } }\r\n                        />\r\n                    </span>\r\n                </h4>\r\n            </div>,\r\n            <div key=\"id\" className={ this.props.classes.editItem }>\r\n                {on.trigger.id ?\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={8}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Trigger ID') }\r\n                                value={ on.trigger.id }\r\n                                onClick={ () => {\r\n                                    this.setState({\r\n                                        showDialog: id => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.id = id;\r\n                                            native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                            this.setStateWithParent({native});\r\n                                        }\r\n                                    });\r\n                                } }\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2}>\r\n                            <FormControl>\r\n                                <InputLabel shrink={ true }>{ I18n.t('Condition') }</InputLabel>\r\n                                <Select value={ on.trigger.condition || '==' }\r\n                                        onChange={ e => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.condition = e.target.value;\r\n                                            this.setStateWithParent({native});\r\n                                        } }\r\n                                >\r\n                                    <MenuItem value=\"==\">==</MenuItem>\r\n                                    <MenuItem value=\"!=\">!=</MenuItem>\r\n                                    <MenuItem value=\">\">&gt;</MenuItem>\r\n                                    <MenuItem value=\"<\">&lt;</MenuItem>\r\n                                    <MenuItem value=\">=\">&gt;=</MenuItem>\r\n                                    <MenuItem value=\"<=\">&lt;=</MenuItem>\r\n                                    <MenuItem value=\"update\">{ I18n.t('on update') }</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps= {{shrink: true} } label={ I18n.t('Value') }\r\n                                value={ on.trigger.value || '' }\r\n                                onChange={ e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native[name].trigger.value = e.target.value;\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    : null}\r\n            </div>,\r\n            <div key=\"cron\" className={ this.props.classes.editItem }>\r\n                <TextField\r\n                    fullWidth\r\n                    InputLabelProps={{shrink: true}}\r\n                    label={ name === 'onTrue' ? I18n.t('On time (CRON expression)') : I18n.t('Off time (CRON expression)')}\r\n                    value={ on.cron || '' }\r\n                    onChange={e => {\r\n                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                        native[name].cron = e.target.value;\r\n                        this.setStateWithParent({native});\r\n                    }}\r\n                />\r\n            </div>\r\n        ];\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.width);\r\n        let result = <Box key=\"sceneForm\" className={ clsx(this.props.classes.columnContainer, !this.props.oneColumn && this.props.classes.height) }>\r\n            <Box className={ this.props.classes.scroll }>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene name') }\r\n                        value={ this.state.common.name }\r\n                        onChange={ e => {\r\n                           const common = JSON.parse(JSON.stringify(this.state.common));\r\n                           common.name = e.target.value;\r\n                           this.setStateWithParent({common});\r\n                       } }/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene description') }\r\n                        value={ this.state.common.desc }\r\n                        onChange={ e => {\r\n                               const common = JSON.parse(JSON.stringify(this.state.common));\r\n                               common.desc = e.target.value;\r\n                               this.setStateWithParent({common});\r\n                           }\r\n                        }/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={ 1 }>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControl className={this.props.classes.width100}>\r\n                                <InputLabel shrink={true}>{ I18n.t('Instance') }</InputLabel>\r\n                                <Select\r\n                                    value={ this.state.common.engine }\r\n                                    onChange={e => {\r\n                                        const common = JSON.parse(JSON.stringify(this.state.common));\r\n                                        common.engine = e.target.value;\r\n                                        this.setStateWithParent({common});\r\n                                    }}\r\n                                >\r\n                                    { this.props.instances.map(id => <MenuItem key={ id } value={ id }>{ id.replace('system.adapter.', '') }</MenuItem>) }\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Interval between commands') }\r\n                                min={ 0 }\r\n                                value={ this.state.native.burstInterval || 0 }\r\n                                helperText=\"ms\"\r\n                                type=\"number\"\r\n                                onChange={e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native.burstInterval = parseInt(e.target.value, 10);\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControlLabel\r\n                                style={{paddingTop: 10}}\r\n                                title={ I18n.t('virtual_group_tooltip') }\r\n                                label={ I18n.t('Virtual group') } control={\r\n                                <Checkbox checked={this.state.native.virtualGroup}\r\n                                          onChange={e => {\r\n                                              const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                              native.virtualGroup = e.target.checked;\r\n                                              this.setStateWithParent({native});\r\n                                          }}/>\r\n                            }/>\r\n                        </Grid>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            { !this.state.native.virtualGroup ?\r\n                                <FormControlLabel\r\n                                    style={{paddingTop: 10}}\r\n                                    label={I18n.t('Set value if false')}\r\n                                    control={\r\n                                          <Checkbox\r\n                                              checked={ this.state.native.onFalse.enabled }\r\n                                                    onChange={e => {\r\n                                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                        native.onFalse.enabled = e.target.checked;\r\n                                                        this.setStateWithParent({native});\r\n                                                    }}/>}\r\n                                />\r\n                                : null}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                { !this.state.native.virtualGroup ? this.renderOnTrueFalse('onTrue') : null }\r\n                { !this.state.native.virtualGroup && this.state.native.onFalse.enabled ? this.renderOnTrueFalse('onFalse') : null }\r\n            </Box>\r\n        </Box>;\r\n\r\n        return [\r\n            result,\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateScene: PropTypes.func.isRequired,\r\n    instances: PropTypes.array,\r\n    oneColumn: PropTypes.bool,\r\n    showError: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(SceneForm);","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\n// own components\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\n// icons\r\nimport {AiOutlineClockCircle as IconClock} from 'react-icons/ai';\r\nimport {MdDelete as IconDelete} from 'react-icons/md';\r\nimport {MdModeEdit as IconEdit} from 'react-icons/md';\r\nimport {IoMdClose as IconClose} from 'react-icons/io';\r\nimport {MdAdd as IconAdd} from 'react-icons/md';\r\nimport {MdPlayArrow as IconPlay} from 'react-icons/md';\r\n\r\nconst TRUE_COLOR       = '#90ee90';\r\nconst FALSE_COLOR      = '#ff9999';\r\nconst TRUE_DARK_COLOR  = '#528952';\r\nconst FALSE_DARK_COLOR = '#774747';\r\nconst UNCERTAIN_COLOR  = '#bfb7be';\r\n\r\nconst styles = theme => ({\r\n    memberTrueFalse: {\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n        fontSize: 'initial',\r\n        fontWeight: 'initial',\r\n        margin: '0 ' + theme.spacing(1) + 'px',\r\n        textAlign: 'right',\r\n        whiteSpace: 'nowrap',\r\n        maxWidth: 300,\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    memberTrue: {\r\n        backgroundColor: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    memberFalse: {\r\n        backgroundColor: 'pink',\r\n    },\r\n    memberUncertain: {\r\n        color: '#FFF',\r\n        backgroundColor: '#808080',\r\n    },\r\n    memberCard: {\r\n        padding: 4,\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    guttersZero: {\r\n        padding: 0,\r\n    },\r\n    sceneTitle: {\r\n        flexGrow: 1,\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    sceneSubTitle: {\r\n        fontSize: 'small',\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n    },\r\n    sceneTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    sceneFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n    },\r\n    sceneUncertain: {\r\n        background: UNCERTAIN_COLOR,\r\n    },\r\n    btnTestTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n        marginRight: theme.spacing(1),\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    btnTestFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    smallOnTrueFalse: {\r\n        fontSize: 'small',\r\n        textAlign: 'right',\r\n        width: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    stateValueTrue: {\r\n        color: '#60a060',\r\n        fontWeight: 'bold',\r\n    },\r\n    stateValueFalse: {\r\n        color: '#c15454',\r\n        fontWeight: 'bold',\r\n    },\r\n    changed: {\r\n        position: 'relative',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            width: 6,\r\n            height: 6,\r\n            borderRadius: 6,\r\n            background: '#FF0000',\r\n            position: 'absolute',\r\n            top: 5,\r\n            right: 5,\r\n        },\r\n    },\r\n    memberDesc: {\r\n        display: 'inline-block',\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n    },\r\n    memberTitle: {\r\n        fontSize: 14,\r\n        fontWeight: 'bold',\r\n    },\r\n    memberToolbar: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        minHeight: 72,\r\n    },\r\n    memberButtons: {\r\n        textAlign: 'right',\r\n        position: 'absolute',\r\n        top: 2,\r\n        right: 2,\r\n    },\r\n    width100WithButton: {\r\n        width: 'calc(100% - 48px)',\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n    testButtons: {\r\n        minHeight: 48,\r\n    },\r\n    setValue: {\r\n        width: 'calc(50% - ' + theme.spacing(1) + 'px)',\r\n        minWidth: 100,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    disabled: {\r\n        opacity: 0.3\r\n    },\r\n    instanceNotActive: {\r\n        marginLeft: theme.spacing(1),\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n        color: '#FF0000',\r\n    }\r\n});\r\n\r\nclass SceneMembersForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let openedMembers = window.localStorage.getItem('Scenes.openedMembers') || '[]';\r\n        try {\r\n            openedMembers = JSON.parse(openedMembers);\r\n        } catch (e) {\r\n            openedMembers = [];\r\n        }\r\n\r\n        this.state = {\r\n            states: {},\r\n            openedMembers,\r\n            objectTypes: {},\r\n            objectNames: {},\r\n            members: JSON.parse(JSON.stringify(props.members)),\r\n            writeSceneState: '',\r\n            deleteDialog: null,\r\n            onFalseEnabled: props.onFalseEnabled,\r\n            virtualGroup: props.virtualGroup,\r\n            sceneEnabled: props.sceneEnabled,\r\n            selectedSceneChanged: props.selectedSceneChanged,\r\n            engineId: props.engineId,\r\n        };\r\n\r\n        this.engineId = this.state.engineId;\r\n\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.readObjects()\r\n            .then(newState =>\r\n                this.setState(newState, () => {\r\n                    // subscribe on scene state\r\n                    this.props.socket.subscribeState(this.props.sceneId, this.memberStateChange);\r\n                    this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n                    // subscribe on all states\r\n                    this.state.members.forEach(member =>\r\n                        member.id && this.props.socket.subscribeState(member.id, this.memberStateChange))\r\n                }));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.unsubscribeState(this.props.sceneId, this.memberStateChange);\r\n        this.state.engineId && this.props.socket.unsubscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n        this.state.members.forEach(member =>\r\n            this.props.socket.unsubscribeState(member.id, this.memberStateChange));\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const newState = {};\r\n        let changed = false;\r\n\r\n        if (props.onFalseEnabled !== state.onFalseEnabled) {\r\n            newState.onFalseEnabled = props.onFalseEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.virtualGroup !== state.virtualGroup) {\r\n            newState.virtualGroup = props.virtualGroup;\r\n            changed = true;\r\n        }\r\n        if (props.selectedSceneChanged !== state.selectedSceneChanged) {\r\n            newState.selectedSceneChanged = props.selectedSceneChanged;\r\n            changed = true;\r\n        }\r\n        if (props.sceneEnabled !== state.sceneEnabled) {\r\n            newState.sceneEnabled = props.sceneEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.engineId !== state.engineId) {\r\n            newState.engineId = props.engineId;\r\n            changed = true;\r\n        }\r\n\r\n        return changed ? newState : null;\r\n    }\r\n\r\n    onDragEnd(result) {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n        const members = JSON.parse(JSON.stringify(this.state.members));\r\n        const [removed] = members.splice(result.source.index, 1);\r\n        members.splice(result.destination.index, 0, removed);\r\n\r\n        this.setStateWithParent({members});\r\n    }\r\n\r\n    readObjects() {\r\n        if (this.state.members) {\r\n            return Promise.all(\r\n                this.state.members.map(member =>\r\n                    this.props.socket.getObject(member.id)))\r\n                .then(results => {\r\n                    const objectTypes = {};\r\n                    const objectNames = {};\r\n                    results.forEach(obj => {\r\n                        if (obj && obj.common && obj.common.type) {\r\n                            objectTypes[obj._id] = obj.common.type;\r\n                            objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, false);\r\n                        }\r\n                    });\r\n\r\n                    return {objectTypes, objectNames};\r\n                })\r\n                .catch(e => this.props.showError(e));\r\n        } else {\r\n            return Promise.resolve({});\r\n        }\r\n    }\r\n\r\n    memberStateChange = (id, state) => {\r\n        const states = JSON.parse(JSON.stringify(this.state.states));\r\n        states[id] = state ? state.val : null;\r\n        const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n\r\n        if (!objectTypes[id] && states[id] !== null && states[id] !== undefined) {\r\n            objectTypes[id] = typeof states[id];\r\n        }\r\n\r\n        if (objectTypes[id] === 'boolean') {\r\n            if (states[id] === 'true') {\r\n                states[id] = true;\r\n            }\r\n            if (states[id] === 'false') {\r\n                states[id] = false;\r\n            }\r\n        } else if (objectTypes[id] === 'number') {\r\n            states[id] = parseFloat(states[id]);\r\n        }\r\n\r\n        this.setState({states, objectTypes});\r\n    };\r\n\r\n    createSceneMembers = ids => {\r\n        this.setState({showDialog: false}, () => {\r\n            // filter out yet existing IDs\r\n            ids = ids.filter(id => !this.state.members.find(item => item.id === id));\r\n            if (ids.length) {\r\n                const openedMembers = [...this.state.openedMembers];\r\n                const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n                const objectNames = JSON.parse(JSON.stringify(this.state.objectNames));\r\n                const members     = JSON.parse(JSON.stringify(this.state.members));\r\n\r\n                Promise.all(ids.map(id =>\r\n                    // Read type of state\r\n                    this.props.socket.getObject(id)\r\n                        .then(obj => {\r\n                            if (!obj) {\r\n                                return;\r\n                            }\r\n\r\n                            const template = {\r\n                                id,\r\n                                setIfTrue: null,\r\n                                setIfFalse: null,\r\n                                stopAllDelays: true,\r\n                                desc: null,\r\n                                disabled: false,\r\n                                delay: 0\r\n                            };\r\n\r\n                            if (obj) {\r\n                                objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, true);\r\n                            }\r\n\r\n\r\n                            if (obj && obj.common && obj.common.type) {\r\n                                objectTypes[id] = obj.common.type;\r\n\r\n                                if (objectTypes[id] === 'boolean') {\r\n                                    template.setIfTrue = true;\r\n                                    if (this.state.onFalseEnabled) {\r\n                                        template.setIfFalse = false;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            members.push(template);\r\n\r\n                            // open added state\r\n                            openedMembers.push(id);\r\n                        })\r\n                        .then(() => this.setStateWithParent({objectTypes, objectNames, members, openedMembers}, () =>\r\n                            // Subscribe on all new members\r\n                            ids.forEach(id => this.props.socket.subscribeState(id, this.memberStateChange)))\r\n                        )\r\n                    )\r\n                )\r\n                    .catch(e => this.props.showError(e));\r\n            } else {\r\n                // Show alert\r\n                this.props.showError(I18n.t('Unknown error!'));\r\n            }\r\n        });\r\n    };\r\n\r\n    deleteSceneMember = id => {\r\n        let members = JSON.parse(JSON.stringify(this.state.members));\r\n\r\n        for (let i = 0; i < members.length; i++) {\r\n            if (members[i].id === id) {\r\n                members.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        this.setStateWithParent({members, deleteDialog: null}, () =>\r\n            this.props.socket.unsubscribeState(id, this.memberStateChange));\r\n    };\r\n\r\n    setStateWithParent(newState, cb) {\r\n        const that = this;\r\n        this.setState(newState, () =>\r\n            this.props.updateSceneMembers(that.state.members, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n            key=\"selectDialogMembers\"\r\n            socket={ this.props.socket }\r\n            dialogName=\"memberEdit\"\r\n            multiSelect={ true }\r\n            title={ I18n.t('Select for ') }\r\n            selected={ null }\r\n            onOk={ id => this.createSceneMembers(id) }\r\n            onClose={ () => this.setState({showDialog: false}) }\r\n        /> : null;\r\n    }\r\n\r\n    renderDeleteDialog() {\r\n        if (this.state.deleteDialog === null) {\r\n            return;\r\n        }\r\n\r\n        return <Dialog\r\n            open={ true }\r\n            key=\"deleteDialog\"\r\n            onClose={ () =>\r\n                this.setState({deleteDialog: null}) }\r\n            >\r\n                <DialogTitle>{ I18n.t('Are you sure for delete this state?') }</DialogTitle>\r\n\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: null}) }>\r\n                        {I18n.t('Cancel')}\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={ e => this.deleteSceneMember(this.state.deleteDialog) }>\r\n                        { I18n.t('Delete') }\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>;\r\n    };\r\n\r\n    renderMember = (member, index) => {\r\n        let value = null;\r\n        const classes = this.props.classes;\r\n        if (this.state.states[member.id] !== undefined && this.state.states[member.id] !== null) {\r\n            let _valStr = this.state.states[member.id].toString();\r\n\r\n            if (_valStr === 'true') {\r\n                _valStr = 'TRUE';\r\n            } else if (_valStr === 'false') {\r\n                _valStr = 'FALSE';\r\n            }\r\n\r\n            if (member.setIfTrueTolerance && Math.abs(this.state.states[member.id] - member.setIfTrue) <= member.setIfTrueTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (this.state.states[member.id] === member.setIfTrue) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && member.setIfFalseTolerance && Math.abs(this.state.states[member.id] - member.setIfFalse) <= member.setIfFalseTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && this.state.states[member.id] === member.setIfFalse) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberUncertain) }>{ _valStr }</div>;\r\n            }\r\n        }\r\n\r\n        let setIfTrue = member.setIfTrue;\r\n        if (setIfTrue === undefined || setIfTrue === null) {\r\n            setIfTrue = '';\r\n        } else {\r\n            if (setIfTrue === true) {\r\n                setIfTrue = 'TRUE';\r\n            } else if (setIfTrue === false) {\r\n                setIfTrue = 'FALSE';\r\n            } else {\r\n                if (member.setIfTrueTolerance) {\r\n                    setIfTrue = setIfTrue + '±' + member.setIfTrueTolerance;\r\n                } else {\r\n                    setIfTrue = setIfTrue.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        let setIfFalse = member.setIfFalse;\r\n        if (setIfFalse === undefined || setIfFalse === null) {\r\n            setIfFalse = '';\r\n        } else {\r\n            if (setIfFalse === true) {\r\n                setIfFalse = 'TRUE';\r\n            } else if (setIfFalse === false) {\r\n                setIfFalse = 'FALSE';\r\n            } else {\r\n                if (member.setIfFalseTolerance) {\r\n                    setIfFalse = setIfFalse + '±' + member.setIfFalseTolerance;\r\n                } else {\r\n                    setIfFalse = setIfFalse.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        const opened = this.state.openedMembers.includes(member.id);\r\n        const onFalseEnabled = !this.state.virtualGroup && this.state.onFalseEnabled;\r\n\r\n        // calculate enabled states\r\n        let countEnabled = 0;\r\n        for (let u = 0; u < index; u++) {\r\n            if (!this.state.members[u].disabled) {\r\n                countEnabled++;\r\n            }\r\n        }\r\n\r\n        return <Paper key={ member.id } className={ clsx(classes.memberCard, member.disabled && classes.disabled) }>\r\n            <div className={ classes.memberToolbar }>\r\n                <div className={ classes.memberTitle }>{ member.id }</div>\r\n                <div className={ classes.memberDesc }>{ member.desc || this.state.objectNames[member.id] || '' }</div>\r\n                <div className={ classes.memberButtons }>\r\n                    <IconButton title={ I18n.t('Edit') } onClick={ () => {\r\n                        const openedMembers = [...this.state.openedMembers];\r\n                        const pos = openedMembers.indexOf(member.id);\r\n                        if (pos !== -1) {\r\n                            openedMembers.splice(pos, 1);\r\n                        } else {\r\n                            openedMembers.push(member.id);\r\n                            openedMembers.sort();\r\n                        }\r\n                        window.localStorage.setItem('Scenes.openedMembers', JSON.stringify(openedMembers));\r\n                        this.setState({openedMembers});\r\n                    }}>\r\n                        { opened ? <IconClose/> : <IconEdit/> }\r\n                    </IconButton>\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 5 }} aria-label=\"Delete\" title={I18n.t('Delete')}\r\n                        onClick={ () => this.setState({deleteDialog: member.id}) }>\r\n                        <IconDelete/>\r\n                    </IconButton>\r\n                    <Switch\r\n                        checked={ !member.disabled }\r\n                        onChange={ e => {\r\n                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                            members[index].disabled = !e.target.checked;\r\n                            this.setStateWithParent({members});\r\n                        }}\r\n                        name={ member.id }\r\n                    />\r\n                    { value }\r\n                </div>\r\n            </div>\r\n            <div>{ member.desc } { !opened && !member.disabled && (this.props.intervalBetweenCommands || member.delay) ?\r\n                <span> <IconClock/> { this.props.intervalBetweenCommands * countEnabled + (member.delay || 0) + I18n.t('ms') + ' ' + I18n.t('from scene start')}</span> : null }</div>\r\n            {\r\n                opened ?\r\n                    <div>\r\n                        {/*<Box className={classes.p}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}} label={I18n.t('Description')}\r\n                                value={member.desc || ''}\r\n                                onChange={e => {\r\n                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                    members[index].desc = e.target.value;\r\n                                    this.setStateWithParent({members});\r\n                                }}\r\n                            />\r\n                        </Box>*/ }\r\n                        { !this.state.virtualGroup ? <Box className={ classes.p }>\r\n                            { this.state.objectTypes[member.id] === 'boolean' ?\r\n                                <FormControl className={ classes.setValue }>\r\n                                    <InputLabel>{ onFalseEnabled ? I18n.t('Setpoint by TRUE') : I18n.t('Setpoint') }</InputLabel>\r\n                                    <Select\r\n                                        value={ member.setIfTrue === true || member.setIfTrue === 'true' ? 'true' : 'false'}\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].setIfTrue = e.target.value === 'true';\r\n                                            this.setStateWithParent({members});\r\n                                        } }\r\n                                    >\r\n                                        <MenuItem value=\"false\">FALSE</MenuItem>\r\n                                        <MenuItem value=\"true\">TRUE</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                                :\r\n                                <Box className={ classes.p }>\r\n                                    <TextField\r\n                                        InputLabelProps={ {shrink: true} }\r\n                                        label={ onFalseEnabled ? I18n.t('Setpoint by TRUE') : I18n.t('Setpoint') }\r\n                                        value={ member.setIfTrue === undefined || member.setIfTrue === null ? '' : member.setIfTrue }\r\n                                        className={ classes.setValue }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            if (this.state.objectTypes[member.id] === 'number') {\r\n                                                members[index].setIfTrue = parseFloat(e.target.value.replace(',', '.'));\r\n                                            } else {\r\n                                                members[index].setIfTrue = e.target.value;\r\n                                            }\r\n\r\n                                            this.setStateWithParent({members});\r\n                                         } }/>\r\n                                    <TextField\r\n                                        InputLabelProps={ {shrink: true} }\r\n                                        label={ '± ' + (onFalseEnabled ? I18n.t('Tolerance by TRUE') : I18n.t('Tolerance')) }\r\n                                        value={ member.setIfTrueTolerance === undefined || member.setIfTrueTolerance === null ? '' : member.setIfTrueTolerance }\r\n                                        title={ I18n.t('Absolute value, not percent') }\r\n                                        className={ classes.setValue }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].setIfTrueTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                                            this.setStateWithParent({members});\r\n                                        } }/>\r\n                                </Box>\r\n                            }\r\n                        </Box> : null }\r\n                        { !this.state.virtualGroup && this.state.onFalseEnabled ?\r\n                            <Box className={ classes.p }>\r\n                                {\r\n                                    this.state.objectTypes[member.id] === 'boolean' ?\r\n                                        <FormControl className={ classes.setValue }>\r\n                                            <InputLabel>{ I18n.t('Setpoint by FALSE') }</InputLabel>\r\n                                            <Select\r\n                                                value={ member.setIfFalse === true || member.setIfFalse === 'true' ? 'true' : 'false'}\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].setIfFalse = e.target.value === 'true';\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            >\r\n                                                <MenuItem value=\"false\">FALSE</MenuItem>\r\n                                                <MenuItem value=\"true\">TRUE</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        <Box className={ classes.p }>\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                InputLabelProps={ {shrink: true} }\r\n                                                label={ I18n.t('Setpoint by FALSE') }\r\n                                                value={ member.setIfFalse === undefined || member.setIfFalse === null ? '' : member.setIfFalse }\r\n                                                className={ classes.setValue }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    if (this.state.objectTypes[member.id] === 'number') {\r\n                                                        members[index].setIfFalse = parseFloat(e.target.value.replace(',', '.'));\r\n                                                    } else {\r\n                                                        members[index].setIfFalse = e.target.value;\r\n                                                    }\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                            <TextField\r\n                                                InputLabelProps={ {shrink: true} }\r\n                                                label={ '± ' + I18n.t('Tolerance by FALSE') }\r\n                                                title={ I18n.t('Absolute value, not percent') }\r\n                                                value={ member.setIfFalseTolerance === undefined || member.setIfFalseTolerance === null ? '' : member.setIfFalseTolerance }\r\n                                                className={ classes.setValue }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].setIfFalseTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                        </Box>\r\n                                }\r\n                            </Box>\r\n                            : null}\r\n                        <Box className={ classes.p }>\r\n                            <Grid container spacing={ 4 }>\r\n                                <Grid item xs={ 12 } sm={ 6 }>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        InputLabelProps={{shrink: true}}\r\n                                        label={ I18n.t('Delay from start of scene (ms)')}\r\n                                        title={ I18n.t(\r\n                                            'Additionally to the interval between commands. E.g. if the interval %s, this state will be set after %s ms from scene start',\r\n                                            this.props.intervalBetweenCommands,\r\n                                            this.props.intervalBetweenCommands * index + (member.delay || 0)\r\n                                        )}\r\n                                        value={ member.delay || 0}\r\n                                        min={ 0 }\r\n                                        type=\"number\"\r\n                                        onChange={e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].delay = parseInt(e.target.value, 10);\r\n                                            this.setStateWithParent({members});\r\n                                        }}/>\r\n                                </Grid>\r\n                                <Grid item xs={ 12 } sm={ 6 }>\r\n                                    <FormControlLabel\r\n                                        label={ I18n.t('Stop already started commands') }\r\n                                        control={\r\n                                            <Checkbox\r\n                                                checked={ member.stopAllDelays }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].stopAllDelays = e.target.checked;\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                    }/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                        <Box className={ classes.p }>\r\n                            <FormControlLabel\r\n                                label={ I18n.t('Do not overwrite state if it has the required value') }\r\n                                title={\r\n                                    I18n.t('For example, if the value is already at \"%s\" and \"%s\" is the setpoint, then write the value anyway if this checkbox is activated.',\r\n                                        member.setIfTrue === undefined || member.setIfTrue === null ? 'null' : member.setIfTrue.toString(),\r\n                                        member.setIfTrue === undefined || member.setIfTrue === null ? 'null' : member.setIfTrue.toString())\r\n                                }\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={ !!member.doNotOverwrite }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].doNotOverwrite = e.target.checked;\r\n                                            this.setStateWithParent({members});\r\n                                        } }\r\n                                    />\r\n                            }/>\r\n                        </Box>\r\n                    </div> :\r\n                    (!this.state.virtualGroup ? <div className={ classes.smallOnTrueFalse }>\r\n                        { I18n.t('Set if TRUE') + ': ' } <span className={ classes.stateValueTrue }>{ setIfTrue }</span>\r\n                        { this.state.onFalseEnabled ? ' / ' + I18n.t('Set if FALSE') + ': ' : null}\r\n                        { this.state.onFalseEnabled ? <span className={ classes.stateValueFalse }>{ setIfFalse }</span> : null}\r\n                    </div> : <div style={ {height: 8} }/>)\r\n            }\r\n        </Paper>\r\n    };\r\n\r\n    onWriteScene(val) {\r\n        if (val === 'true') {\r\n            val = true;\r\n        } else if (val === 'false') {\r\n            val = false;\r\n        } else if (typeof val === 'string' && parseFloat(val.replace(',', '.')).toString() === val) {\r\n            val = parseFloat(val.replace(',', '.'));\r\n        }\r\n\r\n        this.props.socket.setState(this.props.sceneId, val)\r\n            .catch(e => this.props.showError(e));\r\n    }\r\n\r\n    getItemStyle = (isDragging, draggableStyle) => ({\r\n        // some basic styles to make the items look a bit nicer\r\n        userSelect: 'none',\r\n        background: isDragging ? 'lightgreen' : 'inherit',\r\n\r\n        // styles we need to apply on draggables\r\n        ...draggableStyle\r\n    });\r\n\r\n    getListStyle = isDraggingOver => ({\r\n        background: isDraggingOver ? 'lightblue' : 'inherit',\r\n    });\r\n\r\n    render = () => {\r\n        let sceneState = this.state.states[this.props.sceneId];\r\n        if (this.state.selectedSceneChanged) {\r\n            sceneState = I18n.t('Save scene before test');\r\n        } else if (sceneState === undefined || sceneState === null) {\r\n            sceneState = '';\r\n        }\r\n\r\n        if (this.engineId !== this.state.engineId) {\r\n            this.engineId && this.props.socket.unsubscribeState(this.engineId + '.alive', this.memberStateChange);\r\n            this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n            this.engineId = this.state.engineId;\r\n        }\r\n\r\n        const onFalseEnabled =!this.state.virtualGroup && this.state.onFalseEnabled;\r\n\r\n        let result = <div key=\"SceneMembersForm\" className={ clsx(!this.props.oneColumn && this.props.classes.height, this.props.classes.columnContainer) }>\r\n            <Toolbar classes={{ gutters: this.props.classes.guttersZero }}>\r\n                <Typography variant=\"h6\" className={ clsx(this.props.classes.sceneTitle) } >\r\n                    { I18n.t('Scene states') }{ !this.state.states[this.state.engineId + '.alive'] ? <span className={ this.props.classes.instanceNotActive }>{ I18n.t('Instance not active') }</span> : ''}\r\n                    <br/>\r\n                    <span className={ clsx(\r\n                        this.props.classes.sceneSubTitle,\r\n                        !this.state.virtualGroup && sceneState === true && this.props.classes.sceneTrue,\r\n                        !this.state.virtualGroup && sceneState === false && this.props.classes.sceneFalse,\r\n                        !this.state.virtualGroup && sceneState === 'uncertain' && this.props.classes.sceneUncertain,\r\n                    ) }>{ I18n.t('Scene state:') } { sceneState === true ? 'TRUE' : (sceneState === false ? 'FALSE' : sceneState.toString()) }</span>\r\n                </Typography>\r\n                <IconButton title={I18n.t('Add new state')} onClick={() => this.setState({showDialog: true})}>\r\n                    <IconAdd/>\r\n                </IconButton>\r\n            </Toolbar>\r\n            <div className={ clsx(this.props.classes.testButtons, this.props.classes.width100) }>\r\n                {  !this.state.selectedSceneChanged && this.state.virtualGroup ? <TextField\r\n                    className={ this.props.classes.width100WithButton }\r\n                    label={ I18n.t('Write to virtual group') }\r\n                    defaultValue={ sceneState }\r\n                    onKeyUp={e => e.keyCode === 13 && this.onWriteScene(this.state.writeSceneState)}\r\n                    onChange={e => this.setState({writeSceneState: e.target.value}) }\r\n                /> : null}\r\n                { !this.state.selectedSceneChanged && this.state.virtualGroup && this.state.members.length ? <IconButton\r\n                    onClick={e => this.onWriteScene(this.state.writeSceneState) }\r\n                ><IconPlay/></IconButton> : null}\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && !this.state.virtualGroup ? <Button\r\n                    className={ this.props.classes.btnTestTrue }\r\n                    onClick={ () => this.onWriteScene(true) }\r\n                ><IconPlay/>{ !onFalseEnabled ? I18n.t('Test') : I18n.t('Test TRUE') }</Button> : null }\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && onFalseEnabled && this.state.members.length ? <Button\r\n                    className={ this.props.classes.btnTestFalse }\r\n                    onClick={ () => this.onWriteScene(false) }\r\n                ><IconPlay/>{ I18n.t('Test FALSE') }</Button> : null }\r\n            </div>\r\n            <DragDropContext onDragEnd={ this.onDragEnd }>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div className={ this.props.classes.scroll }\r\n                             {...provided.droppableProps}\r\n                             ref={ provided.innerRef }\r\n                             style={ this.getListStyle(snapshot.isDraggingOver) }\r\n                        >\r\n                            { this.state.members.map((member, i) =>\r\n                                <Draggable key={ member.id } draggableId={ member.id } index={ i }>\r\n                                    {(provided, snapshot) =>\r\n                                        <div\r\n                                            ref={ provided.innerRef }\r\n                                            {...provided.draggableProps }\r\n                                            {...provided.dragHandleProps }\r\n                                            style={ this.getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            ) }\r\n                                        >{ this.renderMember(member, i) }</div>}\r\n                                </Draggable>\r\n                            )}\r\n                            { provided.placeholder }\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>;\r\n\r\n        return [\r\n            result,\r\n            this.renderDeleteDialog(),\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneMembersForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateSceneMembers: PropTypes.func,\r\n    sceneId: PropTypes.string,\r\n    onFalseEnabled: PropTypes.bool,\r\n    virtualGroup: PropTypes.bool,\r\n    sceneEnabled: PropTypes.bool,\r\n    selectedSceneChanged: PropTypes.bool,\r\n    intervalBetweenCommands: PropTypes.number,\r\n    engineId: PropTypes.string,\r\n    oneColumn: PropTypes.bool,\r\n    showError: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(SceneMembersForm);","// Common\r\nimport React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nimport AceEditor from 'react-ace';\r\nimport 'ace-builds/src-noconflict/mode-json';\r\nimport 'ace-builds/src-noconflict/theme-clouds_midnight';\r\nimport 'ace-builds/src-noconflict/theme-chrome';\r\nimport 'ace-builds/src-noconflict/ext-language_tools'\r\n\r\n// Own\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport copy from '@iobroker/adapter-react/Components/copy-to-clipboard';\r\n\r\nconst styles = theme => ({\r\n    divWithoutTitle: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: '2px solid #00000000',\r\n    },\r\n    error: {\r\n        border: '2px solid #FF0000',\r\n    },\r\n});\r\n\r\nclass ExportImportDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            text: props.sceneObj ? JSON.stringify(props.sceneObj, null, 2) : '',\r\n            error: false,\r\n            toast: '',\r\n        };\r\n    }\r\n\r\n    onChange(value) {\r\n        const newState = {text: value};\r\n        try {\r\n            JSON.parse(value);\r\n            if (this.state.error) {\r\n                newState.error = false;\r\n            }\r\n\r\n            this.setState(newState);\r\n        } catch (e) {\r\n            newState.error = true;\r\n            this.setState(newState);\r\n        }\r\n    }\r\n\r\n    renderToast() {\r\n        return <Snackbar open={ !!this.state.toast } autoHideDuration={ 3000 } onClick={ () => this.setState({ toast: '' }) } onClose={ () => this.setState({ toast: '' }) }>\r\n            <Alert color=\"info\" severity=\"success\" >{ this.state.toast }</Alert>\r\n        </Snackbar>;\r\n    }\r\n\r\n    render() {\r\n        return <Dialog\r\n            open={ true }\r\n            onClose={ () => this.props.onClose() }\r\n            aria-labelledby=\"export-dialog-title\"\r\n            fullWidth\r\n            maxWidth=\"lg\"\r\n            fullScreen={ true }\r\n            aria-describedby=\"export-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"export-dialog-title\">{ this.props.isImport ? I18n.t('Import scene') : I18n.t('Export scene') }</DialogTitle>\r\n            <DialogContent>\r\n                <div className={ clsx(this.props.classes.divWithoutTitle, this.state.error && this.props.classes.error) }>\r\n                    <AceEditor\r\n                        autoFocus\r\n                        mode=\"json\"\r\n                        width=\"100%\"\r\n                        height=\"100%\"\r\n                        onLoad={editor => {\r\n                            this.codeEditor = editor;\r\n                            this.codeEditor.focus();\r\n                        }}\r\n                        theme={ this.props.themeType === 'dark' ? 'clouds_midnight' : 'chrome' }\r\n                        onChange={ newValue => this.onChange(newValue) }\r\n                        value={ this.state.text || '' }\r\n                        name=\"UNIQUE_ID_OF_DIV\"\r\n                        fontSize={ 14 }\r\n                        readOnly={ !this.props.isImport }\r\n                        editorProps={{ $blockScrolling: true }}\r\n                    />\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={ () => this.props.onClose() } autoFocus={ !this.props.isImport }>\r\n                    { I18n.t('Close') }\r\n                </Button>\r\n                { this.props.isImport ?\r\n                    <Button\r\n                        disabled={ !this.state.text || this.state.error }\r\n                        onClick={ () => this.props.onClose(JSON.parse(this.state.text)) }\r\n                        color=\"primary\"\r\n                    >\r\n                        { I18n.t('Import') }\r\n                    </Button>\r\n                    :\r\n                    <Button onClick={ () => {\r\n                        copy(this.state.text);\r\n                        this.setState({ toast: I18n.t('Copied') });\r\n                        setTimeout(() => this.props.onClose(), 500);\r\n                    } } color=\"primary\" autoFocus>\r\n                        { I18n.t('Copy to clipboard') }\r\n                    </Button>}\r\n                { this.renderToast() }\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n}\r\n\r\nExportImportDialog.propTypes = {\r\n    classes: PropTypes.object,\r\n    sceneObj: PropTypes.object,\r\n    themeType: PropTypes.string,\r\n    onClose: PropTypes.func,\r\n    isImport: PropTypes.bool,\r\n};\r\n\r\nexport default withStyles(styles)(ExportImportDialog);","// Common\r\nimport React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport { withTheme } from '@material-ui/core/styles';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport withWidth from \"@material-ui/core/withWidth\";\r\n\r\n// MaterialUi\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\n// Own\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Loader from '@iobroker/adapter-react/Components/Loader'\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport SceneForm from './components/SceneForm';\r\nimport SceneMembersForm from './components/SceneMembersForm';\r\nimport ExportImportDialog from './components/ExportImportDialog';\r\n\r\n// icons\r\nimport {MdExpandLess as IconCollapse} from 'react-icons/md';\r\nimport {MdExpandMore as IconExpand} from 'react-icons/md';\r\nimport {MdAdd as IconAdd} from 'react-icons/md';\r\nimport {MdModeEdit as IconEdit} from 'react-icons/md';\r\nimport {RiFolderAddLine as IconFolderAdd} from 'react-icons/ri';\r\nimport {MdClose as IconCancel} from 'react-icons/md';\r\nimport {MdCheck as IconCheck} from 'react-icons/md';\r\nimport {MdSave as IconSave} from 'react-icons/md';\r\nimport {MdDelete as IconDelete} from 'react-icons/md';\r\nimport {MdFileDownload as IconExport} from 'react-icons/md';\r\nimport {FaScroll as IconScript} from 'react-icons/all';\r\nimport {FaFolder as IconFolderClosed} from 'react-icons/all';\r\nimport {FaFolderOpen as IconFolderOpened} from 'react-icons/all';\r\n// import {MdFileUpload as IconImport} from 'react-icons/md';\r\nimport {FaClone as IconClone} from 'react-icons/fa';\r\nimport {FaBars as IconMenu} from 'react-icons/fa';\r\nimport {BsFolderSymlink as IconMoveToFolder} from 'react-icons/bs';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nconst LEVEL_PADDING = 16;\r\nconst MARGIN_MEMBERS = 20;\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        height: 'calc(100% + 4px)',\r\n        backgroundColor: theme.palette.type === 'dark' ? '#000': '#fff',\r\n        overflowX: 'hidden',\r\n    },\r\n    mainToolbar: {\r\n        background: theme.palette.primary.main,\r\n    },\r\n    tabContent: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px)',\r\n        overflow: 'auto'\r\n    },\r\n    textInput: {\r\n        display: 'block',\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n    noGutters: {\r\n        paddingLeft: 0,\r\n        paddingRight: 0,\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    heightMinusToolbar: {\r\n        height: 'calc(100% - 48px)',\r\n    },\r\n    heightMinus2Toolbars: {\r\n        height: 'calc(100% - 96px)',\r\n    },\r\n    heightMinusMargin: {\r\n        height: 'calc(100% - ' + MARGIN_MEMBERS + 'px)',\r\n    },\r\n    folderItem: {\r\n        fontWeight: 'bold',\r\n        cursor: 'pointer',\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    fullWidthContainer: {\r\n        maxWidth: 'inherit',\r\n        paddingTop: 2,\r\n        paddingBottom: 2,\r\n        paddingLeft: 2,\r\n        paddingRight: 2,\r\n        overflow: 'hidden'\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        width: '100%',\r\n    },\r\n    buttonsContainer1: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    list: {\r\n        width: '100%',\r\n        padding: 0,\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    membersCell: {\r\n        backgroundColor: theme.palette.type === 'dark' ? '#566770': '#ADD8E6',\r\n        marginTop: MARGIN_MEMBERS,\r\n        marginRight: theme.spacing(1),\r\n        marginBottom: theme.spacing(2),\r\n        paddingTop: 0,\r\n        paddingLeft: 10,\r\n        paddingRight: 10,\r\n        paddingBottom: 10,\r\n\r\n        borderRadius: 4,\r\n        height: 'calc(100% - ' + theme.spacing(1) + 'px)',\r\n    },\r\n    leftMenuItem: {\r\n        display: 'block',\r\n        borderRadius: 10,\r\n    },\r\n    p: {\r\n        margin: '1em 0',\r\n    },\r\n    changed: {\r\n        position: 'relative',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            width: 6,\r\n            height: 6,\r\n            borderRadius: 6,\r\n            background: '#FF0000',\r\n            position: 'absolute',\r\n            top: 5,\r\n            right: 5,\r\n        },\r\n    },\r\n    sceneTitle: {\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n        flexGrow: 1,\r\n        paddingLeft: theme.spacing(1),\r\n    },\r\n    sceneSubTitle: {\r\n        fontSize: 'small',\r\n        display: 'block'\r\n    },\r\n    toolbarButtons: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    settingsBackground: {\r\n        background: theme.palette.type === 'dark' ? '#3a3a3a': '#eeeeee',\r\n    },\r\n    listItemTitle: {\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    listItemSubTitle: {\r\n        color: theme.palette.type === 'dark' ? '#bababa': '#2a2a2a',\r\n    },\r\n    disabled: {\r\n        opacity: 0.3\r\n    },\r\n    itemIconRoot: {\r\n        minWidth: 24 + theme.spacing(1),\r\n    },\r\n    itemIcon: {\r\n        width: 24,\r\n        height: 24,\r\n    },\r\n    itemIconFolder: {\r\n        color: theme.palette.type === 'dark' ? '#ffca2c' : '#ffca2c'\r\n    },\r\n    noHeight: {\r\n        height: 'inherit',\r\n    },\r\n    drawer: {\r\n        overflow: 'hidden'\r\n    },\r\n});\r\n\r\nfunction getUrlQuery() {\r\n    const parts = (window.location.search || '').replace(/^\\?/, '').split('&');\r\n    const query = {};\r\n    parts.forEach(item => {\r\n        const [name, val] = item.split('=');\r\n        query[decodeURIComponent(name)] = val !== undefined ? decodeURIComponent(val) : true;\r\n    });\r\n    return query;\r\n}\r\n\r\nfunction getFolderPrefix(sceneId) {\r\n    let result = sceneId.split('.');\r\n    result.shift();\r\n    result.shift();\r\n    result.pop();\r\n    result = result.join('.');\r\n    return result;\r\n}\r\n\r\nfunction getFolderList(folder) {\r\n    let result = [];\r\n    result.push(folder);\r\n    Object.values(folder.subFolders).forEach(subFolder =>\r\n        result = result.concat(getFolderList(subFolder)));\r\n\r\n    return result;\r\n}\r\n\r\nconst FORBIDDEN_CHARS = /[.\\][*,;'\"`<>\\\\?]/g;\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        super(props);\r\n        this.translations = {\r\n            'en': require('./i18n/en'),\r\n            'de': require('./i18n/de'),\r\n            'ru': require('./i18n/ru'),\r\n            'pt': require('./i18n/pt'),\r\n            'nl': require('./i18n/nl'),\r\n            'fr': require('./i18n/fr'),\r\n            'it': require('./i18n/it'),\r\n            'es': require('./i18n/es'),\r\n            'pl': require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n\r\n        // init translations\r\n        I18n.setTranslations(this.translations);\r\n        I18n.setLanguage((navigator.language || navigator.userLanguage || 'en').substring(0, 2).toLowerCase());\r\n\r\n        const query = getUrlQuery();\r\n\r\n        this.port = query.port || (window.location.port === '3000' ? 8081 : window.location.port);\r\n        this.host = query.host || window.location.hostname;\r\n\r\n        window.iobForceHost = this.host;\r\n    }\r\n\r\n    onConnectionReady() {\r\n        let opened;\r\n        try {\r\n            opened = JSON.parse(window.localStorage.getItem('Scenes.opened')) || [];\r\n        } catch (e) {\r\n            opened = [];\r\n        }\r\n\r\n        const newState = {\r\n            lang: this.socket.systemLang,\r\n            ready: false,\r\n            selectedSceneId: window.localStorage.getItem('Scenes.selectedSceneId') || '',\r\n            opened,\r\n            scenes: {},\r\n            folders: null,\r\n            search: null,\r\n            addFolderDialog: null,\r\n            addFolderDialogTitle: null,\r\n            editFolderDialog: null,\r\n            editFolderDialogTitle: null,\r\n            changingScene: '',\r\n            showSearch: null,\r\n            instances: [],\r\n            selectedSceneChanged: false,\r\n            deleteDialog: null,\r\n            moveDialog: null,\r\n            newFolder: '',\r\n            selectedSceneData: null,\r\n            exportDialog: false,\r\n            importDialog: false,\r\n            menuOpened: false,\r\n        };\r\n\r\n        this.socket.getSystemConfig()\r\n            .then(systemConfig => {\r\n                newState.systemConfig = systemConfig;\r\n\r\n                return this.socket.getAdapterInstances(window.adapterName)\r\n                    .then(instances => {\r\n                        newState.instances = instances.map(item => item._id);\r\n                        this.setState(newState, () =>\r\n                            this.refreshData());\r\n                    });\r\n            })\r\n            .catch(e => this.showError(e));\r\n    }\r\n\r\n    sceneSwitch = event => {\r\n        const id = event.target.name;\r\n        let scenes = JSON.parse(JSON.stringify(this.state.scenes));\r\n\r\n        if (id === this.state.selectedSceneId) {\r\n            scenes[id] = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n            scenes[id].common.enabled = event.target.checked;\r\n        }\r\n\r\n        scenes[id].common.enabled = event.target.checked;\r\n\r\n        this.socket.setObject(id, scenes[id])\r\n            .then(() => this.refreshData(id))\r\n            .catch(e => this.showError(e));\r\n    };\r\n\r\n    buildTree(scenes) {\r\n        scenes = Object.values(scenes);\r\n\r\n        let folders = {subFolders: {}, scenes: {}, id: '', prefix: ''};\r\n\r\n        // create missing folders\r\n        scenes.forEach((scene) => {\r\n            let id = scene._id;\r\n            const parts = id.split('.');\r\n            parts.shift();\r\n            parts.shift();\r\n            let currentFolder = folders;\r\n            let prefix = '';\r\n            for (let i = 0; i < parts.length - 1; i++) {\r\n                if (prefix) {\r\n                    prefix = prefix + '.';\r\n                }\r\n                prefix = prefix + parts[i];\r\n                if (!currentFolder.subFolders[parts[i]]) {\r\n                    currentFolder.subFolders[parts[i]] = {\r\n                        subFolders: {},\r\n                        scenes: {},\r\n                        id: parts[i],\r\n                        prefix,\r\n                    }\r\n                }\r\n                currentFolder = currentFolder.subFolders[parts[i]];\r\n            }\r\n            currentFolder.scenes[id] = scene;\r\n        });\r\n\r\n        return folders;\r\n    }\r\n\r\n    findFolder(parent, folder) {\r\n        if (parent.prefix === folder.prefix) {\r\n            return parent;\r\n        }\r\n        for (let index in parent.subFolders) {\r\n            let result = this.findFolder(parent.subFolders[index], folder);\r\n            if (result) {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    getData() {\r\n        let scenes;\r\n        return this.socket.getObjectView('scene.0.', 'scene.\\u9999', 'state')\r\n            .then(_scenes => {\r\n                scenes = _scenes;\r\n                return {scenes, folders: this.buildTree(scenes)};\r\n            })\r\n            .catch(e => this.showError(e));\r\n    }\r\n\r\n    refreshData(changingScene) {\r\n        const that = this;\r\n        return new Promise(resolve => {\r\n            if (changingScene) {\r\n                this.setState({changingScene}, () => resolve());\r\n            } else {\r\n                this.setState({ready: false}, () => resolve());\r\n            }\r\n        })\r\n            .then(() => this.getData())\r\n            .then(newState => {\r\n                newState.ready = true;\r\n                newState.changingScene = '';\r\n                newState.selectedSceneChanged = false;\r\n\r\n                // Fill missing data\r\n                Object.keys(newState.scenes).forEach(id => {\r\n                    const sceneObj = newState.scenes[id];\r\n                    sceneObj.common = sceneObj.common || {};\r\n                    sceneObj.native = sceneObj.native || {};\r\n\r\n                    // rename attribute\r\n                    if (sceneObj.native.burstIntervall !== undefined) {\r\n                        sceneObj.native.burstInterval = sceneObj.native.burstIntervall;\r\n                        delete sceneObj.native.burstIntervall;\r\n                    }\r\n\r\n                    sceneObj.native.burstInterval = parseInt(sceneObj.native.burstInterval || 0, 10);\r\n                    sceneObj.native.onFalse = sceneObj.native.onFalse || {};\r\n                    sceneObj.native.onTrue  = sceneObj.native.onTrue  || {};\r\n                    sceneObj.native.onFalse.trigger = sceneObj.native.onFalse.trigger || {condition: '=='};\r\n                    sceneObj.native.onTrue.trigger  = sceneObj.native.onTrue.trigger  || {condition: '=='};\r\n                    sceneObj.native.members = sceneObj.native.members || [];\r\n                    const members = sceneObj.native.members;\r\n                    delete sceneObj.native.members;\r\n                    sceneObj.native.members = members; // place it on the last place\r\n\r\n                    delete sceneObj.from;\r\n                    delete sceneObj.user;\r\n                    delete sceneObj.ts;\r\n                    delete sceneObj.acl;\r\n                });\r\n\r\n                if (!newState.scenes[this.state.selectedSceneId]) {\r\n                    newState.selectedSceneId = Object.keys(newState.scenes).shift() || '';\r\n                }\r\n\r\n                if ((newState.selectedSceneId || that.state.selectedSceneId) &&\r\n                    newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]) {\r\n                    newState.selectedSceneData = JSON.parse(JSON.stringify(newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]));\r\n                } else {\r\n                    newState.selectedSceneData = null;\r\n                }\r\n\r\n                that.setState(newState);\r\n            });\r\n    }\r\n\r\n    addFolder(parentFolder, id) {\r\n        let folders = JSON.parse(JSON.stringify(this.state.folders));\r\n        let _parentFolder = this.findFolder(folders, parentFolder);\r\n\r\n        let opened = JSON.parse(JSON.stringify(this.state.opened));\r\n\r\n        _parentFolder.subFolders[id] = {\r\n            scenes: {},\r\n            subFolders: {},\r\n            id,\r\n            prefix: _parentFolder.prefix ? _parentFolder.prefix + '.' + id : id\r\n        };\r\n\r\n        opened.push(id);\r\n\r\n        this.setState({folders, opened});\r\n    }\r\n\r\n    addSceneToFolderPrefix = (scene, folderPrefix, noRefresh) => {\r\n        let oldId = scene._id;\r\n        let sceneId = scene._id.split('.').pop();\r\n        scene._id = 'scene.0.' + folderPrefix + (folderPrefix ? '.' : '') + sceneId;\r\n\r\n        return this.socket.delObject(oldId)\r\n            .then(() => {\r\n                console.log('Deleted ' + oldId);\r\n                return this.socket.setObject(scene._id, scene)\r\n            })\r\n            .catch(e => this.showError(e))\r\n            .then(() => {\r\n                console.log('Set new ID: ' + scene._id);\r\n                return !noRefresh && this.refreshData(sceneId)\r\n                    .then(() => this.changeSelectedScene(scene._id))\r\n                    .catch(e => this.showError(e));\r\n            });\r\n    };\r\n\r\n    renameFolder(folder, newName) {\r\n        return new Promise(resolve => this.setState({changingScene: folder}, () => resolve()))\r\n            .then(() => {\r\n                let newSelectedId;\r\n                let pos;\r\n                // if selected folder opened, replace its ID in this.state.opened\r\n                if ((pos = this.state.opened.indexOf(folder.prefix)) !== -1) {\r\n                    const opened = [...this.state.opened];\r\n                    opened.splice(pos, 1);\r\n                    opened.push(newName);\r\n                    opened.sort();\r\n                    this.setState({opened});\r\n                }\r\n\r\n                let prefix = folder.prefix.split('.');\r\n                prefix[prefix.length - 1] = newName;\r\n                prefix = prefix.join('.');\r\n\r\n                if (Object.keys(folder.scenes).find(id => id === this.state.selectedSceneId)) {\r\n                    newSelectedId = 'scene.0.' + prefix + '.' + this.state.selectedSceneId.split('.').pop();\r\n                }\r\n\r\n                const promises = Object.keys(folder.scenes).map(sceneId =>\r\n                    this.addSceneToFolderPrefix(folder.scenes[sceneId], prefix, true));\r\n\r\n                return Promise.all(promises)\r\n                    .then(() => this.refreshData(folder))\r\n                    .then(() => newSelectedId && this.setState({selectedSceneId: newSelectedId}));\r\n            });\r\n    }\r\n\r\n    renderMoveDialog() {\r\n        if (!this.state.moveDialog) {\r\n            return null;\r\n        }\r\n\r\n        const newFolder = this.state.newFolder === '__root__' ? '' : this.state.newFolder;\r\n        const sceneId = this.state.selectedSceneId.split('.').pop();\r\n        const newId = 'scene.0.' + newFolder + (newFolder ? '.' : '') + sceneId;\r\n\r\n        const isIdUnique = !Object.keys(this.state.scenes).find(id => id === newId);\r\n\r\n        return <Dialog\r\n            open={ true }\r\n            key=\"moveDialog\"\r\n            onClose={ () => this.setState({moveDialog: null}) }\r\n        >\r\n            <DialogTitle>{ I18n.t('Move to folder') }</DialogTitle>\r\n            <DialogContent>\r\n                <FormControl classes={ {root: this.props.classes.width100} }>\r\n                    <InputLabel shrink={ true }>{ I18n.t('Folder') }</InputLabel>\r\n                    <Select\r\n                        className={ this.props.classes.width100 }\r\n                        value={ this.state.newFolder || '__root__' }\r\n                        onChange={e => this.setState({newFolder: e.target.value}) }>\r\n                        { getFolderList(this.state.folders).map(folder =>\r\n                            <MenuItem\r\n                                key={ folder.prefix }\r\n                                value={ folder.prefix || '__root__' }\r\n                            >\r\n                                { folder.prefix ? folder.prefix.replace('.', ' > ') : I18n.t('Root') }\r\n                            </MenuItem>)\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n            </DialogContent>\r\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                <Button variant=\"contained\" onClick={ () => this.setState({moveDialog: null}) }>\r\n                    { I18n.t('Cancel') }\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    disabled={ !isIdUnique }\r\n                    color=\"primary\" onClick={ e =>\r\n                        this.setState({moveDialog: null}, () =>\r\n                            this.addSceneToFolderPrefix(this.state.scenes[this.state.selectedSceneId], this.state.newFolder === '__root__' ? '' : this.state.newFolder))\r\n                    }\r\n                >\r\n                    { I18n.t('Move to folder') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n\r\n    /*deleteFolder(folder) {\r\n        if (Object.values(folder.scenes).length) {\r\n            return this.showError(I18n.t('Cannot delete non-empty folder'));\r\n        } else {\r\n            //delete folder;\r\n            this.setState(this.state);\r\n        }\r\n    }*/\r\n\r\n    renderTreeScene = (item, level) => {\r\n        const scene = this.state.scenes[item._id];\r\n        if (!scene || (this.state.search && !item.common.name.includes(this.state.search))) {\r\n            return null;\r\n        }\r\n\r\n        level = level || 0;\r\n\r\n        const changed = this.state.selectedSceneId && this.state.selectedSceneId === scene._id && this.state.selectedSceneChanged;\r\n\r\n        return <ListItem\r\n            style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\r\n            key={ item._id }\r\n            selected={ this.state.selectedSceneId ? this.state.selectedSceneId === scene._id : false }\r\n            button\r\n            className={ clsx(changed && this.props.classes.changed, !scene.common.enabled && this.props.classes.disabled) }\r\n            onClick={ () =>\r\n                this.changeSelectedScene(scene._id)\r\n                    .catch(() => console.log('ignore')) }>\r\n            <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} }><IconScript className={ this.props.classes.itemIcon }/></ListItemIcon>\r\n            <ListItemText\r\n                classes={ {primary: this.props.classes.listItemTitle, secondary: this.props.classes.listItemSubTitle} }\r\n                primary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) }\r\n                secondary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}, true) }\r\n                />\r\n            <ListItemSecondaryAction>\r\n                {this.state.changingScene === scene._id ?\r\n                    <CircularProgress size={ 24 }/>\r\n                    :\r\n                    <Switch\r\n                        checked={ scene.common.enabled }\r\n                        onChange={ this.sceneSwitch }\r\n                        name={ scene._id }\r\n                    />\r\n                }\r\n            </ListItemSecondaryAction>\r\n        </ListItem>;\r\n    };\r\n\r\n    toggleFolder(folder) {\r\n        const opened = [...this.state.opened];\r\n        const pos = opened.indexOf(folder.prefix);\r\n        if (pos === -1) {\r\n            opened.push(folder.prefix);\r\n        } else {\r\n            opened.splice(pos, 1);\r\n\r\n            // If active scene is inside this folder select the first scene\r\n            if (Object.keys(folder.scenes).includes(this.state.selectedSceneId)) {\r\n                // To do ask question\r\n                if (this.state.selectedSceneChanged) {\r\n                    this.confirmCb = () => {\r\n                        this.setState({selectedSceneId: '', selectedSceneData: null, selectedSceneChanged: false, opened});\r\n                        window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\r\n                    };\r\n                    return this.setState({sceneChangeDialog: 'empty'});\r\n                }\r\n\r\n                this.setState({selectedSceneId: '', selectedSceneData: null, selectedSceneChanged: false});\r\n            }\r\n        }\r\n\r\n        window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\r\n\r\n        this.setState({opened});\r\n    }\r\n\r\n    renderTree(parent, level) {\r\n        let result = [];\r\n        level = level || 0;\r\n        let opened = this.state.opened ? this.state.opened.includes(parent.prefix) : false;\r\n\r\n        // Show folder item\r\n        parent && parent.id && result.push(<ListItem\r\n            key={ parent.prefix }\r\n            classes={ {gutters: this.props.classes.noGutters} }\r\n            className={ clsx(this.props.classes.width100, this.props.classes.folderItem) }\r\n            style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\r\n        >\r\n            <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} } onClick={ () => this.toggleFolder(parent) }>{ opened ?\r\n                <IconFolderOpened className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/> :\r\n                <IconFolderClosed className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/>\r\n            }</ListItemIcon>\r\n            <ListItemText>{ parent.id }</ListItemText>\r\n            <ListItemSecondaryAction>\r\n                <IconButton onClick={ () => this.toggleFolder(parent) } title={ opened ? I18n.t('Collapse') : I18n.t('Expand')  }>\r\n                    { opened ? <IconExpand/> : <IconCollapse/> }\r\n                </IconButton>\r\n            </ListItemSecondaryAction>\r\n        </ListItem>);\r\n\r\n        if (parent && (opened || !parent.id)) { // root cannot be closed and have id === ''\r\n            parent.id && result.push(<ListItem key={ 'keys_' + parent.prefix }>\r\n                <ListItemSecondaryAction>\r\n                    <IconButton\r\n                        onClick={() => this.createScene(this.getNewSceneId(), parent.id) }\r\n                        title={ I18n.t('Create new scene') }\r\n                    ><IconAdd/></IconButton>\r\n                    { /* <IconButton\r\n                        onClick={() => this.setState({addFolderDialog: parent, addFolderDialogTitle: ''})}\r\n                        title={ I18n.t('Create new folder') }\r\n                    ><IconFolderAdd/></IconButton> */ }\r\n\r\n                    <IconButton onClick={ () => this.setState({editFolderDialog: parent, editFolderDialogTitle: parent.id, editFolderDialogTitleOrigin: parent.id}) }\r\n                                title={ I18n.t('Edit folder name') }\r\n                    ><IconEdit/></IconButton>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>);\r\n\r\n            const values = Object.values(parent.scenes);\r\n            const subFolders = Object.values(parent.subFolders);\r\n\r\n            // add first sub-folders\r\n            result.push(subFolders.sort((a, b) => a.id > b.id ? 1 : (a.id < b.id ? -1 : 0)).map(subFolder =>\r\n                this.renderTree(subFolder, level + 1)));\r\n\r\n            // Add as second scenes\r\n\r\n            result.push(<ListItem\r\n                key={ 'items_' + parent.prefix }\r\n                classes={ {gutters: this.props.classes.noGutters} }\r\n                className={ this.props.classes.width100 }>\r\n                <List\r\n                    className={ this.props.classes.list }\r\n                    classes={ {root: this.props.classes.leftMenuItem} }\r\n                    style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\r\n                >\r\n                    { values.length ?\r\n                        values.sort((a, b) => a._id > b._id ? 1 : (a._id < b._id ? -1 : 0)).map(scene => this.renderTreeScene(scene, level))\r\n                        :\r\n                        (!subFolders.length ? <ListItem><ListItemText className={ this.props.classes.folderItem}>{ I18n.t('No scenes created yet')}</ListItemText></ListItem> : '')\r\n                    }\r\n                </List>\r\n            </ListItem>);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    createScene(name, parentId) {\r\n        let template = {\r\n            common: {\r\n                name: '',\r\n                type: 'boolean',\r\n                role: 'scene.state',\r\n                desc: '',\r\n                enabled: true,\r\n                read: true,\r\n                write: true,\r\n                def: false,\r\n                engine: 'system.adapter.scenes.0'\r\n            },\r\n            native: {\r\n                onTrue: {\r\n                    trigger: {},\r\n                    cron: null,\r\n                    astro: null\r\n                },\r\n                onFalse: {\r\n                    enabled: false,\r\n                    trigger: {},\r\n                    cron: null,\r\n                    astro: null\r\n                },\r\n                members: []\r\n            },\r\n            type: 'state'\r\n        };\r\n\r\n        template.common.name = name;\r\n        let id = 'scene.0.' + (parentId ? parentId + '.' : '') + template.common.name;\r\n\r\n        this.setState({changingScene: id}, () =>\r\n            this.socket.setObject(id, template)\r\n                .then(() => this.refreshData(id))\r\n                .then(() => this.changeSelectedScene(id))\r\n                .catch(e => this.showError(e))\r\n        );\r\n    };\r\n\r\n    cloneScene(id) {\r\n        let scene = JSON.parse(JSON.stringify(this.state.scenes[id]));\r\n        scene._id = scene._id.split('.');\r\n        scene._id.pop();\r\n        scene._id.push(this.getNewSceneId());\r\n        scene._id = scene._id.join('.');\r\n        scene.common.name = scene.common.name + ' ' + I18n.t('copy');\r\n\r\n        this.setState({changingScene: scene._id}, () =>\r\n            this.socket.setObject(scene._id, scene)\r\n                .then(() => this.refreshData(scene._id))\r\n                .then(() => this.changeSelectedScene(scene._id))\r\n                .catch(e => this.showError(e))\r\n        );\r\n    };\r\n\r\n    writeScene() {\r\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        scene._id = this.state.selectedSceneId;\r\n\r\n        const folder = getFolderPrefix(scene._id);\r\n        const newId = 'scene.0.' + (folder ? folder + '.' : '') + scene.common.name.replace(FORBIDDEN_CHARS, '_').replace(/\\s/g, '_');\r\n\r\n        if (scene._id !== newId) {\r\n            // check if the scene name is unique\r\n            if (Object.keys(this.state.scenes).find(id => id === newId)) {\r\n                return this.showError(I18n.t('Name is not unique. Please change name before the save.'));\r\n            }\r\n\r\n            // delete first the old scene\r\n            return this.socket.delObject(scene._id)\r\n                .then(() => {\r\n                    scene._id = newId;\r\n                    return this.socket.setObject(scene._id, scene);\r\n                })\r\n                .then(() => this.refreshData(this.state.selectedSceneId))\r\n                .then(() => this.changeSelectedScene(newId))\r\n                .catch(e => this.showError(e));\r\n        } else {\r\n            return this.socket.setObject(this.state.selectedSceneId, scene)\r\n                .then(() => this.refreshData(this.state.selectedSceneId))\r\n                .catch(e => this.showError(e));\r\n        }\r\n    }\r\n\r\n    updateScene(common, native, cb) {\r\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        if (common) {\r\n            scene.common = JSON.parse(JSON.stringify(common));\r\n        }\r\n        if (native) {\r\n            const members = scene.native.members;\r\n            scene.native = JSON.parse(JSON.stringify(native));\r\n            scene.native.members = members;\r\n        }\r\n\r\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\r\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\r\n    };\r\n\r\n    deleteScene = (id) => {\r\n        return this.socket.delObject(id)\r\n            .then(() => {\r\n                if (this.state.selectedSceneId === id) {\r\n                    return this.refreshData(id)\r\n                        .then(() => {\r\n                            const ids = Object.keys(this.state.scenes);\r\n                            // Find next scene\r\n                            let nextId = ids.find(_id => _id > id) || '';\r\n                            if (!nextId) {\r\n                                // try prev scene\r\n                                for (let i = ids.length - 1; i >= 0; i--) {\r\n                                    if (ids[i] < id) {\r\n                                        nextId = ids[i];\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (!nextId && ids.length) {\r\n                                nextId = ids.shift();\r\n                            }\r\n\r\n                            return this.changeSelectedScene(nextId);\r\n                        });\r\n                } else {\r\n                    return this.refreshData(id);\r\n                }\r\n            })\r\n            .catch(e => this.showError(e));\r\n    };\r\n\r\n    getNewSceneId() {\r\n        let newId = 0;\r\n\r\n        for (const id in this.state.scenes) {\r\n            let shortId = id.split('.').pop();\r\n            let matches = shortId.match(/^scene([0-9]+)$/);\r\n            if (matches && parseInt(matches[1], 10) >= newId) {\r\n                newId = parseInt(matches[1]) + 1;\r\n            }\r\n        }\r\n\r\n        return 'scene' + newId;\r\n    };\r\n\r\n    updateSceneMembers(members, cb) {\r\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        scene.native.members = JSON.parse(JSON.stringify(members));\r\n\r\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\r\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\r\n    };\r\n\r\n    changeSelectedScene(newId, ignoreUnsaved, cb) {\r\n        return new Promise(resolve => {\r\n            if (this.state.selectedSceneId !== newId) {\r\n                if (this.state.selectedSceneChanged && !ignoreUnsaved) {\r\n                    this.confirmCb = cb;\r\n                    this.setState({sceneChangeDialog: newId}, () => resolve());\r\n                } else {\r\n                    window.localStorage.setItem('Scenes.selectedSceneId', newId);\r\n                    this.setState({\r\n                        selectedSceneData: this.state.scenes[newId] ? JSON.parse(JSON.stringify(this.state.scenes[newId])) : null,\r\n                        sceneChangeDialog: '',\r\n                        selectedSceneId: newId || '',\r\n                        selectedSceneChanged: false,\r\n                        menuOpened: false,\r\n                    }, () => {\r\n                        resolve();\r\n                        cb && cb();\r\n                    });\r\n                }\r\n            } else {\r\n                resolve();\r\n                cb && cb();\r\n            }\r\n        });\r\n    }\r\n\r\n    renderAddFolderDialog() {\r\n        return this.state.addFolderDialog ?\r\n            <Dialog\r\n                open={ !!this.state.addFolderDialog }\r\n                onClose={ () => this.setState({addFolderDialog: null}) }\r\n            >\r\n                <DialogTitle>{I18n.t('Create folder')}</DialogTitle>\r\n                <DialogContent className={ this.props.classes.p }>\r\n                    <TextField label={ I18n.t('Title') } value={ this.state.addFolderDialogTitle } onChange={ e =>\r\n                        this.setState({addFolderDialogTitle: e.target.value.replace(FORBIDDEN_CHARS, '_')}) }/>\r\n                </DialogContent>\r\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                    <Button variant=\"contained\" onClick={ () => this.setState({addFolderDialog: null}) }>\r\n                        <IconCancel className={ this.props.classes.buttonIcon }/>\r\n                        { I18n.t('Cancel') }\r\n                    </Button>\r\n                    <Button variant=\"contained\" disabled={!this.state.addFolderDialogTitle || Object.keys(this.state.folders.subFolders).find(name => name === this.state.addFolderDialogTitle)} onClick={() => {\r\n                        this.addFolder(this.state.addFolderDialog, this.state.addFolderDialogTitle);\r\n                        this.setState({addFolderDialog: null});\r\n                    }} color=\"primary\" autoFocus>\r\n                        <IconCheck className={ this.props.classes.buttonIcon }/>\r\n                        {I18n.t('Create')}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog> : null;\r\n    }\r\n\r\n    renderEditFolderDialog() {\r\n        const isUnique = !Object.keys(this.state.folders.subFolders).find(folder => folder.id === this.state.editFolderDialogTitle);\r\n\r\n        return this.state.editFolderDialog ? <Dialog open={ !!this.state.editFolderDialog } onClose={ () => this.setState({editFolderDialog: null}) }>\r\n            <DialogTitle>{ I18n.t('Edit folder') }</DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                    label={ I18n.t('Title') }\r\n                    value={ this.state.editFolderDialogTitle }\r\n                    onChange={ e => this.setState({editFolderDialogTitle: e.target.value.replace(FORBIDDEN_CHARS, '_')}) }/>\r\n            </DialogContent>\r\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                <Button variant=\"contained\" onClick={ () => this.setState({editFolderDialog: null}) }>\r\n                    <IconCancel className={ this.props.classes.buttonIcon }/>\r\n                    { I18n.t('Cancel') }\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    disabled={ !this.state.editFolderDialogTitle || this.state.editFolderDialogTitleOrigin === this.state.editFolderDialogTitle || !isUnique}\r\n                    onClick={ () => {\r\n                        this.renameFolder(this.state.editFolderDialog, this.state.editFolderDialogTitle)\r\n                            .then(() => this.setState({editFolderDialog: null}));\r\n                    }}\r\n                    color=\"primary\"\r\n                    autoFocus\r\n                >\r\n                    <IconCheck className={ this.props.classes.buttonIcon }/>\r\n                    { I18n.t('Apply') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog> : null;\r\n    }\r\n\r\n    renderSceneChangeDialog() {\r\n        const that = this;\r\n        return this.state.sceneChangeDialog ? <Dialog\r\n            open={ true }\r\n            key=\"sceneChangeDialog\"\r\n            onClose={ () => this.setState({sceneChangeDialog: ''}) }>\r\n                <DialogTitle>{ I18n.t('Are you sure for cancel unsaved changes?') }</DialogTitle>\r\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                    <Button variant=\"contained\" onClick={() => {\r\n                        this.confirmCb = null; // cancel callback\r\n                        this.setState({sceneChangeDialog: ''});\r\n                    }}>\r\n                        <IconCancel/> { I18n.t('Cancel') }\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={ () =>\r\n                        this.changeSelectedScene(this.state.sceneChangeDialog, true, () => {\r\n                            const cb = this.confirmCb;\r\n                            this.confirmCb = null;\r\n                            cb && cb();\r\n                        })\r\n                            .catch(() => console.log('ignore')) }>\r\n                        { I18n.t('Discard') }\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={e => {\r\n                        // save scene\r\n                        this.writeScene()\r\n                            .then(() => that.changeSelectedScene(that.state.sceneChangeDialog === 'empty' ? '' : that.state.sceneChangeDialog, true, () => {\r\n                                const cb = this.confirmCb;\r\n                                this.confirmCb = null;\r\n                                cb && cb();\r\n                            }))\r\n                            .catch(() => console.log('ignore'))\r\n                    }}>\r\n                        <IconSave/> { I18n.t('Save changes') }\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog> : null;\r\n    };\r\n\r\n    renderDeleteDialog() {\r\n        return this.state.deleteDialog ? <Dialog\r\n            open={ true }\r\n            key=\"deleteDialog\"\r\n            onClose={ () => this.setState({deleteDialog: false}) }\r\n        >\r\n            <DialogTitle>{ I18n.t('Are you sure for delete this scene?') }</DialogTitle>\r\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: false}) }>\r\n                    {I18n.t('Cancel')}\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={e => {\r\n                    this.deleteScene(this.state.selectedSceneId);\r\n                    this.setState({deleteDialog: false});\r\n                }}>\r\n                    { I18n.t('Delete') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog> : null;\r\n    }\r\n\r\n    renderExportImportDialog() {\r\n        if (!this.state.exportDialog && !this.state.importDialog) {\r\n            return null;\r\n        }\r\n\r\n        return <ExportImportDialog\r\n            isImport={ !!this.state.importDialog }\r\n            themeType={ this.state.themeType }\r\n            onClose={ importedScene => {\r\n                if (this.state.importDialog && importedScene) {\r\n                    const scene = this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId];\r\n                    importedScene.common._id = scene._id;\r\n                    importedScene.common.name = scene.name || importedScene.common.name;\r\n                    this.setState({selectedSceneData: importedScene,  importDialog: false});\r\n                } else {\r\n                    this.setState({exportDialog: false, importDialog: false})\r\n                }\r\n            } }\r\n            sceneObj={ this.state.exportDialog ? this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId] : '' }\r\n        />\r\n    }\r\n\r\n    renderListToolbar() {\r\n        return <Toolbar key=\"toolbar\" variant=\"dense\" className={ this.props.classes.mainToolbar }>\r\n                <IconButton\r\n                    onClick={ () => this.createScene(this.getNewSceneId()) }\r\n                    title={ I18n.t('Create new scene') }\r\n                ><IconAdd/></IconButton>\r\n\r\n                <IconButton\r\n                    onClick={ () => this.setState({addFolderDialog: this.state.folders, addFolderDialogTitle: ''}) }\r\n                    title={ I18n.t('Create new folder') }\r\n                ><IconFolderAdd/></IconButton>\r\n\r\n                <span className={this.props.classes.right}>\r\n                                            <IconButton onClick={() => this.setState({showSearch: !this.state.showSearch}) }>\r\n                                                <SearchIcon/>\r\n                                            </IconButton>\r\n                                        </span>\r\n                {this.state.showSearch ?\r\n                    <TextField\r\n                        value={ this.state.search }\r\n                        className={ this.props.classes.textInput }\r\n                        onChange={ e => this.setState({search: e.target.value}) }/> : null\r\n                }\r\n            </Toolbar>;\r\n    }\r\n\r\n    renderSceneTopToolbar(showDrawer) {\r\n        return <Toolbar variant=\"dense\" key=\"topToolbar\" classes={ {gutters: this.props.classes.noGutters} }>\r\n            { this.props.width !== 'md' && this.props.width !== 'sm' && this.props.width !== 'xs' ? <Typography variant=\"h6\" className={ this.props.classes.sceneTitle }>\r\n                { I18n.t('Scene options') /*Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) */}\r\n                <span className={this.props.classes.sceneSubTitle}>{ Utils.getObjectNameFromObj(this.state.scenes[this.state.selectedSceneId], null, {language: I18n.getLanguage()}, true) }</span>\r\n            </Typography> : null }\r\n\r\n            { showDrawer ? <IconButton aria-label=\"Open list\" title={ I18n.t('Open list') } onClick={ () => this.setState({menuOpened: true}) }><IconMenu/></IconButton> : null }\r\n            <IconButton aria-label=\"Clone\" title={ I18n.t('Clone') } onClick={ () => this.cloneScene(this.state.selectedSceneId) }><IconClone/></IconButton>\r\n\r\n            <IconButton aria-label=\"Delete\" title={ I18n.t('Delete') } onClick={ () => this.setState({deleteDialog: true}) }><IconDelete/></IconButton>\r\n\r\n            <IconButton aria-label=\"Move to folder\" title={ I18n.t('Move to folder') } onClick={ () => this.setState({moveDialog: true, newFolder: getFolderPrefix(this.state.selectedSceneId)}) }><IconMoveToFolder/></IconButton>\r\n\r\n            <IconButton aria-label=\"Export\" title={ I18n.t('Export scene') } onClick={ () => this.setState({exportDialog: true}) }><IconExport/></IconButton>\r\n\r\n            {/*<IconButton aria-label=\"Import\" title={ I18n.t('Import scene') } onClick={ () => this.setState({importDialog: true}) }><IconImport/></IconButton>*/}\r\n        </Toolbar>;\r\n    }\r\n\r\n    renderSceneBottomToolbar() {\r\n        return <Toolbar variant=\"dense\" key=\"bottomToolbar\" classes={ {gutters: this.props.classes.noGutters} }>\r\n            <div style={{flexGrow: 1}}/>\r\n            { this.state.selectedSceneChanged ? <Button\r\n                className={ this.props.classes.toolbarButtons }\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => this.writeScene()}\r\n            >\r\n                { I18n.t('Save') }\r\n            </Button> : null }\r\n\r\n            { this.state.selectedSceneChanged ? <Button\r\n                className={ this.props.classes.toolbarButtons }\r\n                variant=\"contained\"\r\n                onClick={ () => this.refreshData(this.state.selectedSceneId) }\r\n            >\r\n                { I18n.t('Cancel') }\r\n            </Button> : null }\r\n        </Toolbar>;\r\n    }\r\n\r\n    renderDrawerContent() {\r\n        return [\r\n            this.renderListToolbar(),\r\n            <div key=\"list\" className={ this.props.classes.heightMinusToolbar }>\r\n                <List className={ this.props.classes.scroll }>\r\n                    { this.renderTree(this.state.folders) }\r\n                </List>\r\n            </div>\r\n        ];\r\n    }\r\n\r\n    renderSceneMembers(oneColumn) {\r\n        return <SceneMembersForm\r\n            key={ 'selected' + this.state.selectedSceneId }\r\n            oneColumn={ oneColumn }\r\n            showError={ e => this.showError(e) }\r\n            updateSceneMembers={ (members, cb) => this.updateSceneMembers(members, cb) }\r\n            selectedSceneChanged={ this.state.selectedSceneChanged }\r\n            sceneEnabled={ this.state.selectedSceneData.common.enabled }\r\n            members={ this.state.selectedSceneData.native.members }\r\n            socket={ this.socket }\r\n            onFalseEnabled={ this.state.selectedSceneData.native.onFalse.enabled }\r\n            virtualGroup={ this.state.selectedSceneData.native.virtualGroup }\r\n            sceneId={ this.state.selectedSceneId }\r\n            engineId={ this.state.selectedSceneData.common.engine }\r\n            intervalBetweenCommands={ this.state.selectedSceneData.native.burstInterval || 0 }\r\n        />;\r\n    }\r\n\r\n    renderSceneSettings(oneColumn) {\r\n        if (!this.state.selectedSceneData) {\r\n            this.state.selectedSceneData = JSON.parse(JSON.stringify(this.state.scenes[this.state.selectedSceneId]));\r\n        }\r\n\r\n        return <SceneForm\r\n            key={ this.state.selectedSceneId }\r\n            showError={ e => this.showError(e) }\r\n            oneColumn={ oneColumn }\r\n            updateScene={ (common, native, cb) => this.updateScene(common, native, cb) }\r\n            scene={ this.state.selectedSceneData }\r\n            socket={ this.socket }\r\n            instances={ this.state.instances }\r\n        />;\r\n    }\r\n\r\n    renderInOneColumn() {\r\n        return [\r\n            <Drawer\r\n                key=\"drawer\"\r\n                anchor=\"left\"\r\n                open={ this.state.menuOpened }\r\n                onClose={() => this.setState({menuOpened: false}) }\r\n                classes={ {paper: this.props.classes.drawer }}\r\n            >\r\n                { this.renderDrawerContent() }\r\n            </Drawer>,\r\n            this.renderSceneTopToolbar(true),\r\n            this.state.selectedSceneId ? <div\r\n                    key=\"main\"\r\n                    className={ this.props.classes.heightMinus2Toolbars }\r\n                    style={{ overflowY: 'auto', overflowX: 'hidden'}}\r\n                >\r\n                    { this.renderSceneSettings(true) }\r\n                    { this.renderSceneMembers(true) }\r\n                </div> : null,\r\n            this.renderSceneBottomToolbar(),\r\n        ]\r\n    }\r\n\r\n    renderInMoreThanOneColumn() {\r\n        const showDrawer = this.props.width === 'sm' || this.props.width === 'xs';\r\n\r\n        return <Container className={ clsx(this.props.classes.height, this.props.classes.fullWidthContainer) }>\r\n            <Grid container spacing={ 1 } className={ this.props.classes.height }>\r\n                { showDrawer ?\r\n                    <Drawer anchor=\"left\" open={ this.state.menuOpened } onClose={() => this.setState({menuOpened: false}) }>\r\n                        { this.renderDrawerContent() }\r\n                    </Drawer> :\r\n                    <Grid item xs={ 3 } className={ clsx(this.props.classes.columnContainer, this.props.classes.height) }>\r\n                        { this.renderDrawerContent() }\r\n                    </Grid>\r\n                }\r\n                { this.state.selectedSceneId && this.state.scenes[this.state.selectedSceneId] ?\r\n                    <Grid item xs={ showDrawer ? 12 : 9 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\r\n                        <Grid container spacing={ 1 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\r\n                            <Grid item xs={ this.props.width === 'xs' ? 12 : 5 } className={ this.props.classes.heightMinus2Toolbars }>\r\n                                { this.renderSceneTopToolbar(showDrawer) }\r\n                                <div className={this.props.classes.height}>\r\n                                    {this.state.selectedSceneId ? this.renderSceneSettings() : null}\r\n                                </div>\r\n                                { this.renderSceneBottomToolbar() }\r\n                            </Grid>\r\n                            <Grid item xs={ this.props.width === 'xs' ? 12 : 7 } className={ clsx(this.props.classes.height) }>\r\n                                <div className={ clsx(this.props.classes.heightMinusMargin) }>\r\n                                    { this.state.selectedSceneId ?\r\n                                        <div className={ clsx(this.props.classes.membersCell, this.props.classes.height) }>\r\n                                            { this.renderSceneMembers() }\r\n                                        </div>\r\n                                        : null}\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    : null\r\n                }\r\n            </Grid>\r\n        </Container>\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.ready) {\r\n            return <MuiThemeProvider theme={ this.state.theme }>\r\n                <Loader theme={ this.state.themeName }/>\r\n            </MuiThemeProvider>;\r\n        }\r\n\r\n        const oneColumn = this.props.width === 'xs';\r\n\r\n        return (\r\n            <MuiThemeProvider theme={ this.state.theme }>\r\n                <div className={ this.props.classes.root }>\r\n                    { oneColumn ?\r\n                        this.renderInOneColumn() :\r\n                        this.renderInMoreThanOneColumn()\r\n                    }\r\n\r\n                    { this.renderSceneChangeDialog() }\r\n                    { this.renderEditFolderDialog() }\r\n                    { this.renderMoveDialog() }\r\n                    { this.renderDeleteDialog() }\r\n                    { this.renderAddFolderDialog() }\r\n                    { this.renderExportImportDialog() }\r\n                    { this.renderError() }\r\n                </div>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withWidth()(withStyles(styles)(withTheme(App)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Sentry from '@sentry/browser';\nimport * as SentryIntegrations from '@sentry/integrations';\nimport { MuiThemeProvider} from '@material-ui/core/styles';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\nimport { version } from '../package.json';\n\nimport theme from '@iobroker/adapter-react/Theme';\nimport Utils from '@iobroker/adapter-react/Components/Utils';\n\nwindow.adapterName = 'scenes';\n\nconsole.log('iobroker.' + window.adapterName + '@' + version);\nlet themeName = Utils.getThemeName();\n\nfunction build() {\n    return ReactDOM.render(<MuiThemeProvider theme={ theme(themeName) }>\n        <App onThemeChange={_theme => {\n            themeName = _theme;\n            build();\n        }}/>\n    </MuiThemeProvider>, document.getElementById('root'));\n}\n\n// if not local development\nif (window.location.host !== 'localhost:3000') {\n    Sentry.init({\n        dsn: 'https://89fc6260a1af4df68f9db767a603b7e5@sentry.iobroker.net/86',\n        release: 'iobroker.' + window.adapterName + '@' + version,\n        integrations: [\n            new SentryIntegrations.Dedupe()\n        ]\n    });\n}\n\nbuild();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n// Service worker works only with HTTPS and valid certificates, so do not enable it\nserviceWorker.unregister();\n\n"],"sourceRoot":""}