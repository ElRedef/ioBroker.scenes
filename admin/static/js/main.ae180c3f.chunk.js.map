{"version":3,"sources":["serviceWorker.js","components/SceneForm.js","components/SceneMembersForm.js","components/ExportImportDialog.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","SceneForm","props","setStateWithParent","newState","cb","setState","updateScene","common","native","sceneObj","scene","JSON","parse","stringify","members","state","showDialog","sceneId","_id","this","key","socket","dialogName","title","I18n","t","selected","onOk","onClose","name","on","className","classes","editItem","onTrue","right","Switch","checked","trigger","id","onChange","e","target","condition","Grid","container","spacing","item","xs","TextField","fullWidth","InputLabelProps","shrink","label","value","onClick","FormControl","InputLabel","Select","MenuItem","cron","Box","clsx","columnContainer","height","scroll","desc","width100","engine","instances","map","replace","min","burstIntervall","helperText","type","parseInt","FormControlLabel","style","paddingTop","control","Checkbox","virtualGroup","onFalse","enabled","renderOnTrueFalse","renderSelectIdDialog","React","Component","withStyles","theme","alignRight","textAlign","buttonsContainer","margin","width","display","flexDirection","float","overflowY","overflowX","paddingRight","marginBottom","color","palette","p","background","SceneMembersForm","memberStateChange","states","val","objectTypes","undefined","parseFloat","createSceneMembers","ids","filter","find","length","openedMembers","objectNames","Promise","all","getObject","then","obj","template","setIfTrue","setIfFalse","stopAllDelays","disabled","delay","Utils","getObjectNameFromObj","language","getLanguage","onFalseEnabled","push","forEach","subscribeState","deleteSceneMember","index","splice","deleteDialog","unsubscribeState","renderMember","member","_valStr","toString","setIfTrueTolerance","Math","abs","memberTrueFalse","memberTrue","setIfFalseTolerance","memberFalse","memberUncertain","opened","includes","Paper","memberCard","memberToolbar","memberTitle","memberDesc","memberButtons","IconButton","pos","indexOf","sort","localStorage","setItem","size","marginLeft","aria-label","setValue","doNotOverwrite","smallOnTrueFalse","stateValueTrue","stateValueFalse","getItemStyle","isDragging","draggableStyle","userSelect","getListStyle","isDraggingOver","render","sceneState","selectedSceneChanged","engineId","Toolbar","gutters","guttersZero","Typography","variant","sceneTitle","instanceNotActive","sceneSubTitle","sceneTrue","sceneFalse","sceneUncertain","testButtons","width100WithButton","defaultValue","onKeyUp","keyCode","onWriteScene","writeSceneState","sceneEnabled","Button","btnTestTrue","btnTestFalse","onDragEnd","droppableId","provided","snapshot","droppableProps","ref","innerRef","i","draggableId","draggableProps","dragHandleProps","placeholder","renderDeleteDialog","getItem","bind","readObjects","result","destination","source","removed","results","resolve","that","updateSceneMembers","multiSelect","Dialog","open","DialogTitle","changed","borderRadius","padding","fontSize","fontWeight","backgroundColor","flexGrow","marginRight","position","content","top","fontStyle","minHeight","minWidth","opacity","ExportImportDialog","text","error","toast","Snackbar","autoHideDuration","Alert","severity","aria-labelledby","maxWidth","fullScreen","aria-describedby","isImport","DialogContent","divWithoutTitle","autoFocus","mode","onLoad","editor","codeEditor","focus","themeType","newValue","readOnly","editorProps","$blockScrolling","DialogActions","copy","setTimeout","renderToast","border","getFolderPrefix","split","shift","pop","join","FORBIDDEN_CHARS","App","sceneSwitch","event","scenes","selectedSceneId","selectedSceneData","setObject","refreshData","addSceneToFolderPrefix","folderPrefix","noRefresh","oldId","delObject","console","log","changeSelectedScene","renderTreeScene","level","search","ListItem","paddingLeft","button","ListItemIcon","root","itemIconRoot","itemIcon","ListItemText","primary","listItemTitle","secondary","listItemSubTitle","ListItemSecondaryAction","changingScene","CircularProgress","deleteScene","Object","keys","nextId","translations","require","setTranslations","setLanguage","navigator","userLanguage","substring","toLowerCase","query","parts","decodeURIComponent","getUrlQuery","port","host","iobForceHost","lang","systemLang","ready","folders","addFolderDialog","addFolderDialogTitle","editFolderDialog","editFolderDialogTitle","showSearch","moveDialog","newFolder","exportDialog","importDialog","getSystemConfig","systemConfig","getAdapterInstances","adapterName","catch","showError","values","subFolders","prefix","currentFolder","parent","folder","findFolder","getObjectView","_scenes","buildTree","getData","from","user","ts","acl","parentFolder","_parentFolder","newName","newSelectedId","promises","newId","isIdUnique","getFolderList","subFolder","concat","noGutters","folderItem","toggleFolder","itemIconFolder","createScene","getNewSceneId","editFolderDialogTitleOrigin","a","b","renderTree","List","list","leftMenuItem","parentId","role","read","write","def","astro","matches","ignoreUnsaved","confirmCb","sceneChangeDialog","buttonIcon","addFolder","isUnique","renameFolder","writeScene","importedScene","textInput","toolbarButtons","cloneScene","component","Container","fullWidthContainer","renderListToolbar","heightMinusToolbar","settingsBackground","renderSceneToolbar","membersCell","renderSceneChangeDialog","renderEditFolderDialog","renderMoveDialog","renderAddFolderDialog","renderExportImportDialog","renderError","themeName","GenericApp","tabContent","overflow","cursor","buttonsContainer1","paddingBottom","withTheme","version","getThemeName","Sentry","dsn","release","integrations","SentryIntegrations","build","ReactDOM","onThemeChange","_theme","document","getElementById","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.ae180c3f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nconst styles = theme => ({\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    width100: {\r\n        width: '100%'\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    editItem: {\r\n        display: 'block',\r\n        marginBottom: theme.spacing(2),\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    onTrue: {\r\n        background: 'lightgreen',\r\n    },\r\n    onFalse: {\r\n        background: '#ff9999',\r\n    },\r\n});\r\n\r\nclass SceneForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        this.state = {\r\n            common: sceneObj.common,\r\n            native: sceneObj.native,\r\n            showDialog: null,\r\n            sceneId: props.scene._id,\r\n        };\r\n    }\r\n\r\n    setStateWithParent = (newState, cb) => {\r\n        this.setState(newState, () =>\r\n            this.props.updateScene(newState.common, newState.native, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n                key=\"selectDialog\"\r\n                socket={ this.props.socket }\r\n                dialogName=\"memberEdit\"\r\n                title={ I18n.t('Select for ') }\r\n                selected={ null }\r\n                onOk={ this.state.showDialog }\r\n                onClose={ () => this.setState({showDialog: false}) }\r\n            /> : null;\r\n    };\r\n\r\n    renderOnTrueFalse(name) {\r\n        const on = this.state.native[name];\r\n\r\n        return [\r\n            <div key=\"switch\" className={ this.props.classes.editItem }>\r\n                <h4>{ on === this.state.native.onTrue ? I18n.t('Trigger for TRUE') : I18n.t('Trigger for FALSE') }\r\n                    <span className={ this.props.classes.right }>\r\n                        <Switch checked={ !!on.trigger.id }\r\n                                onChange={ e => {\r\n                                    if (e.target.checked) {\r\n                                        this.setState({\r\n                                            showDialog: id => {\r\n                                                const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                native[name].trigger.id = id;\r\n                                                native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                                this.setStateWithParent({native});\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                        native[name].trigger.id = '';\r\n                                        this.setStateWithParent({native});\r\n                                    }\r\n                                } }\r\n                        />\r\n                    </span>\r\n                </h4>\r\n            </div>,\r\n            <div key=\"id\" className={ this.props.classes.editItem }>\r\n                {on.trigger.id ?\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={8}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Trigger ID') }\r\n                                value={ on.trigger.id }\r\n                                onClick={ () => {\r\n                                    this.setState({\r\n                                        showDialog: id => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.id = id;\r\n                                            native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                            this.setStateWithParent({native});\r\n                                        }\r\n                                    });\r\n                                } }\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2}>\r\n                            <FormControl>\r\n                                <InputLabel shrink={ true }>{ I18n.t('Condition') }</InputLabel>\r\n                                <Select value={ on.trigger.condition || '==' }\r\n                                        onChange={ e => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.condition = e.target.value;\r\n                                            this.setStateWithParent({native});\r\n                                        } }\r\n                                >\r\n                                    <MenuItem value=\"==\">==</MenuItem>\r\n                                    <MenuItem value=\"!=\">!=</MenuItem>\r\n                                    <MenuItem value=\">\">&gt;</MenuItem>\r\n                                    <MenuItem value=\"<\">&lt;</MenuItem>\r\n                                    <MenuItem value=\">=\">&gt;=</MenuItem>\r\n                                    <MenuItem value=\"<=\">&lt;=</MenuItem>\r\n                                    <MenuItem value=\"update\">{ I18n.t('on update') }</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps= {{shrink: true} } label={ I18n.t('Value') }\r\n                                value={ on.trigger.value || '' }\r\n                                onChange={ e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native[name].trigger.value = e.target.value;\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    : null}\r\n            </div>,\r\n            <div key=\"cron\" className={ this.props.classes.editItem }>\r\n                <TextField\r\n                    fullWidth\r\n                    InputLabelProps={{shrink: true}}\r\n                    label={ name === 'onTrue' ? I18n.t('On time (CRON expression)') : I18n.t('Off time (CRON expression)')}\r\n                    value={ on.cron || '' }\r\n                    onChange={e => {\r\n                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                        native[name].cron = e.target.value;\r\n                        this.setStateWithParent({native});\r\n                    }}\r\n                />\r\n            </div>\r\n        ];\r\n    }\r\n\r\n    render() {\r\n        let result = <Box key=\"sceneForm\" className={ clsx(this.props.classes.columnContainer, this.props.classes.height) }>\r\n            <Box className={ this.props.classes.scroll }>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene name') }\r\n                        value={ this.state.common.name }\r\n                        onChange={ e => {\r\n                           const common = JSON.parse(JSON.stringify(this.state.common));\r\n                           common.name = e.target.value;\r\n                           this.setStateWithParent({common});\r\n                       } }/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene description') }\r\n                        value={ this.state.common.desc }\r\n                        onChange={ e => {\r\n                               const common = JSON.parse(JSON.stringify(this.state.common));\r\n                               common.desc = e.target.value;\r\n                               this.setStateWithParent({common});\r\n                           }\r\n                        }/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={6}>\r\n                            <FormControl className={this.props.classes.width100}>\r\n                                <InputLabel shrink={true}>{ I18n.t('Instance') }</InputLabel>\r\n                                <Select\r\n                                    value={ this.state.common.engine }\r\n                                    onChange={e => {\r\n                                        const common = JSON.parse(JSON.stringify(this.state.common));\r\n                                        common.engine = e.target.value;\r\n                                        this.setStateWithParent({common});\r\n                                    }}\r\n                                >\r\n                                    { this.props.instances.map(id => <MenuItem key={ id } value={ id }>{ id.replace('system.adapter.', '') }</MenuItem>) }\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Interval between commands') }\r\n                                min={ 0 }\r\n                                value={ this.state.native.burstIntervall || 0 }\r\n                                helperText=\"ms\"\r\n                                type=\"number\"\r\n                                onChange={e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native.burstIntervall = parseInt(e.target.value, 10);\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={6}>\r\n                            <FormControlLabel style={{paddingTop: 10}} label={I18n.t('Virtual group')} control={\r\n                                <Checkbox checked={this.state.native.virtualGroup}\r\n                                          onChange={e => {\r\n                                              const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                              native.virtualGroup = e.target.checked;\r\n                                              this.setStateWithParent({native});\r\n                                          }}/>\r\n                            }/>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            { !this.state.native.virtualGroup ?\r\n                                <FormControlLabel\r\n                                    style={{paddingTop: 10}}\r\n                                    label={I18n.t('Set value if false')}\r\n                                    control={\r\n                                          <Checkbox\r\n                                              checked={ this.state.native.onFalse.enabled }\r\n                                                    onChange={e => {\r\n                                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                        native.onFalse.enabled = e.target.checked;\r\n                                                        this.setStateWithParent({native});\r\n                                                    }}/>}\r\n                                />\r\n                                : null}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                { !this.state.native.virtualGroup ? this.renderOnTrueFalse('onTrue') : null }\r\n                { !this.state.native.virtualGroup && this.state.native.onFalse.enabled ? this.renderOnTrueFalse('onFalse') : null }\r\n            </Box>\r\n        </Box>;\r\n\r\n        return [\r\n            result,\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateScene: PropTypes.func.isRequired,\r\n    instances: PropTypes.array,\r\n};\r\n\r\nexport default withStyles(styles)(SceneForm);","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n// own components\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\n// icons\r\nimport {AiOutlineClockCircle as IconClock} from 'react-icons/ai';\r\nimport {MdDelete as IconDelete} from 'react-icons/md';\r\nimport {MdModeEdit as IconEdit} from 'react-icons/md';\r\nimport {IoMdClose as IconClose} from 'react-icons/io';\r\nimport {MdAdd as IconAdd} from 'react-icons/md';\r\nimport {MdPlayArrow as IconPlay} from 'react-icons/md';\r\n\r\nconst TRUE_COLOR      = '#90ee90';\r\nconst FALSE_COLOR     = '#ff9999';\r\nconst TRUE_DARK_COLOR      = '#528952';\r\nconst FALSE_DARK_COLOR     = '#774747';\r\nconst UNCERTAIN_COLOR = '#bfb7be';\r\n\r\nconst styles = theme => ({\r\n    memberTrueFalse: {\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n        fontSize: 'initial',\r\n        fontWeight: 'initial',\r\n        margin: '0 ' + theme.spacing(1) + 'px',\r\n        textAlign: 'right',\r\n        //float: 'right'\r\n    },\r\n    memberTrue: {\r\n        backgroundColor: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    memberFalse: {\r\n        backgroundColor: 'pink',\r\n    },\r\n    memberUncertain: {\r\n        color: '#FFF',\r\n        backgroundColor: '#808080',\r\n    },\r\n    memberCard: {\r\n        padding: 4,\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    guttersZero: {\r\n        padding: 0,\r\n    },\r\n    sceneTitle: {\r\n        flexGrow: 1,\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    sceneSubTitle: {\r\n        fontSize: 'small',\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n    },\r\n    sceneTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    sceneFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n    },\r\n    sceneUncertain: {\r\n        background: UNCERTAIN_COLOR,\r\n    },\r\n    btnTestTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n        marginRight: theme.spacing(1),\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    btnTestFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    smallOnTrueFalse: {\r\n        fontSize: 'small',\r\n        textAlign: 'right',\r\n        width: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    stateValueTrue: {\r\n        color: '#60a060',\r\n        fontWeight: 'bold',\r\n    },\r\n    stateValueFalse: {\r\n        color: '#c15454',\r\n        fontWeight: 'bold',\r\n    },\r\n    changed: {\r\n        position: 'relative',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            width: 6,\r\n            height: 6,\r\n            borderRadius: 6,\r\n            background: '#FF0000',\r\n            position: 'absolute',\r\n            top: 5,\r\n            right: 5,\r\n        },\r\n    },\r\n    memberDesc: {\r\n        display: 'inline-block',\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n    },\r\n    memberTitle: {\r\n        fontSize: 14,\r\n        fontWeight: 'bold',\r\n    },\r\n    memberToolbar: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        minHeight: 72,\r\n    },\r\n    memberButtons: {\r\n        textAlign: 'right',\r\n        position: 'absolute',\r\n        top: 2,\r\n        right: 2,\r\n    },\r\n    width100WithButton: {\r\n        width: 'calc(100% - 48px)',\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n    testButtons: {\r\n        minHeight: 48,\r\n    },\r\n    setValue: {\r\n        width: 'calc(50% - ' + theme.spacing(1) + 'px)',\r\n        minWidth: 100,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    disabled: {\r\n        opacity: 0.3\r\n    },\r\n    instanceNotActive: {\r\n        marginLeft: theme.spacing(1),\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n        color: '#FF0000',\r\n    }\r\n});\r\n\r\nclass SceneMembersForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let openedMembers = window.localStorage.getItem('Scenes.openedMembers') || '[]';\r\n        try {\r\n            openedMembers = JSON.parse(openedMembers);\r\n        } catch (e) {\r\n            openedMembers = [];\r\n        }\r\n\r\n        this.state = {\r\n            states: {},\r\n            openedMembers,\r\n            objectTypes: {},\r\n            objectNames: {},\r\n            members: JSON.parse(JSON.stringify(props.members)),\r\n            writeSceneState: '',\r\n            deleteDialog: null,\r\n            onFalseEnabled: props.onFalseEnabled,\r\n            virtualGroup: props.virtualGroup,\r\n            sceneEnabled: props.sceneEnabled,\r\n            selectedSceneChanged: props.selectedSceneChanged,\r\n            engineId: props.engineId,\r\n        };\r\n\r\n        this.engineId = this.state.engineId;\r\n\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.readObjects()\r\n            .then(newState =>\r\n                this.setState(newState, () => {\r\n                    // subscribe on scene state\r\n                    this.props.socket.subscribeState(this.props.sceneId, this.memberStateChange);\r\n                    this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n                    // subscribe on all states\r\n                    this.state.members.forEach(member =>\r\n                        member.id && this.props.socket.subscribeState(member.id, this.memberStateChange))\r\n                }));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.unsubscribeState(this.props.sceneId, this.memberStateChange);\r\n        this.state.engineId && this.props.socket.unsubscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n        this.state.members.forEach(member =>\r\n            this.props.socket.unsubscribeState(member.id, this.memberStateChange));\r\n    }\r\n    \r\n    static getDerivedStateFromProps(props, state) {\r\n        const newState = {};\r\n        let changed = false;\r\n\r\n        if (props.onFalseEnabled !== state.onFalseEnabled) {\r\n            newState.onFalseEnabled = props.onFalseEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.virtualGroup !== state.virtualGroup) {\r\n            newState.virtualGroup = props.virtualGroup;\r\n            changed = true;\r\n        }\r\n        if (props.selectedSceneChanged !== state.selectedSceneChanged) {\r\n            newState.selectedSceneChanged = props.selectedSceneChanged;\r\n            changed = true;\r\n        }\r\n        if (props.sceneEnabled !== state.sceneEnabled) {\r\n            newState.sceneEnabled = props.sceneEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.engineId !== state.engineId) {\r\n            newState.engineId = props.engineId;\r\n            changed = true;\r\n        }\r\n\r\n        return changed ? newState : null;\r\n    }\r\n\r\n    onDragEnd(result) {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n        const members = JSON.parse(JSON.stringify(this.state.members));\r\n        const [removed] = members.splice(result.source.index, 1);\r\n        members.splice(result.destination.index, 0, removed);\r\n\r\n        this.setStateWithParent({members});\r\n    }\r\n\r\n    readObjects() {\r\n        if (this.state.members) {\r\n            return Promise.all(\r\n                this.state.members.map(member =>\r\n                    this.props.socket.getObject(member.id)))\r\n                .then(results => {\r\n                    const objectTypes = {};\r\n                    const objectNames = {};\r\n                    results.forEach(obj => {\r\n                        if (obj && obj.common && obj.common.type) {\r\n                            objectTypes[obj._id] = obj.common.type;\r\n                            objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, true);\r\n                        }\r\n                    });\r\n\r\n                    return {objectTypes, objectNames};\r\n                });\r\n        } else {\r\n            return Promise.resolve({});\r\n        }\r\n    }\r\n\r\n    memberStateChange = (id, state) => {\r\n        const states = JSON.parse(JSON.stringify(this.state.states));\r\n        states[id] = state ? state.val : null;\r\n        const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n\r\n        if (!objectTypes[id] && states[id] !== null && states[id] !== undefined) {\r\n            objectTypes[id] = typeof states[id];\r\n        }\r\n\r\n        if (objectTypes[id] === 'boolean') {\r\n            if (states[id] === 'true') {\r\n                states[id] = true;\r\n            }\r\n            if (states[id] === 'false') {\r\n                states[id] = false;\r\n            }\r\n        } else if (objectTypes[id] === 'number') {\r\n            states[id] = parseFloat(states[id]);\r\n        }\r\n\r\n        this.setState({states, objectTypes});\r\n    };\r\n    \r\n    createSceneMembers = ids => {\r\n        this.setState({showDialog: false}, () => {\r\n            // filter out yet existing IDs\r\n            ids = ids.filter(id => !this.state.members.find(item => item.id === id));\r\n            if (ids.length) {\r\n                const openedMembers = [...this.state.openedMembers];\r\n                const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n                const objectNames = JSON.parse(JSON.stringify(this.state.objectNames));\r\n                const members     = JSON.parse(JSON.stringify(this.state.members));\r\n\r\n                Promise.all(ids.map(id =>\r\n                    // Read type of state\r\n                    this.props.socket.getObject(id)\r\n                        .then(obj => {\r\n                            const template = {\r\n                                id,\r\n                                setIfTrue: null,\r\n                                setIfFalse: null,\r\n                                stopAllDelays: true,\r\n                                desc: null,\r\n                                disabled: false,\r\n                                delay: 0\r\n                            };\r\n\r\n                            objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, true);\r\n\r\n                            if (obj && obj.common && obj.common.type) {\r\n                                objectTypes[id] = obj.common.type;\r\n\r\n                                if (objectTypes[id] === 'boolean') {\r\n                                    template.setIfTrue = true;\r\n                                    if (this.state.onFalseEnabled) {\r\n                                        template.setIfFalse = false;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            members.push(template);\r\n\r\n                            // open added state\r\n                            openedMembers.push(id);\r\n                        })\r\n                        .then(() => this.setStateWithParent({objectTypes, objectNames, members, openedMembers}, () =>\r\n                            // Subscribe on all new members\r\n                            ids.forEach(id => this.props.socket.subscribeState(id, this.memberStateChange)))\r\n                        )\r\n                    )\r\n                );\r\n            } else {\r\n                // Show alert\r\n            }\r\n        });\r\n    };\r\n\r\n    deleteSceneMember = index => {\r\n        let members = JSON.parse(JSON.stringify(this.state.members));\r\n        const id = members[index].id;\r\n        members.splice(index, 1);\r\n        \r\n        this.setStateWithParent({members, deleteDialog: null}, () =>\r\n            this.props.socket.unsubscribeState(id, this.memberStateChange));\r\n    };\r\n\r\n    setStateWithParent(newState, cb) {\r\n        const that = this;\r\n        this.setState(newState, () =>\r\n            this.props.updateSceneMembers(that.state.members, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n            key=\"selectDialogMembers\"\r\n            socket={ this.props.socket }\r\n            dialogName=\"memberEdit\"\r\n            multiSelect={ true }\r\n            title={ I18n.t('Select for ') }\r\n            selected={ null }\r\n            onOk={ id => this.createSceneMembers(id) }\r\n            onClose={ () => this.setState({showDialog: false}) }\r\n        /> : null;\r\n    }\r\n    \r\n    renderDeleteDialog() {\r\n        if (this.state.deleteDialog === null) {\r\n            return;\r\n        }\r\n\r\n        return <Dialog\r\n            open={ true }\r\n            key=\"deleteDialog\"\r\n            onClose={ () =>\r\n                this.setState({deleteDialog: null}) }\r\n            >\r\n                <DialogTitle>{ I18n.t('Are you sure for delete this state?') }</DialogTitle>\r\n                <div className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                    <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: null}) }>\r\n                        {I18n.t('Cancel')}\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={ e => this.deleteSceneMember(this.state.deleteDialog) }>\r\n                        { I18n.t('Delete') }\r\n                    </Button>\r\n                </div>\r\n            </Dialog>;\r\n    };\r\n\r\n    renderMember = (member, index) => {\r\n        let value = null;\r\n        const classes = this.props.classes;\r\n        if (this.state.states[member.id] !== undefined && this.state.states[member.id] !== null) {\r\n            let _valStr = this.state.states[member.id].toString();\r\n\r\n            if (_valStr === 'true') {\r\n                _valStr = 'TRUE';\r\n            } else if (_valStr === 'false') {\r\n                _valStr = 'FALSE';\r\n            }\r\n\r\n            if (member.setIfTrueTolerance && Math.abs(this.state.states[member.id] - member.setIfTrue) <= member.setIfTrueTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (this.state.states[member.id] === member.setIfTrue) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && member.setIfFalseTolerance && Math.abs(this.state.states[member.id] - member.setIfFalse) <= member.setIfFalseTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && this.state.states[member.id] === member.setIfFalse) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberUncertain) }>{ _valStr }</div>;\r\n            }\r\n        }\r\n\r\n        let setIfTrue = member.setIfTrue;\r\n        if (setIfTrue === undefined || setIfTrue === null) {\r\n            setIfTrue = '';\r\n        } else {\r\n            if (setIfTrue === true) {\r\n                setIfTrue = 'TRUE';\r\n            } else if (setIfTrue === false) {\r\n                setIfTrue = 'FALSE';\r\n            } else {\r\n                if (member.setIfTrueTolerance) {\r\n                    setIfTrue = setIfTrue + '±' + member.setIfTrueTolerance;\r\n                } else {\r\n                    setIfTrue = setIfTrue.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        let setIfFalse = member.setIfFalse;\r\n        if (setIfFalse === undefined || setIfFalse === null) {\r\n            setIfFalse = '';\r\n        } else {\r\n            if (setIfFalse === true) {\r\n                setIfFalse = 'TRUE';\r\n            } else if (setIfFalse === false) {\r\n                setIfFalse = 'FALSE';\r\n            } else {\r\n                if (member.setIfFalseTolerance) {\r\n                    setIfFalse = setIfFalse + '±' + member.setIfFalseTolerance;\r\n                } else {\r\n                    setIfFalse = setIfFalse.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        const opened = this.state.openedMembers.includes(member.id);\r\n\r\n        return <Paper key={ member.id } className={ clsx(classes.memberCard, member.disabled && classes.disabled) }>\r\n            <div className={ classes.memberToolbar }>\r\n                <div className={ classes.memberTitle }>{ member.id }</div>\r\n                <div className={ classes.memberDesc }>{ member.desc || this.state.objectNames[member.id] || '' }</div>\r\n                <div className={ classes.memberButtons }>\r\n                    <IconButton title={ I18n.t('Edit') } onClick={ () => {\r\n                        const openedMembers = [...this.state.openedMembers];\r\n                        const pos = openedMembers.indexOf(member.id);\r\n                        if (pos !== -1) {\r\n                            openedMembers.splice(pos, 1);\r\n                        } else {\r\n                            openedMembers.push(member.id);\r\n                            openedMembers.sort();\r\n                        }\r\n                        window.localStorage.setItem('Scenes.openedMembers', JSON.stringify(openedMembers));\r\n                        this.setState({openedMembers});\r\n                    }}>\r\n                        { opened ? <IconClose/> : <IconEdit/> }\r\n                    </IconButton>\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 5 }} aria-label=\"Delete\" title={I18n.t('Delete')}\r\n                        onClick={ () => this.setState({deleteDialog: index}) }>\r\n                        <IconDelete/>\r\n                    </IconButton>\r\n                    <Switch\r\n                        checked={ !member.disabled }\r\n                        onChange={ e => {\r\n                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                            members[index].disabled = !e.target.checked;\r\n                            this.setStateWithParent({members});\r\n                        }}\r\n                        name={ member.id }\r\n                    />\r\n                    { value }\r\n                </div>\r\n            </div>\r\n            <div>{ member.desc } { !opened && member.delay ?\r\n                <span> <IconClock/> {member.delay + I18n.t('ms')}</span> : null }</div>\r\n            {\r\n                opened ?\r\n                    <div>\r\n                        {/*<Box className={classes.p}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}} label={I18n.t('Description')}\r\n                                value={member.desc || ''}\r\n                                onChange={e => {\r\n                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                    members[index].desc = e.target.value;\r\n                                    this.setStateWithParent({members});\r\n                                }}\r\n                            />\r\n                        </Box>*/ }\r\n                        { !this.state.virtualGroup ? <Box className={ classes.p }>\r\n                            { this.state.objectTypes[member.id] === 'boolean' ?\r\n                                <FormControlLabel\r\n                                    control={<Checkbox\r\n                                        checked={ !!member.setIfTrue }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].setIfTrue = e.target.checked;\r\n                                            this.setStateWithParent({members});\r\n                                        } }/>\r\n                                    }\r\n                                    label={ I18n.t('Set if TRUE') }\r\n                                />\r\n                                :\r\n                                <Box className={ classes.p }>\r\n                                    <TextField\r\n                                        InputLabelProps={ {shrink: true} }\r\n                                        label={ I18n.t('Set if TRUE') }\r\n                                        value={ member.setIfTrue === undefined ? '' : member.setIfTrue }\r\n                                        className={ classes.setValue }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            if (this.state.objectTypes[member.id] === 'number') {\r\n                                                members[index].setIfTrue = parseFloat(e.target.value.replace(',', '.'));\r\n                                            } else {\r\n                                                members[index].setIfTrue = e.target.value;\r\n                                            }\r\n\r\n                                            this.setStateWithParent({members});\r\n                                         } }/>\r\n                                    <TextField\r\n                                        InputLabelProps={ {shrink: true} }\r\n                                        label={ '± ' + I18n.t('Tolerance for TRUE') }\r\n                                        value={ member.setIfTrueTolerance === undefined ? '' : member.setIfTrueTolerance }\r\n                                        className={ classes.setValue }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].setIfTrueTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                                            this.setStateWithParent({members});\r\n                                        } }/>\r\n                                </Box>\r\n                            }\r\n                        </Box> : null }\r\n                        { !this.state.virtualGroup && this.state.onFalseEnabled ?\r\n                            <Box className={ classes.p }>\r\n                                {\r\n                                    this.state.objectTypes[member.id] === 'boolean' ?\r\n                                        <FormControlLabel\r\n                                            control={<Checkbox checked={ !!member.setIfFalse } onChange={ e => {\r\n                                                const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                members[index].setIfFalse = e.target.checked;\r\n                                                this.setStateWithParent({members});\r\n                                            } }/>}\r\n                                            label={ I18n.t('Set if FALSE') }\r\n                                        />\r\n                                        :\r\n                                        <Box className={ classes.p }>\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                InputLabelProps={ {shrink: true} }\r\n                                                label={ I18n.t('Set if FALSE') }\r\n                                                value={ member.setIfFalse === undefined ? '' : member.setIfFalse }\r\n                                                className={ classes.setValue }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    if (this.state.objectTypes[member.id] === 'number') {\r\n                                                        members[index].setIfFalse = parseFloat(e.target.value.replace(',', '.'));\r\n                                                    } else {\r\n                                                        members[index].setIfFalse = e.target.value;\r\n                                                    }\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                            <TextField\r\n                                                InputLabelProps={ {shrink: true} }\r\n                                                label={ '± ' + I18n.t('Tolerance for FALSE') }\r\n                                                value={ member.setIfFalseTolerance === undefined ? '' : member.setIfFalseTolerance }\r\n                                                className={ classes.setValue }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].setIfFalseTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                        </Box>\r\n                                }\r\n                            </Box>\r\n                            : null}\r\n                        <Box className={ classes.p }>\r\n                            <Grid container spacing={ 4 }>\r\n                                <Grid item xs={ 4 }>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        InputLabelProps={{shrink: true}}\r\n                                        label={I18n.t('Delay (ms)')}\r\n                                        value={ member.delay || 0}\r\n                                        min={ 0 }\r\n                                        type=\"number\"\r\n                                        onChange={e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].delay = parseInt(e.target.value, 10);\r\n                                            this.setStateWithParent({members});\r\n                                        }}/>\r\n                                </Grid>\r\n                                <Grid item xs={ 8 }>\r\n                                    <FormControlLabel\r\n                                        label={ I18n.t('Stop already started commands') }\r\n                                        control={\r\n                                            <Checkbox\r\n                                                checked={ member.stopAllDelays }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].stopAllDelays = e.target.checked;\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                    }/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                        <Box className={ classes.p }>\r\n                            <FormControlLabel\r\n                                label={ I18n.t('Do not overwrite state if it has the required value') }\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={ !!member.doNotOverwrite }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].doNotOverwrite = e.target.checked;\r\n                                            this.setStateWithParent({members});\r\n                                        } }\r\n                                    />\r\n                            }/>\r\n                        </Box>\r\n                    </div> :\r\n                    (!this.state.virtualGroup ? <div className={ classes.smallOnTrueFalse }>\r\n                        { I18n.t('Set if TRUE') + ': ' } <span className={ classes.stateValueTrue }>{ setIfTrue }</span>\r\n                        { this.state.onFalseEnabled ? ' / ' + I18n.t('Set if FALSE') + ': ' : null}\r\n                        { this.state.onFalseEnabled ? <span className={ classes.stateValueFalse }>{ setIfFalse }</span> : null}\r\n                    </div> : <div style={{height: 8}}/>)\r\n            }\r\n        </Paper>\r\n    };\r\n\r\n    onWriteScene(val) {\r\n        if (val === 'true') {\r\n            val = true;\r\n        } else if (val === 'false') {\r\n            val = false;\r\n        } else if (parseFloat(val.replace(',', '.')).toString() === val) {\r\n            val = parseFloat(val.replace(',', '.'));\r\n        }\r\n\r\n        this.props.socket.setState(this.props.sceneId, val);\r\n    }\r\n\r\n    getItemStyle = (isDragging, draggableStyle) => ({\r\n        // some basic styles to make the items look a bit nicer\r\n        userSelect: 'none',\r\n        background: isDragging ? 'lightgreen' : 'inherit',\r\n\r\n        // styles we need to apply on draggables\r\n        ...draggableStyle\r\n    });\r\n\r\n    getListStyle = isDraggingOver => ({\r\n        background: isDraggingOver ? 'lightblue' : 'inherit',\r\n    });\r\n\r\n    render = () => {\r\n        let sceneState = this.state.states[this.props.sceneId];\r\n        if (this.state.selectedSceneChanged) {\r\n            sceneState = I18n.t('Save scene before test');\r\n        } else if (sceneState === undefined || sceneState === null) {\r\n            sceneState = '';\r\n        }\r\n\r\n        if (this.engineId !== this.state.engineId) {\r\n            this.engineId && this.props.socket.unsubscribeState(this.engineId + '.alive', this.memberStateChange);\r\n            this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n            this.engineId = this.state.engineId;\r\n        }\r\n\r\n        let result = <div key=\"SceneMembersForm\" className={ clsx(this.props.classes.height, this.props.classes.columnContainer) }>\r\n            <Toolbar classes={{ gutters: this.props.classes.guttersZero }}>\r\n                <Typography variant=\"h6\" className={ clsx(this.props.classes.sceneTitle) } >\r\n                    { I18n.t('Scene states') }{ !this.state.states[this.state.engineId + '.alive'] ? <span className={ this.props.classes.instanceNotActive }>{ I18n.t('Instance not active') }</span> : ''}\r\n                    <br/>\r\n                    <span className={ clsx(\r\n                        this.props.classes.sceneSubTitle,\r\n                        !this.state.virtualGroup && sceneState === true && this.props.classes.sceneTrue,\r\n                        !this.state.virtualGroup && sceneState === false && this.props.classes.sceneFalse,\r\n                        !this.state.virtualGroup && sceneState === 'uncertain' && this.props.classes.sceneUncertain,\r\n                    ) }>{ I18n.t('Scene state:') } { sceneState.toString() }</span>\r\n                </Typography>\r\n                <IconButton title={I18n.t('Add new state')} onClick={() => this.setState({showDialog: true})}>\r\n                    <IconAdd/>\r\n                </IconButton>\r\n            </Toolbar>\r\n            <div className={ clsx(this.props.classes.testButtons, this.props.classes.width100) }>\r\n                {  !this.state.selectedSceneChanged && this.state.virtualGroup ? <TextField\r\n                    className={ this.props.classes.width100WithButton }\r\n                    label={ I18n.t('Write to virtual group') }\r\n                    defaultValue={ sceneState }\r\n                    onKeyUp={e => e.keyCode === 13 && this.onWriteScene(this.state.writeSceneState)}\r\n                    onChange={e => this.setState({writeSceneState: e.target.value}) }\r\n                /> : null}\r\n                { !this.state.selectedSceneChanged && this.state.virtualGroup ? <IconButton\r\n                    onClick={e => this.onWriteScene(this.state.writeSceneState) }\r\n                ><IconPlay/></IconButton> : null}\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && !this.state.virtualGroup ? <Button\r\n                    className={ this.props.classes.btnTestTrue }\r\n                    onClick={ () => this.onWriteScene(true) }\r\n                ><IconPlay/>{ I18n.t('Test TRUE') }</Button> : null }\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && !this.state.virtualGroup && this.state.onFalseEnabled ? <Button\r\n                    className={ this.props.classes.btnTestFalse }\r\n                    onClick={ () => this.onWriteScene(false) }\r\n                ><IconPlay/>{ I18n.t('Test FALSE') }</Button> : null }\r\n            </div>\r\n            <DragDropContext onDragEnd={ this.onDragEnd }>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div className={ this.props.classes.scroll }\r\n                             {...provided.droppableProps}\r\n                             ref={ provided.innerRef }\r\n                             style={ this.getListStyle(snapshot.isDraggingOver) }\r\n                        >\r\n                            { this.state.members.map((member, i) =>\r\n                                <Draggable key={ member.id } draggableId={ member.id } index={ i }>\r\n                                    {(provided, snapshot) =>\r\n                                        <div\r\n                                            ref={ provided.innerRef }\r\n                                            {...provided.draggableProps }\r\n                                            {...provided.dragHandleProps }\r\n                                            style={ this.getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            ) }\r\n                                        >{ this.renderMember(member, i) }</div>}\r\n                                </Draggable>\r\n                            )}\r\n                            { provided.placeholder }\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>;\r\n\r\n        return [\r\n            result,\r\n            this.renderDeleteDialog(),\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneMembersForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateSceneMembers: PropTypes.func,\r\n    sceneId: PropTypes.string,\r\n    onFalseEnabled: PropTypes.bool,\r\n    virtualGroup: PropTypes.bool,\r\n    sceneEnabled: PropTypes.bool,\r\n    selectedSceneChanged: PropTypes.bool,\r\n    engineId: PropTypes.string,\r\n};\r\n\r\nexport default withStyles(styles)(SceneMembersForm);","// Common\r\nimport React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from 'clsx';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nimport AceEditor from 'react-ace';\r\nimport 'ace-builds/src-noconflict/mode-json';\r\nimport 'ace-builds/src-noconflict/theme-clouds_midnight';\r\nimport 'ace-builds/src-noconflict/theme-chrome';\r\nimport 'ace-builds/src-noconflict/ext-language_tools'\r\n\r\n// Own\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport copy from '@iobroker/adapter-react/Components/copy-to-clipboard';\r\n\r\nconst styles = theme => ({\r\n    divWithoutTitle: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: '2px solid #00000000',\r\n    },\r\n    error: {\r\n        border: '2px solid #FF0000',\r\n    },\r\n});\r\n\r\nclass ExportImportDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            text: props.sceneObj ? JSON.stringify(props.sceneObj, null, 2) : '',\r\n            error: false,\r\n            toast: '',\r\n        };\r\n    }\r\n\r\n    onChange(value) {\r\n        const newState = {text: value};\r\n        try {\r\n            JSON.parse(value);\r\n            if (this.state.error) {\r\n                newState.error = false;\r\n            }\r\n\r\n            this.setState(newState);\r\n        } catch(e) {\r\n            newState.error = true;\r\n            this.setState(newState);\r\n        }\r\n    }\r\n\r\n    renderToast() {\r\n        return <Snackbar open={ !!this.state.toast } autoHideDuration={ 3000 } onClick={ () => this.setState({ toast: '' }) } onClose={ () => this.setState({ toast: '' }) }>\r\n            <Alert color=\"info\" severity=\"success\" >{ this.state.toast }</Alert>\r\n        </Snackbar>;\r\n    }\r\n\r\n    render() {\r\n        return <Dialog\r\n            open={ true }\r\n            onClose={ () => this.props.onClose() }\r\n            aria-labelledby=\"export-dialog-title\"\r\n            fullWidth\r\n            maxWidth=\"lg\"\r\n            fullScreen={ true }\r\n            aria-describedby=\"export-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"export-dialog-title\">{ this.props.isImport ? I18n.t('Import scene') : I18n.t('Export scene') }</DialogTitle>\r\n            <DialogContent>\r\n                <div className={ clsx(this.props.classes.divWithoutTitle, this.state.error && this.props.classes.error) }>\r\n                    <AceEditor\r\n                        autoFocus\r\n                        mode=\"json\"\r\n                        width=\"100%\"\r\n                        height=\"100%\"\r\n                        onLoad={editor => {\r\n                            this.codeEditor = editor;\r\n                            this.codeEditor.focus();\r\n                        }}\r\n                        theme={ this.props.themeType === 'dark' ? 'clouds_midnight' : 'chrome' }\r\n                        onChange={ newValue => this.onChange(newValue) }\r\n                        value={ this.state.text }\r\n                        name=\"UNIQUE_ID_OF_DIV\"\r\n                        fontSize={ 14 }\r\n                        readOnly={ !this.props.isImport }\r\n                        editorProps={{ $blockScrolling: true }}\r\n                    />\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={ () => this.props.onClose() } autoFocus={ !this.props.isImport }>\r\n                    { I18n.t('Close') }\r\n                </Button>\r\n                { this.props.isImport ?\r\n                    <Button\r\n                        disabled={ !this.state.text || this.state.error }\r\n                        onClick={ () => this.props.onClose(JSON.parse(this.state.text)) }\r\n                        color=\"primary\"\r\n                    >\r\n                        { I18n.t('Import') }\r\n                    </Button>\r\n                    :\r\n                    <Button onClick={ () => {\r\n                        copy(this.state.text);\r\n                        this.setState({ toast: I18n.t('Copied') });\r\n                        setTimeout(() => this.props.onClose(), 500);\r\n                    } } color=\"primary\" autoFocus>\r\n                        { I18n.t('Copy to clipboard') }\r\n                    </Button>}\r\n                { this.renderToast() }\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n}\r\n\r\nExportImportDialog.propTypes = {\r\n    classes: PropTypes.object,\r\n    sceneObj: PropTypes.object,\r\n    themeType: PropTypes.string,\r\n    onClose: PropTypes.func,\r\n    isImport: PropTypes.bool,\r\n};\r\n\r\nexport default withStyles(styles)(ExportImportDialog);","// Common\r\nimport React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport { withTheme } from '@material-ui/core/styles';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\n\r\n// MaterialUi\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Container from '@material-ui/core/Container';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\n\r\n// Own\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Loader from '@iobroker/adapter-react/Components/Loader'\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport SceneForm from './components/SceneForm';\r\nimport SceneMembersForm from './components/SceneMembersForm';\r\nimport ExportImportDialog from './components/ExportImportDialog';\r\n\r\n// icons\r\nimport {MdExpandLess as IconCollapse} from 'react-icons/md';\r\nimport {MdExpandMore as IconExpand} from 'react-icons/md';\r\nimport {MdAdd as IconAdd} from 'react-icons/md';\r\nimport {MdModeEdit as IconEdit} from 'react-icons/md';\r\nimport {RiFolderAddLine as IconFolderAdd} from 'react-icons/ri';\r\nimport {MdClose as IconCancel} from 'react-icons/md';\r\nimport {MdCheck as IconCheck} from 'react-icons/md';\r\nimport {MdSave as IconSave} from 'react-icons/md';\r\nimport {MdDelete as IconDelete} from 'react-icons/md';\r\nimport {MdFileDownload as IconExport} from 'react-icons/md';\r\nimport {FaScroll as IconScript} from 'react-icons/all';\r\nimport {FaFolder as IconFolderClosed} from 'react-icons/all';\r\nimport {FaFolderOpen as IconFolderOpened} from 'react-icons/all';\r\n// import {MdFileUpload as IconImport} from 'react-icons/md';\r\nimport {FaClone as IconClone} from 'react-icons/fa';\r\nimport {BsFolderSymlink as IconMoveToFolder} from 'react-icons/bs';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nconst LEVEL_PADDING = 16;\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        height: 'calc(100% + 4px)',\r\n        backgroundColor: theme.palette.type === 'dark' ? '#000': '#fff',\r\n        //color1: console.log(JSON.stringify(theme, null, 2)) || '#1234',\r\n    },\r\n    tabContent: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px)',\r\n        overflow: 'auto'\r\n    },\r\n    textInput: {\r\n        display: 'block',\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n    noGutters: {\r\n        paddingLeft: 0,\r\n        paddingRight: 0,\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    heightMinusToolbar: {\r\n        height: 'calc(100% - 48px)',\r\n    },\r\n    folderItem: {\r\n        fontWeight: 'bold',\r\n        cursor: 'pointer',\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    fullWidthContainer: {\r\n        maxWidth: 'inherit',\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        width: '100%',\r\n    },\r\n    buttonsContainer1: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    list: {\r\n        width: '100%',\r\n        padding: 0,\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    membersCell: {\r\n        backgroundColor: theme.palette.type === 'dark' ? '#566770': '#ADD8E6',\r\n        padding: '0px 10px',\r\n        borderRadius: '4px',\r\n        paddingBottom: '10px',\r\n        minHeight: 'calc(100% - 40px)',\r\n        marginBottom: '10px',\r\n    },\r\n    leftMenuItem: {\r\n        display: 'block',\r\n        borderRadius: 10,\r\n    },\r\n    p: {\r\n        margin: '1em 0',\r\n    },\r\n    changed: {\r\n        position: 'relative',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            width: 6,\r\n            height: 6,\r\n            borderRadius: 6,\r\n            background: '#FF0000',\r\n            position: 'absolute',\r\n            top: 5,\r\n            right: 5,\r\n        },\r\n    },\r\n    sceneTitle: {\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n        flexGrow: 1,\r\n        paddingLeft: theme.spacing(1),\r\n    },\r\n    sceneSubTitle: {\r\n        fontSize: 'small',\r\n        display: 'block'\r\n    },\r\n    toolbarButtons: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    settingsBackground: {\r\n        background: theme.palette.type === 'dark' ? '#3a3a3a': '#eeeeee',\r\n    },\r\n    listItemTitle: {\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    listItemSubTitle: {\r\n        color: theme.palette.type === 'dark' ? '#bababa': '#2a2a2a',\r\n    },\r\n    disabled: {\r\n        opacity: 0.3\r\n    },\r\n    itemIconRoot: {\r\n        minWidth: 24 + theme.spacing(1),\r\n    },\r\n    itemIcon: {\r\n        width: 24,\r\n        height: 24,\r\n    },\r\n    itemIconFolder: {\r\n        color: theme.palette.type === 'dark' ? '#ffca2c' : '#ffca2c'\r\n    }\r\n});\r\n\r\nfunction getUrlQuery() {\r\n    const parts = (window.location.search || '').replace(/^\\?/, '').split('&');\r\n    const query = {};\r\n    parts.forEach(item => {\r\n        const [name, val] = item.split('=');\r\n        query[decodeURIComponent(name)] = val !== undefined ? decodeURIComponent(val) : true;\r\n    });\r\n    return query;\r\n}\r\n\r\nfunction getFolderPrefix(sceneId) {\r\n    let result = sceneId.split('.');\r\n    result.shift();\r\n    result.shift();\r\n    result.pop();\r\n    result = result.join('.');\r\n    return result;\r\n}\r\n\r\nfunction getFolderList(folder) {\r\n    let result = [];\r\n    result.push(folder);\r\n    Object.values(folder.subFolders).forEach(subFolder =>\r\n        result = result.concat(getFolderList(subFolder)));\r\n\r\n    return result;\r\n}\r\n\r\nconst FORBIDDEN_CHARS = /[.\\][*,;'\"`<>\\\\?]/g;\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        super(props);\r\n        this.translations = {\r\n            'en': require('./i18n/en'),\r\n            'de': require('./i18n/de'),\r\n            'ru': require('./i18n/ru'),\r\n            'pt': require('./i18n/pt'),\r\n            'nl': require('./i18n/nl'),\r\n            'fr': require('./i18n/fr'),\r\n            'it': require('./i18n/it'),\r\n            'es': require('./i18n/es'),\r\n            'pl': require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n\r\n        // init translations\r\n        I18n.setTranslations(this.translations);\r\n        I18n.setLanguage((navigator.language || navigator.userLanguage || 'en').substring(0, 2).toLowerCase());\r\n\r\n        const query = getUrlQuery();\r\n\r\n        this.port = query.port || (window.location.port === '3000' ? 8081 : window.location.port);\r\n        this.host = query.host || window.location.hostname;\r\n\r\n        window.iobForceHost = this.host;\r\n    }\r\n\r\n    onConnectionReady() {\r\n        let opened;\r\n        try {\r\n            opened = JSON.parse(window.localStorage.getItem('Scenes.opened')) || [];\r\n        } catch (e) {\r\n            opened = [];\r\n        }\r\n\r\n        const newState = {\r\n            lang: this.socket.systemLang,\r\n            ready: false,\r\n            selectedSceneId: window.localStorage.getItem('Scenes.selectedSceneId') || '',\r\n            opened,\r\n            scenes: {},\r\n            folders: null,\r\n            search: null,\r\n            addFolderDialog: null,\r\n            addFolderDialogTitle: null,\r\n            editFolderDialog: null,\r\n            editFolderDialogTitle: null,\r\n            changingScene: '',\r\n            showSearch: null,\r\n            instances: [],\r\n            selectedSceneChanged: false,\r\n            deleteDialog: null,\r\n            moveDialog: null,\r\n            newFolder: '',\r\n            selectedSceneData: null,\r\n            exportDialog: false,\r\n            importDialog: false,\r\n        };\r\n\r\n        this.socket.getSystemConfig()\r\n            .then(systemConfig => {\r\n                newState.systemConfig = systemConfig;\r\n\r\n                return this.socket.getAdapterInstances(window.adapterName)\r\n                    .then(instances => {\r\n                        newState.instances = instances.map(item => item._id);\r\n                        this.setState(newState, () =>\r\n                            this.refreshData());\r\n                    });\r\n            })\r\n            .catch(e => this.showError(e));\r\n    }\r\n\r\n    sceneSwitch = event => {\r\n        const id = event.target.name;\r\n        let scenes = JSON.parse(JSON.stringify(this.state.scenes));\r\n\r\n        if (id === this.state.selectedSceneId) {\r\n            scenes[id] = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n            scenes[id].common.enabled = event.target.checked;\r\n        }\r\n\r\n        scenes[id].common.enabled = event.target.checked;\r\n\r\n        this.socket.setObject(id, scenes[id])\r\n            .then(() => this.refreshData(id));\r\n    };\r\n\r\n    buildTree(scenes) {\r\n        scenes = Object.values(scenes);\r\n\r\n        let folders = {subFolders: {}, scenes: {}, id: '', prefix: ''};\r\n\r\n        // create missing folders\r\n        scenes.forEach((scene) => {\r\n            let id = scene._id;\r\n            const parts = id.split('.');\r\n            parts.shift();\r\n            parts.shift();\r\n            let currentFolder = folders;\r\n            let prefix = '';\r\n            for (let i = 0; i < parts.length - 1; i++) {\r\n                if (prefix) {\r\n                    prefix = prefix + '.';\r\n                }\r\n                prefix = prefix + parts[i];\r\n                if (!currentFolder.subFolders[parts[i]]) {\r\n                    currentFolder.subFolders[parts[i]] = {\r\n                        subFolders: {}, \r\n                        scenes: {}, \r\n                        id: parts[i], \r\n                        prefix,\r\n                    }\r\n                }\r\n                currentFolder = currentFolder.subFolders[parts[i]];\r\n            }\r\n            currentFolder.scenes[id] = scene;\r\n        });\r\n\r\n        return folders;\r\n    }\r\n\r\n    findFolder(parent, folder) {\r\n        if (parent.prefix === folder.prefix) {\r\n            return parent;\r\n        }\r\n        for (let index in parent.subFolders) {\r\n            let result = this.findFolder(parent.subFolders[index], folder);\r\n            if (result) {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    getData() {\r\n        let scenes;\r\n        return this.socket.getObjectView('scene.0.', 'scene.\\u9999', 'state')\r\n            .then(_scenes => {\r\n                scenes = _scenes;\r\n                return {scenes, folders: this.buildTree(scenes)};\r\n            });\r\n    }\r\n\r\n    refreshData(changingScene) {\r\n        const that = this;\r\n        return new Promise(resolve => {\r\n            if (changingScene) {\r\n                this.setState({changingScene}, () => resolve());\r\n            } else {\r\n                this.setState({ready: false}, () => resolve());\r\n            }\r\n        })\r\n            .then(() => this.getData())\r\n            .then(newState => {\r\n                newState.ready = true;\r\n                newState.changingScene = '';\r\n                newState.selectedSceneChanged = false;\r\n\r\n                // Fill missing data\r\n                Object.keys(newState.scenes).forEach(id => {\r\n                    const sceneObj = newState.scenes[id];\r\n                    sceneObj.common = sceneObj.common || {};\r\n                    sceneObj.native = sceneObj.native || {};\r\n                    sceneObj.native.burstIntervall = parseInt(sceneObj.native.burstIntervall || 0, 10);\r\n                    sceneObj.native.onFalse = sceneObj.native.onFalse || {};\r\n                    sceneObj.native.onTrue  = sceneObj.native.onTrue  || {};\r\n                    sceneObj.native.onFalse.trigger = sceneObj.native.onFalse.trigger || {condition: '=='};\r\n                    sceneObj.native.onTrue.trigger  = sceneObj.native.onTrue.trigger  || {condition: '=='};\r\n                    sceneObj.native.members = sceneObj.native.members || [];\r\n                    const members = sceneObj.native.members;\r\n                    delete sceneObj.native.members;\r\n                    sceneObj.native.members = members; // place it on the last place\r\n\r\n                    delete sceneObj.from;\r\n                    delete sceneObj.user;\r\n                    delete sceneObj.ts;\r\n                    delete sceneObj.acl;\r\n                });\r\n\r\n                if (!newState.scenes[this.state.selectedSceneId]) {\r\n                    newState.selectedSceneId = Object.keys(newState.scenes).shift() || '';\r\n                }\r\n\r\n                if ((newState.selectedSceneId || that.state.selectedSceneId) &&\r\n                    newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]) {\r\n                    newState.selectedSceneData = JSON.parse(JSON.stringify(newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]));\r\n                } else {\r\n                    newState.selectedSceneData = null;\r\n                }\r\n\r\n                that.setState(newState);\r\n            });\r\n    }\r\n\r\n    addFolder(parentFolder, id) {\r\n        let folders = JSON.parse(JSON.stringify(this.state.folders));\r\n        let _parentFolder = this.findFolder(folders, parentFolder);\r\n\r\n        let opened = JSON.parse(JSON.stringify(this.state.opened));\r\n\r\n        _parentFolder.subFolders[id] = {\r\n            scenes: {},\r\n            subFolders: {},\r\n            id,\r\n            prefix: _parentFolder.prefix ? _parentFolder.prefix + '.' + id : id\r\n        };\r\n\r\n        opened.push(id);\r\n\r\n        this.setState({folders, opened});\r\n    }\r\n\r\n    addSceneToFolderPrefix = (scene, folderPrefix, noRefresh) => {\r\n        let oldId = scene._id;\r\n        let sceneId = scene._id.split('.').pop();\r\n        scene._id = 'scene.0.' + folderPrefix + (folderPrefix ? '.' : '') + sceneId;\r\n\r\n        return this.socket.delObject(oldId)\r\n            .then(() => {\r\n                console.log('Deleted ' + oldId);\r\n                return this.socket.setObject(scene._id, scene)\r\n            })\r\n            .then(() => {\r\n                console.log('Set new ID: ' + scene._id);\r\n                return !noRefresh && this.refreshData(sceneId)\r\n                    .then(() => this.changeSelectedScene(scene._id))\r\n            });\r\n    };\r\n\r\n    renameFolder(folder, newName) {\r\n        return new Promise(resolve => this.setState({changingScene: folder}, () => resolve()))\r\n            .then(() => {\r\n                let newSelectedId;\r\n                let pos;\r\n                // if selected folder opened, replace its ID in this.state.opened\r\n                if ((pos = this.state.opened.indexOf(folder.prefix)) !== -1) {\r\n                    const opened = [...this.state.opened];\r\n                    opened.splice(pos, 1);\r\n                    opened.push(newName);\r\n                    opened.sort();\r\n                    this.setState({opened});\r\n                }\r\n\r\n                let prefix = folder.prefix.split('.');\r\n                prefix[prefix.length - 1] = newName;\r\n                prefix = prefix.join('.');\r\n\r\n                if (Object.keys(folder.scenes).find(id => id === this.state.selectedSceneId)) {\r\n                    newSelectedId = 'scene.0.' + prefix + '.' + this.state.selectedSceneId.split('.').pop();\r\n                }\r\n\r\n                const promises = Object.keys(folder.scenes).map(sceneId =>\r\n                    this.addSceneToFolderPrefix(folder.scenes[sceneId], prefix, true));\r\n\r\n                return Promise.all(promises)\r\n                    .then(() => this.refreshData(folder))\r\n                    .then(() => newSelectedId && this.setState({selectedSceneId: newSelectedId}));\r\n            });\r\n    }\r\n\r\n    renderMoveDialog() {\r\n        if (!this.state.moveDialog) {\r\n            return null;\r\n        }\r\n\r\n        const newFolder = this.state.newFolder === '__root__' ? '' : this.state.newFolder;\r\n        const sceneId = this.state.selectedSceneId.split('.').pop();\r\n        const newId = 'scene.0.' + newFolder + (newFolder ? '.' : '') + sceneId;\r\n\r\n        const isIdUnique = !Object.keys(this.state.scenes).find(id => id === newId);\r\n\r\n        return <Dialog\r\n            open={ true }\r\n            key=\"moveDialog\"\r\n            onClose={ () => this.setState({moveDialog: null}) }\r\n        >\r\n            <DialogTitle>{ I18n.t('Move to folder') }</DialogTitle>\r\n            <DialogContent>\r\n                <FormControl classes={ {root: this.props.classes.width100} }>\r\n                    <InputLabel shrink={ true }>{ I18n.t('Folder') }</InputLabel>\r\n                    <Select\r\n                        className={ this.props.classes.width100 }\r\n                        value={ this.state.newFolder || '__root__' }\r\n                        onChange={e => this.setState({newFolder: e.target.value}) }>\r\n                        { getFolderList(this.state.folders).map(folder =>\r\n                            <MenuItem\r\n                                key={ folder.prefix }\r\n                                value={ folder.prefix || '__root__' }\r\n                            >\r\n                                { folder.prefix ? folder.prefix.replace('.', ' > ') : I18n.t('Root') }\r\n                            </MenuItem>)\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n            </DialogContent>\r\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                <Button variant=\"contained\" onClick={ () => this.setState({moveDialog: null}) }>\r\n                    { I18n.t('Cancel') }\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    disabled={ !isIdUnique }\r\n                    color=\"primary\" onClick={ e =>\r\n                        this.setState({moveDialog: null}, () =>\r\n                            this.addSceneToFolderPrefix(this.state.scenes[this.state.selectedSceneId], this.state.newFolder === '__root__' ? '' : this.state.newFolder))\r\n                    }\r\n                >\r\n                    { I18n.t('Move to folder') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n\r\n    /*deleteFolder(folder) {\r\n        if (Object.values(folder.scenes).length) {\r\n            return this.showError(I18n.t('Cannot delete non-empty folder'));\r\n        } else {\r\n            //delete folder;\r\n            this.setState(this.state);\r\n        }\r\n    }*/\r\n\r\n    renderTreeScene = (item, level) => {\r\n        const scene = this.state.scenes[item._id];\r\n        if (!scene || (this.state.search && !item.common.name.includes(this.state.search))) {\r\n            return null;\r\n        }\r\n\r\n        level = level || 0;\r\n\r\n        const changed = this.state.selectedSceneId && this.state.selectedSceneId === scene._id && this.state.selectedSceneChanged;\r\n\r\n        return <ListItem\r\n            style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\r\n            key={ item._id }\r\n            selected={ this.state.selectedSceneId ? this.state.selectedSceneId === scene._id : false }\r\n            button\r\n            className={ clsx(changed && this.props.classes.changed, !scene.common.enabled && this.props.classes.disabled) }\r\n            onClick={ () => this.changeSelectedScene(scene._id) }>\r\n            <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} }><IconScript className={ this.props.classes.itemIcon }/></ListItemIcon>\r\n            <ListItemText\r\n                classes={ {primary: this.props.classes.listItemTitle, secondary: this.props.classes.listItemSubTitle} }\r\n                primary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) }\r\n                secondary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}, true) }\r\n                />\r\n            <ListItemSecondaryAction>\r\n                {this.state.changingScene === scene._id ?\r\n                    <CircularProgress size={ 24 }/>\r\n                    :\r\n                    <Switch\r\n                        checked={ scene.common.enabled }\r\n                        onChange={ this.sceneSwitch }\r\n                        name={ scene._id }\r\n                    />\r\n                }\r\n            </ListItemSecondaryAction>\r\n        </ListItem>;\r\n    };\r\n\r\n    toggleFolder(folder) {\r\n        const opened = [...this.state.opened];\r\n        const pos = opened.indexOf(folder.prefix);\r\n        if (pos === -1) {\r\n            opened.push(folder.prefix);\r\n        } else {\r\n            opened.splice(pos, 1);\r\n\r\n            // If active scene is inside this folder select the first scene\r\n            if (Object.keys(folder.scenes).includes(this.state.selectedSceneId)) {\r\n                this.setState({selectedSceneId: ''});\r\n            }\r\n        }\r\n\r\n        window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\r\n\r\n        this.setState({opened});\r\n    }\r\n\r\n    renderTree(parent, level) {\r\n        let result = [];\r\n        level = level || 0;\r\n        let opened = this.state.opened ? this.state.opened.includes(parent.prefix) : false;\r\n\r\n        // Show folder item\r\n        parent && parent.id && result.push(<ListItem\r\n            key={ parent.prefix }\r\n            classes={ {gutters: this.props.classes.noGutters} }\r\n            className={ clsx(this.props.classes.width100, this.props.classes.folderItem) }\r\n            style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\r\n        >\r\n            <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} } onClick={ () => this.toggleFolder(parent) }>{ opened ?\r\n                <IconFolderOpened className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/> :\r\n                <IconFolderClosed className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/>\r\n            }</ListItemIcon>\r\n            <ListItemText>{ parent.id }</ListItemText>\r\n            <ListItemSecondaryAction>\r\n                <IconButton onClick={ () => this.toggleFolder(parent) } title={ opened ? I18n.t('Collapse') : I18n.t('Expand')  }>\r\n                    { opened ? <IconExpand/> : <IconCollapse/> }\r\n                </IconButton>\r\n            </ListItemSecondaryAction>\r\n        </ListItem>);\r\n\r\n        if (parent && (opened || !parent.id)) { // root cannot be closed and have id === ''\r\n            parent.id && result.push(<ListItem key={ 'keys_' + parent.prefix }>\r\n                <ListItemSecondaryAction>\r\n                    <IconButton\r\n                        onClick={() => this.createScene(this.getNewSceneId(), parent.id) }\r\n                        title={ I18n.t('Create new scene') }\r\n                    ><IconAdd/></IconButton>\r\n                    { /* <IconButton\r\n                        onClick={() => this.setState({addFolderDialog: parent, addFolderDialogTitle: ''})}\r\n                        title={ I18n.t('Create new folder') }\r\n                    ><IconFolderAdd/></IconButton> */ }\r\n\r\n                    <IconButton onClick={ () => this.setState({editFolderDialog: parent, editFolderDialogTitle: parent.id, editFolderDialogTitleOrigin: parent.id}) }\r\n                                title={ I18n.t('Edit folder name') }\r\n                    ><IconEdit/></IconButton>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>);\r\n\r\n            const values = Object.values(parent.scenes);\r\n            const subFolders = Object.values(parent.subFolders);\r\n\r\n            // add first sub-folders\r\n            result.push(subFolders.sort((a, b) => a.id > b.id ? 1 : (a.id < b.id ? -1 : 0)).map(subFolder =>\r\n                this.renderTree(subFolder, level + 1)));\r\n\r\n            // Add as second scenes\r\n\r\n            result.push(<ListItem\r\n                key={ 'items_' + parent.prefix }\r\n                classes={ {gutters: this.props.classes.noGutters} }\r\n                className={ this.props.classes.width100 }>\r\n                <List\r\n                    className={ this.props.classes.list }\r\n                    classes={ {root: this.props.classes.leftMenuItem} }\r\n                    style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\r\n                >\r\n                    { values.length ?\r\n                        values.sort((a, b) => a._id > b._id ? 1 : (a._id < b._id ? -1 : 0)).map(scene => this.renderTreeScene(scene, level))\r\n                        :\r\n                        (!subFolders.length ? <ListItem><ListItemText className={ this.props.classes.folderItem}>{ I18n.t('No scenes created yet')}</ListItemText></ListItem> : '')\r\n                    }\r\n                </List>\r\n            </ListItem>);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    createScene(name, parentId) {\r\n        let template = {\r\n            common: {\r\n                name: '',\r\n                type: 'boolean',\r\n                role: 'scene.state',\r\n                desc: '',\r\n                enabled: true,\r\n                read: true,\r\n                write: true,\r\n                def: false,\r\n                engine: 'system.adapter.scenes.0'\r\n            },\r\n            native: {\r\n                onTrue: {\r\n                    trigger: {},\r\n                    cron: null,\r\n                    astro: null\r\n                },\r\n                onFalse: {\r\n                    enabled: false,\r\n                    trigger: {},\r\n                    cron: null,\r\n                    astro: null\r\n                },\r\n                members: []\r\n            },\r\n            type: 'state'\r\n        };\r\n\r\n        template.common.name = name;\r\n        let id = 'scene.0.' + (parentId ? parentId + '.' : '') + template.common.name;\r\n\r\n        this.setState({changingScene: id}, () =>\r\n            this.socket.setObject(id, template)\r\n                .then(() => this.refreshData(id))\r\n                .then(() => this.changeSelectedScene(id)));\r\n    };\r\n\r\n    cloneScene(id) {\r\n        let scene = JSON.parse(JSON.stringify(this.state.scenes[id]));\r\n        scene._id = scene._id.split('.');\r\n        scene._id.pop();\r\n        scene._id.push(this.getNewSceneId());\r\n        scene._id = scene._id.join('.');\r\n        scene.common.name = scene.common.name + ' ' + I18n.t('copy');\r\n\r\n        this.setState({changingScene: scene._id}, () =>\r\n            this.socket.setObject(scene._id, scene)\r\n                .then(() => this.refreshData(scene._id))\r\n                .then(() => this.changeSelectedScene( scene._id)));\r\n    };\r\n\r\n    writeScene() {\r\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        scene._id = this.state.selectedSceneId;\r\n\r\n        const folder = getFolderPrefix(scene._id);\r\n        const newId = 'scene.0.' + (folder ? folder + '.' : '') + scene.common.name.replace(FORBIDDEN_CHARS, '_').replace(/\\s/g, '_');\r\n\r\n        if (scene._id !== newId) {\r\n            // check if the scene name is unique\r\n            if (Object.keys(this.state.scenes).find(id => id === newId)) {\r\n                return this.showError(I18n.t('Name is not unique. Please change name before the save.'));\r\n            }\r\n\r\n            // delete first the old scene\r\n            return this.socket.delObject(scene._id)\r\n                .then(() => {\r\n                    scene._id = newId;\r\n                    this.socket.setObject(scene._id, scene);\r\n                })\r\n                .then(() => this.refreshData(this.state.selectedSceneId))\r\n                .then(() => this.changeSelectedScene(newId))\r\n        } else {\r\n            return this.socket.setObject(this.state.selectedSceneId, scene)\r\n                .then(() => this.refreshData(this.state.selectedSceneId));\r\n        }\r\n    }\r\n\r\n    updateScene(common, native, cb) {\r\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        if (common) {\r\n            scene.common = JSON.parse(JSON.stringify(common));\r\n        }\r\n        if (native) {\r\n            const members = scene.native.members;\r\n            scene.native = JSON.parse(JSON.stringify(native));\r\n            scene.native.members = members;\r\n        }\r\n\r\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\r\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\r\n    };\r\n\r\n    deleteScene = (id) => {\r\n        return this.socket.delObject(id)\r\n            .then(() => {\r\n                if (this.state.selectedSceneId === id) {\r\n                    return this.refreshData(id)\r\n                        .then(() => {\r\n                            const ids = Object.keys(this.state.scenes);\r\n                            // Find next scene\r\n                            let nextId = ids.find(_id => _id > id) || '';\r\n                            if (!nextId) {\r\n                                // try prev scene\r\n                                for (let i = ids.length - 1; i >= 0; i--) {\r\n                                    if (ids[i] < id) {\r\n                                        nextId = ids[i];\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (!nextId && ids.length) {\r\n                                nextId = ids.shift();\r\n                            }\r\n\r\n                            this.changeSelectedScene(nextId);\r\n                        });\r\n                } else {\r\n                    return this.refreshData(id);\r\n                }\r\n            });\r\n    };\r\n\r\n    getNewSceneId() {\r\n        let newId = 0;\r\n\r\n        for (const id in this.state.scenes) {\r\n            let shortId = id.split('.').pop();\r\n            let matches = shortId.match(/^scene([0-9]+)$/);\r\n            if (matches && parseInt(matches[1], 10) >= newId) {\r\n                newId = parseInt(matches[1]) + 1;\r\n            }\r\n        }\r\n\r\n        return 'scene' + newId;\r\n    };\r\n\r\n    updateSceneMembers(members, cb) {\r\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        scene.native.members = JSON.parse(JSON.stringify(members));\r\n\r\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\r\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\r\n    };\r\n\r\n    changeSelectedScene(newId, ignoreUnsaved, cb) {\r\n        if (this.state.selectedSceneId !== newId) {\r\n            if (this.state.selectedSceneChanged && !ignoreUnsaved) {\r\n                this.confirmCb = cb;\r\n                this.setState({sceneChangeDialog: newId});\r\n            } else {\r\n                window.localStorage.setItem('Scenes.selectedSceneId', newId);\r\n                this.setState({\r\n                    selectedSceneData: JSON.parse(JSON.stringify(this.state.scenes[newId])),\r\n                    sceneChangeDialog: '',\r\n                    selectedSceneId: newId,\r\n                    selectedSceneChanged: false,\r\n                }, () => cb && cb());\r\n            }\r\n        } else {\r\n            cb && cb();\r\n        }\r\n    }\r\n\r\n    renderAddFolderDialog() {\r\n        return this.state.addFolderDialog ?\r\n            <Dialog\r\n                open={ !!this.state.addFolderDialog }\r\n                onClose={ () => this.setState({addFolderDialog: null}) }\r\n            >\r\n                <DialogTitle>{I18n.t('Create folder')}</DialogTitle>\r\n                <DialogContent className={this.props.classes.p}>\r\n                    <TextField label={ I18n.t('Title') } value={ this.state.addFolderDialogTitle } onChange={ e =>\r\n                        this.setState({addFolderDialogTitle: e.target.value.replace(FORBIDDEN_CHARS, '_')}) }/>\r\n                </DialogContent>\r\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                    <Button variant=\"contained\" onClick={ () => this.setState({addFolderDialog: null}) }>\r\n                        <IconCancel className={ this.props.classes.buttonIcon }/>\r\n                        { I18n.t('Cancel') }\r\n                    </Button>\r\n                    <Button variant=\"contained\" onClick={() => {\r\n                        this.addFolder(this.state.addFolderDialog, this.state.addFolderDialogTitle);\r\n                        this.setState({addFolderDialog: null});\r\n                    }} color=\"primary\" autoFocus>\r\n                        <IconCheck className={ this.props.classes.buttonIcon }/>\r\n                        {I18n.t('Create')}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog> : null;\r\n    }\r\n\r\n    renderEditFolderDialog() {\r\n        const isUnique = !Object.keys(this.state.folders.subFolders).find(folder => folder.id === this.state.editFolderDialogTitle);\r\n\r\n        return this.state.editFolderDialog ? <Dialog open={ !!this.state.editFolderDialog } onClose={ () => this.setState({editFolderDialog: null}) }>\r\n            <DialogTitle>{ I18n.t('Edit folder') }</DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                    label={ I18n.t('Title') }\r\n                    value={ this.state.editFolderDialogTitle }\r\n                    onChange={ e => this.setState({editFolderDialogTitle: e.target.value.replace(FORBIDDEN_CHARS, '_')}) }/>\r\n            </DialogContent>\r\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                <Button variant=\"contained\" onClick={ () => this.setState({editFolderDialog: null}) }>\r\n                    <IconCancel className={ this.props.classes.buttonIcon }/>\r\n                    { I18n.t('Cancel') }\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    disabled={ !this.state.editFolderDialogTitle || this.state.editFolderDialogTitleOrigin === this.state.editFolderDialogTitle || !isUnique}\r\n                    onClick={ () => {\r\n                        this.renameFolder(this.state.editFolderDialog, this.state.editFolderDialogTitle)\r\n                            .then(() => this.setState({editFolderDialog: null}));\r\n                    }}\r\n                    color=\"primary\"\r\n                    autoFocus\r\n                >\r\n                    <IconCheck className={ this.props.classes.buttonIcon }/>\r\n                    { I18n.t('Apply') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog> : null;\r\n    }\r\n\r\n    renderSceneChangeDialog() {\r\n        const that = this;\r\n        return this.state.sceneChangeDialog ? <Dialog\r\n            open={ true }\r\n            key=\"sceneChangeDialog\"\r\n            onClose={ () => this.setState({sceneChangeDialog: ''}) }>\r\n                <DialogTitle>{ I18n.t('Are you sure for cancel unsaved changes?') }</DialogTitle>\r\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                    <Button variant=\"contained\" onClick={() => {\r\n                        this.confirmCb = null; // cancel callback\r\n                        this.setState({sceneChangeDialog: ''});\r\n                    }}>\r\n                        <IconCancel/> { I18n.t('Cancel') }\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={e =>\r\n                        this.changeSelectedScene(this.state.sceneChangeDialog, true, () => {\r\n                            const cb = this.confirmCb;\r\n                            this.confirmCb = null;\r\n                            cb && cb();\r\n                        }) }>\r\n                        { I18n.t('Discard') }\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={e => {\r\n                        // save scene\r\n                        this.writeScene()\r\n                            .then(() => that.changeSelectedScene(that.state.sceneChangeDialog, true, () => {\r\n                                const cb = this.confirmCb;\r\n                                this.confirmCb = null;\r\n                                cb && cb();\r\n                            }))\r\n                    }}>\r\n                        <IconSave/> { I18n.t('Save changes') }\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog> : null;\r\n    };\r\n\r\n    renderDeleteDialog() {\r\n        return this.state.deleteDialog ? <Dialog\r\n            open={ true }\r\n            key=\"deleteDialog\"\r\n            onClose={ () => this.setState({deleteDialog: false}) }\r\n        >\r\n            <DialogTitle>{ I18n.t('Are you sure for delete this scene?') }</DialogTitle>\r\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: false}) }>\r\n                    {I18n.t('Cancel')}\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={e => {\r\n                    this.deleteScene(this.state.selectedSceneId);\r\n                    this.setState({deleteDialog: false});\r\n                }}>\r\n                    { I18n.t('Delete') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog> : null;\r\n    }\r\n\r\n    renderExportImportDialog() {\r\n        if (!this.state.exportDialog && !this.state.importDialog) {\r\n            return null;\r\n        }\r\n\r\n        return <ExportImportDialog\r\n            isImport={ !!this.state.importDialog }\r\n            themeType={ this.state.themeType }\r\n            onClose={ importedScene => {\r\n                if (this.state.importDialog && importedScene) {\r\n                    const scene = this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId];\r\n                    importedScene.common._id = scene._id;\r\n                    importedScene.common.name = scene.name || importedScene.common.name;\r\n                    this.setState({selectedSceneData: importedScene,  importDialog: false});\r\n                } else {\r\n                    this.setState({exportDialog: false, importDialog: false})\r\n                }\r\n            } }\r\n            sceneObj={ this.state.exportDialog ? this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId] : '' }\r\n        />\r\n    }\r\n\r\n    renderListToolbar() {\r\n        return <Toolbar variant=\"dense\">\r\n            <IconButton\r\n                onClick={ () => this.createScene(this.getNewSceneId()) }\r\n                title={ I18n.t('Create new scene') }\r\n            ><IconAdd/></IconButton>\r\n\r\n            <IconButton\r\n                onClick={ () => this.setState({addFolderDialog: this.state.folders, addFolderDialogTitle: ''}) }\r\n                title={ I18n.t('Create new folder') }\r\n            ><IconFolderAdd/></IconButton>\r\n\r\n            <span className={this.props.classes.right}>\r\n                                        <IconButton onClick={() => this.setState({showSearch: !this.state.showSearch}) }>\r\n                                            <SearchIcon/>\r\n                                        </IconButton>\r\n                                    </span>\r\n            {this.state.showSearch ?\r\n                <TextField\r\n                    value={ this.state.search }\r\n                    className={ this.props.classes.textInput }\r\n                    onChange={ e => this.setState({search: e.target.value}) }/> : null\r\n            }\r\n        </Toolbar>;\r\n    }\r\n\r\n    renderSceneToolbar() {\r\n        return <Toolbar variant=\"dense\" classes={ {gutters: this.props.classes.noGutters} }>\r\n            <Typography variant=\"h6\" className={ this.props.classes.sceneTitle }>\r\n                { I18n.t('Scene options') /*Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) */}\r\n                <span className={this.props.classes.sceneSubTitle}>{ Utils.getObjectNameFromObj(this.state.scenes[this.state.selectedSceneId], null, {language: I18n.getLanguage()}, true) }</span>\r\n            </Typography>\r\n\r\n            { this.state.selectedSceneChanged ? <Button\r\n                className={ this.props.classes.toolbarButtons }\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => this.writeScene()}\r\n            >\r\n                { I18n.t('Save') }\r\n            </Button> : null }\r\n\r\n            { this.state.selectedSceneChanged ? <Button\r\n                className={ this.props.classes.toolbarButtons }\r\n                variant=\"contained\"\r\n                onClick={ () => this.refreshData(this.state.selectedSceneId) }\r\n            >\r\n                { I18n.t('Cancel') }\r\n            </Button> : null }\r\n            <IconButton aria-label=\"Clone\" title={ I18n.t('Clone') } onClick={ () => this.cloneScene(this.state.selectedSceneId) }><IconClone/></IconButton>\r\n\r\n            <IconButton aria-label=\"Delete\" title={ I18n.t('Delete') } onClick={ () => this.setState({deleteDialog: true}) }><IconDelete/></IconButton>\r\n\r\n            <IconButton aria-label=\"Move to folder\" title={ I18n.t('Move to folder') } onClick={ () => this.setState({moveDialog: true, newFolder: getFolderPrefix(this.state.selectedSceneId)}) }><IconMoveToFolder/></IconButton>\r\n\r\n            <IconButton aria-label=\"Export\" title={ I18n.t('Export scene') } onClick={ () => this.setState({exportDialog: true}) }><IconExport/></IconButton>\r\n\r\n            {/*<IconButton aria-label=\"Import\" title={ I18n.t('Import scene') } onClick={ () => this.setState({importDialog: true}) }><IconImport/></IconButton>*/}\r\n        </Toolbar>;\r\n    }\r\n\r\n    render() {\r\n        const component = this;\r\n        if (!this.state.ready) {\r\n            return <MuiThemeProvider theme={ this.state.theme }>\r\n                <Loader theme={ this.state.themeName }/>\r\n            </MuiThemeProvider>;\r\n        }\r\n\r\n        return (\r\n            <MuiThemeProvider theme={ this.state.theme }>\r\n                <div className={ this.props.classes.root }>\r\n                    <Container className={ clsx(this.props.classes.height, this.props.classes.fullWidthContainer) }>\r\n                        <Grid container spacing={ 1 } className={ this.props.classes.height }>\r\n                            <Grid item xs={ 3 } className={ clsx(this.props.classes.columnContainer, this.props.classes.height) }>\r\n                                { this.renderListToolbar() }\r\n                                <div className={ this.props.classes.heightMinusToolbar }>\r\n                                    <List className={ this.props.classes.scroll }>\r\n                                        { this.renderTree(this.state.folders) }\r\n                                    </List>\r\n                                </div>\r\n                            </Grid>\r\n                            { this.state.selectedSceneId && this.state.scenes[this.state.selectedSceneId] ?\r\n                                <Grid item xs={ 9 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\r\n                                    { this.renderSceneToolbar() }\r\n                                    <Grid container spacing={ 1 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\r\n                                        <Grid item xs={5} className={ this.props.classes.heightMinusToolbar }>\r\n                                            <div className={this.props.classes.height}>\r\n                                                {this.state.selectedSceneId ?\r\n                                                    <SceneForm\r\n                                                        key={ this.state.selectedSceneId }\r\n                                                        updateScene={ (common, native, cb) => component.updateScene(common, native, cb) }\r\n                                                        scene={ this.state.scenes[this.state.selectedSceneId] }\r\n                                                        socket={ this.socket }\r\n                                                        instances={ this.state.instances }\r\n                                                    />\r\n                                                    : ''}\r\n                                            </div>\r\n                                        </Grid>\r\n                                        <Grid item xs={7} className={ this.props.classes.heightMinusToolbar }>\r\n                                            <div className={this.props.classes.height}>\r\n                                                { this.state.selectedSceneId ?\r\n                                                    <div className={ clsx(this.props.classes.membersCell, this.props.classes.height) }>\r\n                                                        <SceneMembersForm\r\n                                                            key={ 'selected' + this.state.selectedSceneId }\r\n                                                            updateSceneMembers={ (members, cb) => component.updateSceneMembers(members, cb) }\r\n                                                            selectedSceneChanged={ this.state.selectedSceneChanged }\r\n                                                            sceneEnabled={ this.state.selectedSceneData.common.enabled }\r\n                                                            members={ this.state.selectedSceneData.native.members }\r\n                                                            socket={ this.socket }\r\n                                                            onFalseEnabled={ this.state.selectedSceneData.native.onFalse.enabled }\r\n                                                            virtualGroup={ this.state.selectedSceneData.native.virtualGroup }\r\n                                                            sceneId={ this.state.selectedSceneId }\r\n                                                            engineId={ this.state.selectedSceneData.common.engine }\r\n                                                        />\r\n                                                    </div>\r\n                                                    : ''}\r\n                                            </div>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                : null\r\n                            }\r\n                        </Grid>\r\n                    </Container>\r\n                    { this.renderSceneChangeDialog() }\r\n                    { this.renderEditFolderDialog() }\r\n                    { this.renderMoveDialog() }\r\n                    { this.renderDeleteDialog() }\r\n                    { this.renderAddFolderDialog() }\r\n                    { this.renderExportImportDialog() }\r\n                    { this.renderError() }\r\n                </div>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(withTheme(App));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Sentry from '@sentry/browser';\nimport * as SentryIntegrations from '@sentry/integrations';\nimport { MuiThemeProvider} from '@material-ui/core/styles';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\nimport { version } from '../package.json';\n\nimport theme from '@iobroker/adapter-react/Theme';\nimport Utils from '@iobroker/adapter-react/Components/Utils';\n\nwindow.adapterName = 'scenes';\n\nconsole.log('iobroker.' + window.adapterName + '@' + version);\nlet themeName = Utils.getThemeName();\n\nfunction build() {\n    return ReactDOM.render(<MuiThemeProvider theme={ theme(themeName) }>\n        <App onThemeChange={_theme => {\n            themeName = _theme;\n            build();\n        }}/>\n    </MuiThemeProvider>, document.getElementById('root'));\n}\n\n// if not local development\nif (window.location.host !== 'localhost:3000') {\n    Sentry.init({\n        dsn: \"https://89fc6260a1af4df68f9db767a603b7e5@sentry.iobroker.net/86\",\n        release: 'iobroker.' + window.adapterName + '@' + version,\n        integrations: [\n            new SentryIntegrations.Dedupe()\n        ]\n    });\n}\n\nbuild();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}