{"version":3,"sources":["serviceWorker.js","components/SceneForm.js","components/SceneMembersForm.js","components/ExportImportDialog.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","SceneForm","React","Component","constructor","props","super","setStateWithParent","newState","cb","this","setState","updateScene","common","native","sceneObj","scene","JSON","parse","stringify","members","showDialog","sceneId","_id","renderSelectIdDialog","key","socket","dialogName","title","I18n","t","selected","onOk","onClose","renderOnTrueFalse","name","on","className","classes","editItem","onTrue","onFalse","enabled","right","Switch","checked","trigger","id","onChange","e","target","condition","Grid","container","spacing","item","xs","TextField","fullWidth","InputLabelProps","shrink","label","value","onClick","FormControl","InputLabel","Select","MenuItem","cron","render","width","Box","clsx","columnContainer","oneColumn","height","scroll","desc","sm","width100","engine","instances","map","replace","min","burstInterval","helperText","type","parseInt","FormControlLabel","style","paddingTop","control","Checkbox","virtualGroup","withStyles","theme","alignRight","textAlign","buttonsContainer","margin","display","flexDirection","float","overflowY","overflowX","paddingRight","marginBottom","color","palette","p","background","SceneMembersForm","memberStateChange","states","val","objectTypes","undefined","parseFloat","createSceneMembers","ids","filter","find","length","openedMembers","objectNames","Promise","all","getObject","obj","template","setIfTrue","setIfFalse","stopAllDelays","disabled","delay","Utils","getObjectNameFromObj","language","getLanguage","onFalseEnabled","push","forEach","subscribeState","showError","deleteSceneMember","i","splice","deleteDialog","unsubscribeState","renderMember","member","index","_valStr","toString","setIfTrueTolerance","Math","abs","memberTrueFalse","memberTrue","setIfFalseTolerance","memberFalse","memberUncertain","opened","includes","countEnabled","u","Paper","memberCard","memberToolbar","memberTitle","memberDesc","memberButtons","IconButton","pos","indexOf","sort","localStorage","setItem","size","marginLeft","aria-label","intervalBetweenCommands","setValue","doNotOverwrite","smallOnTrueFalse","stateValueTrue","stateValueFalse","getItemStyle","isDragging","draggableStyle","userSelect","getListStyle","isDraggingOver","sceneState","selectedSceneChanged","engineId","Toolbar","gutters","guttersZero","Typography","variant","sceneTitle","instanceNotActive","sceneSubTitle","sceneTrue","sceneFalse","sceneUncertain","testButtons","width100WithButton","defaultValue","onKeyUp","keyCode","onWriteScene","writeSceneState","sceneEnabled","Button","btnTestTrue","btnTestFalse","onDragEnd","droppableId","provided","snapshot","droppableProps","ref","innerRef","draggableId","draggableProps","dragHandleProps","placeholder","renderDeleteDialog","getItem","bind","componentDidMount","readObjects","componentWillUnmount","changed","result","destination","source","removed","results","resolve","that","updateSceneMembers","multiSelect","Dialog","open","DialogTitle","DialogActions","borderRadius","padding","fontSize","fontWeight","whiteSpace","maxWidth","overflow","textOverflow","backgroundColor","flexGrow","marginRight","position","content","top","fontStyle","minHeight","minWidth","opacity","ExportImportDialog","text","toast","renderToast","Snackbar","autoHideDuration","Alert","severity","aria-labelledby","fullScreen","aria-describedby","isImport","DialogContent","divWithoutTitle","autoFocus","mode","onLoad","editor","codeEditor","focus","themeType","newValue","readOnly","editorProps","$blockScrolling","copy","setTimeout","border","getFolderPrefix","split","shift","pop","join","FORBIDDEN_CHARS","App","GenericApp","sceneSwitch","event","scenes","selectedSceneId","selectedSceneData","setObject","refreshData","addSceneToFolderPrefix","folderPrefix","noRefresh","oldId","delObject","changeSelectedScene","renderTreeScene","level","search","ListItem","paddingLeft","button","ListItemIcon","root","itemIconRoot","itemIcon","ListItemText","primary","listItemTitle","secondary","listItemSubTitle","ListItemSecondaryAction","changingScene","CircularProgress","deleteScene","Object","keys","nextId","translations","require","setTranslations","setLanguage","userLanguage","substring","toLowerCase","query","parts","decodeURIComponent","getUrlQuery","port","host","iobForceHost","onConnectionReady","lang","systemLang","ready","folders","addFolderDialog","addFolderDialogTitle","editFolderDialog","editFolderDialogTitle","showSearch","moveDialog","newFolder","exportDialog","importDialog","menuOpened","getSystemConfig","systemConfig","getAdapterInstances","adapterName","buildTree","values","subFolders","prefix","currentFolder","findFolder","parent","folder","getData","getObjectView","_scenes","burstIntervall","from","user","ts","acl","addFolder","parentFolder","_parentFolder","renameFolder","newName","newSelectedId","promises","renderMoveDialog","newId","isIdUnique","getFolderList","subFolder","concat","toggleFolder","confirmCb","sceneChangeDialog","renderTree","noGutters","folderItem","itemIconFolder","createScene","getNewSceneId","editFolderDialogTitleOrigin","a","b","List","list","leftMenuItem","parentId","role","read","write","def","astro","cloneScene","writeScene","matches","ignoreUnsaved","renderAddFolderDialog","buttonIcon","renderEditFolderDialog","isUnique","renderSceneChangeDialog","renderExportImportDialog","importedScene","renderListToolbar","mainToolbar","textInput","renderSceneTopToolbar","showDrawer","renderSceneBottomToolbar","toolbarButtons","renderDrawerContent","heightMinusToolbar","renderSceneMembers","renderSceneSettings","renderInOneColumn","Drawer","anchor","paper","drawer","heightMinus2Toolbars","renderInMoreThanOneColumn","Container","fullWidthContainer","settingsBackground","heightMinusMargin","membersCell","themeName","renderError","withWidth","main","tabContent","cursor","paddingBottom","buttonsContainer1","marginTop","noHeight","withTheme","version","getThemeName","Sentry","dsn","release","integrations","SentryIntegrations","build","ReactDOM","onThemeChange","_theme","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.18205801.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nconst styles = theme => ({\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    width100: {\r\n        width: '100%'\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    editItem: {\r\n        display: 'block',\r\n        marginBottom: theme.spacing(2),\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    onTrue: {\r\n        background: 'lightgreen',\r\n    },\r\n    onFalse: {\r\n        background: '#ff9999',\r\n    },\r\n});\r\n\r\nclass SceneForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        this.state = {\r\n            common: sceneObj.common,\r\n            native: sceneObj.native,\r\n            showDialog: null,\r\n            sceneId: props.scene._id,\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        if (JSON.stringify(sceneObj.common) !== JSON.stringify(state.common) || JSON.stringify(sceneObj.native) !== JSON.stringify(state.native)) {\r\n            return {\r\n                common: sceneObj.common,\r\n                native: sceneObj.native,\r\n            }\r\n        }\r\n    }\r\n\r\n    setStateWithParent = (newState, cb) => {\r\n        this.setState(newState, () =>\r\n            this.props.updateScene(newState.common, newState.native, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n                key=\"selectDialog\"\r\n                socket={ this.props.socket }\r\n                dialogName=\"memberEdit\"\r\n                title={ I18n.t('Select for ') }\r\n                selected={ null }\r\n                onOk={ this.state.showDialog }\r\n                onClose={ () => this.setState({showDialog: false}) }\r\n            /> : null;\r\n    };\r\n\r\n    renderOnTrueFalse(name) {\r\n        const on = this.state.native[name];\r\n\r\n        return [\r\n            <div key=\"switch\" className={ this.props.classes.editItem }>\r\n                <h4>{ on === this.state.native.onTrue ? (this.state.native.onFalse.enabled ? I18n.t('Trigger for TRUE') : I18n.t('Trigger')) : I18n.t('Trigger for FALSE') }\r\n                    <span className={ this.props.classes.right }>\r\n                        <Switch checked={ !!on.trigger.id }\r\n                                onChange={ e => {\r\n                                    if (e.target.checked) {\r\n                                        this.setState({\r\n                                            showDialog: id => {\r\n                                                const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                native[name].trigger.id = id;\r\n                                                native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                                this.setStateWithParent({native});\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                        native[name].trigger.id = '';\r\n                                        this.setStateWithParent({native});\r\n                                    }\r\n                                } }\r\n                        />\r\n                    </span>\r\n                </h4>\r\n            </div>,\r\n            <div key=\"id\" className={ this.props.classes.editItem }>\r\n                {on.trigger.id ?\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={8}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Trigger ID') }\r\n                                value={ on.trigger.id }\r\n                                onClick={ () => {\r\n                                    this.setState({\r\n                                        showDialog: id => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.id = id;\r\n                                            native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                            this.setStateWithParent({native});\r\n                                        }\r\n                                    });\r\n                                } }\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2}>\r\n                            <FormControl>\r\n                                <InputLabel shrink={ true }>{ I18n.t('Condition') }</InputLabel>\r\n                                <Select value={ on.trigger.condition || '==' }\r\n                                        onChange={ e => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.condition = e.target.value;\r\n                                            this.setStateWithParent({native});\r\n                                        } }\r\n                                >\r\n                                    <MenuItem value=\"==\">==</MenuItem>\r\n                                    <MenuItem value=\"!=\">!=</MenuItem>\r\n                                    <MenuItem value=\">\">&gt;</MenuItem>\r\n                                    <MenuItem value=\"<\">&lt;</MenuItem>\r\n                                    <MenuItem value=\">=\">&gt;=</MenuItem>\r\n                                    <MenuItem value=\"<=\">&lt;=</MenuItem>\r\n                                    <MenuItem value=\"update\">{ I18n.t('on update') }</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps= {{shrink: true} } label={ I18n.t('Value') }\r\n                                value={ on.trigger.value || '' }\r\n                                onChange={ e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native[name].trigger.value = e.target.value;\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    : null}\r\n            </div>,\r\n            <div key=\"cron\" className={ this.props.classes.editItem }>\r\n                <TextField\r\n                    fullWidth\r\n                    InputLabelProps={{shrink: true}}\r\n                    label={ name === 'onTrue' ? I18n.t('On time (CRON expression)') : I18n.t('Off time (CRON expression)')}\r\n                    value={ on.cron || '' }\r\n                    onChange={e => {\r\n                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                        native[name].cron = e.target.value;\r\n                        this.setStateWithParent({native});\r\n                    }}\r\n                />\r\n            </div>\r\n        ];\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.width);\r\n        let result = <Box key=\"sceneForm\" className={ clsx(this.props.classes.columnContainer, !this.props.oneColumn && this.props.classes.height) }>\r\n            <Box className={ this.props.classes.scroll }>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene name') }\r\n                        value={ this.state.common.name }\r\n                        onChange={ e => {\r\n                           const common = JSON.parse(JSON.stringify(this.state.common));\r\n                           common.name = e.target.value;\r\n                           this.setStateWithParent({common});\r\n                       } }/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene description') }\r\n                        value={ this.state.common.desc }\r\n                        onChange={ e => {\r\n                               const common = JSON.parse(JSON.stringify(this.state.common));\r\n                               common.desc = e.target.value;\r\n                               this.setStateWithParent({common});\r\n                           }\r\n                        }/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={ 1 }>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControl className={this.props.classes.width100}>\r\n                                <InputLabel shrink={true}>{ I18n.t('Instance') }</InputLabel>\r\n                                <Select\r\n                                    value={ this.state.common.engine }\r\n                                    onChange={e => {\r\n                                        const common = JSON.parse(JSON.stringify(this.state.common));\r\n                                        common.engine = e.target.value;\r\n                                        this.setStateWithParent({common});\r\n                                    }}\r\n                                >\r\n                                    { this.props.instances.map(id => <MenuItem key={ id } value={ id }>{ id.replace('system.adapter.', '') }</MenuItem>) }\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Interval between commands') }\r\n                                min={ 0 }\r\n                                value={ this.state.native.burstInterval || 0 }\r\n                                helperText=\"ms\"\r\n                                type=\"number\"\r\n                                onChange={e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native.burstInterval = parseInt(e.target.value, 10);\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControlLabel\r\n                                style={{paddingTop: 10}}\r\n                                title={ I18n.t('virtual_group_tooltip') }\r\n                                label={ I18n.t('Virtual group') } control={\r\n                                <Checkbox checked={this.state.native.virtualGroup}\r\n                                          onChange={e => {\r\n                                              const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                              native.virtualGroup = e.target.checked;\r\n                                              this.setStateWithParent({native});\r\n                                          }}/>\r\n                            }/>\r\n                        </Grid>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            { !this.state.native.virtualGroup ?\r\n                                <FormControlLabel\r\n                                    style={{paddingTop: 10}}\r\n                                    label={I18n.t('Set value if false')}\r\n                                    control={\r\n                                          <Checkbox\r\n                                              checked={ this.state.native.onFalse.enabled }\r\n                                                    onChange={e => {\r\n                                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                        native.onFalse.enabled = e.target.checked;\r\n                                                        this.setStateWithParent({native});\r\n                                                    }}/>}\r\n                                />\r\n                                : null}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                { !this.state.native.virtualGroup ? this.renderOnTrueFalse('onTrue') : null }\r\n                { !this.state.native.virtualGroup && this.state.native.onFalse.enabled ? this.renderOnTrueFalse('onFalse') : null }\r\n            </Box>\r\n        </Box>;\r\n\r\n        return [\r\n            result,\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateScene: PropTypes.func.isRequired,\r\n    instances: PropTypes.array,\r\n    oneColumn: PropTypes.bool,\r\n    showError: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(SceneForm);","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\n// own components\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\n// icons\r\nimport {AiOutlineClockCircle as IconClock} from 'react-icons/ai';\r\nimport {MdDelete as IconDelete} from 'react-icons/md';\r\nimport {MdModeEdit as IconEdit} from 'react-icons/md';\r\nimport {IoMdClose as IconClose} from 'react-icons/io';\r\nimport {MdAdd as IconAdd} from 'react-icons/md';\r\nimport {MdPlayArrow as IconPlay} from 'react-icons/md';\r\n\r\nconst TRUE_COLOR       = '#90ee90';\r\nconst FALSE_COLOR      = '#ff9999';\r\nconst TRUE_DARK_COLOR  = '#528952';\r\nconst FALSE_DARK_COLOR = '#774747';\r\nconst UNCERTAIN_COLOR  = '#bfb7be';\r\n\r\nconst styles = theme => ({\r\n    memberTrueFalse: {\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n        fontSize: 'initial',\r\n        fontWeight: 'initial',\r\n        margin: '0 ' + theme.spacing(1) + 'px',\r\n        textAlign: 'right',\r\n        whiteSpace: 'nowrap',\r\n        maxWidth: 300,\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    memberTrue: {\r\n        backgroundColor: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    memberFalse: {\r\n        backgroundColor: 'pink',\r\n    },\r\n    memberUncertain: {\r\n        color: '#FFF',\r\n        backgroundColor: '#808080',\r\n    },\r\n    memberCard: {\r\n        padding: 4,\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    guttersZero: {\r\n        padding: 0,\r\n    },\r\n    sceneTitle: {\r\n        flexGrow: 1,\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    sceneSubTitle: {\r\n        fontSize: 'small',\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n    },\r\n    sceneTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    sceneFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n    },\r\n    sceneUncertain: {\r\n        background: UNCERTAIN_COLOR,\r\n    },\r\n    btnTestTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n        marginRight: theme.spacing(1),\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    btnTestFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    smallOnTrueFalse: {\r\n        fontSize: 'small',\r\n        textAlign: 'right',\r\n        width: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    stateValueTrue: {\r\n        color: '#60a060',\r\n        fontWeight: 'bold',\r\n    },\r\n    stateValueFalse: {\r\n        color: '#c15454',\r\n        fontWeight: 'bold',\r\n    },\r\n    changed: {\r\n        position: 'relative',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            width: 6,\r\n            height: 6,\r\n            borderRadius: 6,\r\n            background: '#FF0000',\r\n            position: 'absolute',\r\n            top: 5,\r\n            right: 5,\r\n        },\r\n    },\r\n    memberDesc: {\r\n        display: 'inline-block',\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n    },\r\n    memberTitle: {\r\n        fontSize: 14,\r\n        fontWeight: 'bold',\r\n    },\r\n    memberToolbar: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        minHeight: 72,\r\n    },\r\n    memberButtons: {\r\n        textAlign: 'right',\r\n        position: 'absolute',\r\n        top: 2,\r\n        right: 2,\r\n    },\r\n    width100WithButton: {\r\n        width: 'calc(100% - 48px)',\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n    testButtons: {\r\n        minHeight: 48,\r\n    },\r\n    setValue: {\r\n        width: 'calc(50% - ' + theme.spacing(1) + 'px)',\r\n        minWidth: 100,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    disabled: {\r\n        opacity: 0.3\r\n    },\r\n    instanceNotActive: {\r\n        marginLeft: theme.spacing(1),\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n        color: '#FF0000',\r\n    }\r\n});\r\n\r\nclass SceneMembersForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let openedMembers = window.localStorage.getItem('Scenes.openedMembers') || '[]';\r\n        try {\r\n            openedMembers = JSON.parse(openedMembers);\r\n        } catch (e) {\r\n            openedMembers = [];\r\n        }\r\n\r\n        this.state = {\r\n            states: {},\r\n            openedMembers,\r\n            objectTypes: {},\r\n            objectNames: {},\r\n            members: JSON.parse(JSON.stringify(props.members)),\r\n            writeSceneState: '',\r\n            deleteDialog: null,\r\n            onFalseEnabled: props.onFalseEnabled,\r\n            virtualGroup: props.virtualGroup,\r\n            sceneEnabled: props.sceneEnabled,\r\n            selectedSceneChanged: props.selectedSceneChanged,\r\n            engineId: props.engineId,\r\n        };\r\n\r\n        this.engineId = this.state.engineId;\r\n\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.readObjects()\r\n            .then(newState =>\r\n                this.setState(newState, () => {\r\n                    // subscribe on scene state\r\n                    this.props.socket.subscribeState(this.props.sceneId, this.memberStateChange);\r\n                    this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n                    // subscribe on all states\r\n                    this.state.members.forEach(member =>\r\n                        member.id && this.props.socket.subscribeState(member.id, this.memberStateChange))\r\n                }));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.unsubscribeState(this.props.sceneId, this.memberStateChange);\r\n        this.state.engineId && this.props.socket.unsubscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n        this.state.members.forEach(member =>\r\n            this.props.socket.unsubscribeState(member.id, this.memberStateChange));\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const newState = {};\r\n        let changed = false;\r\n\r\n        if (props.onFalseEnabled !== state.onFalseEnabled) {\r\n            newState.onFalseEnabled = props.onFalseEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.virtualGroup !== state.virtualGroup) {\r\n            newState.virtualGroup = props.virtualGroup;\r\n            changed = true;\r\n        }\r\n        if (props.selectedSceneChanged !== state.selectedSceneChanged) {\r\n            newState.selectedSceneChanged = props.selectedSceneChanged;\r\n            changed = true;\r\n        }\r\n        if (props.sceneEnabled !== state.sceneEnabled) {\r\n            newState.sceneEnabled = props.sceneEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.engineId !== state.engineId) {\r\n            newState.engineId = props.engineId;\r\n            changed = true;\r\n        }\r\n\r\n        return changed ? newState : null;\r\n    }\r\n\r\n    onDragEnd(result) {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n        const members = JSON.parse(JSON.stringify(this.state.members));\r\n        const [removed] = members.splice(result.source.index, 1);\r\n        members.splice(result.destination.index, 0, removed);\r\n\r\n        this.setStateWithParent({members});\r\n    }\r\n\r\n    readObjects() {\r\n        if (this.state.members) {\r\n            return Promise.all(\r\n                this.state.members.map(member =>\r\n                    this.props.socket.getObject(member.id)))\r\n                .then(results => {\r\n                    const objectTypes = {};\r\n                    const objectNames = {};\r\n                    results.forEach(obj => {\r\n                        if (obj && obj.common && obj.common.type) {\r\n                            objectTypes[obj._id] = obj.common.type;\r\n                            objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, false);\r\n                        }\r\n                    });\r\n\r\n                    return {objectTypes, objectNames};\r\n                })\r\n                .catch(e => this.props.showError(e));\r\n        } else {\r\n            return Promise.resolve({});\r\n        }\r\n    }\r\n\r\n    memberStateChange = (id, state) => {\r\n        const states = JSON.parse(JSON.stringify(this.state.states));\r\n        states[id] = state ? state.val : null;\r\n        const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n\r\n        if (!objectTypes[id] && states[id] !== null && states[id] !== undefined) {\r\n            objectTypes[id] = typeof states[id];\r\n        }\r\n\r\n        if (objectTypes[id] === 'boolean') {\r\n            if (states[id] === 'true') {\r\n                states[id] = true;\r\n            }\r\n            if (states[id] === 'false') {\r\n                states[id] = false;\r\n            }\r\n        } else if (objectTypes[id] === 'number') {\r\n            states[id] = parseFloat(states[id]);\r\n        }\r\n\r\n        this.setState({states, objectTypes});\r\n    };\r\n\r\n    createSceneMembers = ids => {\r\n        this.setState({showDialog: false}, () => {\r\n            // filter out yet existing IDs\r\n            ids = ids.filter(id => !this.state.members.find(item => item.id === id));\r\n            if (ids.length) {\r\n                const openedMembers = [...this.state.openedMembers];\r\n                const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n                const objectNames = JSON.parse(JSON.stringify(this.state.objectNames));\r\n                const members     = JSON.parse(JSON.stringify(this.state.members));\r\n\r\n                Promise.all(ids.map(id =>\r\n                    // Read type of state\r\n                    this.props.socket.getObject(id)\r\n                        .then(obj => {\r\n                            if (!obj) {\r\n                                return;\r\n                            }\r\n\r\n                            const template = {\r\n                                id,\r\n                                setIfTrue: null,\r\n                                setIfFalse: null,\r\n                                stopAllDelays: true,\r\n                                desc: null,\r\n                                disabled: false,\r\n                                delay: 0\r\n                            };\r\n\r\n                            if (obj) {\r\n                                objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, true);\r\n                            }\r\n\r\n\r\n                            if (obj && obj.common && obj.common.type) {\r\n                                objectTypes[id] = obj.common.type;\r\n\r\n                                if (objectTypes[id] === 'boolean') {\r\n                                    template.setIfTrue = true;\r\n                                    if (this.state.onFalseEnabled) {\r\n                                        template.setIfFalse = false;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            members.push(template);\r\n\r\n                            // open added state\r\n                            openedMembers.push(id);\r\n                        })\r\n                        .then(() => this.setStateWithParent({objectTypes, objectNames, members, openedMembers}, () =>\r\n                            // Subscribe on all new members\r\n                            ids.forEach(id => this.props.socket.subscribeState(id, this.memberStateChange)))\r\n                        )\r\n                    )\r\n                )\r\n                    .catch(e => this.props.showError(e));\r\n            } else {\r\n                // Show alert\r\n                this.props.showError(I18n.t('Unknown error!'));\r\n            }\r\n        });\r\n    };\r\n\r\n    deleteSceneMember = id => {\r\n        let members = JSON.parse(JSON.stringify(this.state.members));\r\n\r\n        for (let i = 0; i < members.length; i++) {\r\n            if (members[i].id === id) {\r\n                members.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        this.setStateWithParent({members, deleteDialog: null}, () =>\r\n            this.props.socket.unsubscribeState(id, this.memberStateChange));\r\n    };\r\n\r\n    setStateWithParent(newState, cb) {\r\n        const that = this;\r\n        this.setState(newState, () =>\r\n            this.props.updateSceneMembers(that.state.members, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n            key=\"selectDialogMembers\"\r\n            socket={ this.props.socket }\r\n            dialogName=\"memberEdit\"\r\n            multiSelect={ true }\r\n            title={ I18n.t('Select for ') }\r\n            selected={ null }\r\n            onOk={ id => this.createSceneMembers(id) }\r\n            onClose={ () => this.setState({showDialog: false}) }\r\n        /> : null;\r\n    }\r\n\r\n    renderDeleteDialog() {\r\n        if (this.state.deleteDialog === null) {\r\n            return;\r\n        }\r\n\r\n        return <Dialog\r\n            open={ true }\r\n            key=\"deleteDialog\"\r\n            onClose={ () =>\r\n                this.setState({deleteDialog: null}) }\r\n            >\r\n                <DialogTitle>{ I18n.t('Are you sure for delete this state?') }</DialogTitle>\r\n\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: null}) }>\r\n                        {I18n.t('Cancel')}\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={ e => this.deleteSceneMember(this.state.deleteDialog) }>\r\n                        { I18n.t('Delete') }\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>;\r\n    };\r\n\r\n    renderMember = (member, index) => {\r\n        let value = null;\r\n        const classes = this.props.classes;\r\n        if (this.state.states[member.id] !== undefined && this.state.states[member.id] !== null) {\r\n            let _valStr = this.state.states[member.id].toString();\r\n\r\n            if (_valStr === 'true') {\r\n                _valStr = 'TRUE';\r\n            } else if (_valStr === 'false') {\r\n                _valStr = 'FALSE';\r\n            }\r\n\r\n            if (member.setIfTrueTolerance && Math.abs(this.state.states[member.id] - member.setIfTrue) <= member.setIfTrueTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (this.state.states[member.id] === member.setIfTrue) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && member.setIfFalseTolerance && Math.abs(this.state.states[member.id] - member.setIfFalse) <= member.setIfFalseTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && this.state.states[member.id] === member.setIfFalse) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberUncertain) }>{ _valStr }</div>;\r\n            }\r\n        }\r\n\r\n        let setIfTrue = member.setIfTrue;\r\n        if (setIfTrue === undefined || setIfTrue === null) {\r\n            setIfTrue = '';\r\n        } else {\r\n            if (setIfTrue === true) {\r\n                setIfTrue = 'TRUE';\r\n            } else if (setIfTrue === false) {\r\n                setIfTrue = 'FALSE';\r\n            } else {\r\n                if (member.setIfTrueTolerance) {\r\n                    setIfTrue = setIfTrue + '±' + member.setIfTrueTolerance;\r\n                } else {\r\n                    setIfTrue = setIfTrue.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        let setIfFalse = member.setIfFalse;\r\n        if (setIfFalse === undefined || setIfFalse === null) {\r\n            setIfFalse = '';\r\n        } else {\r\n            if (setIfFalse === true) {\r\n                setIfFalse = 'TRUE';\r\n            } else if (setIfFalse === false) {\r\n                setIfFalse = 'FALSE';\r\n            } else {\r\n                if (member.setIfFalseTolerance) {\r\n                    setIfFalse = setIfFalse + '±' + member.setIfFalseTolerance;\r\n                } else {\r\n                    setIfFalse = setIfFalse.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        const opened = this.state.openedMembers.includes(member.id);\r\n        const onFalseEnabled = !this.state.virtualGroup && this.state.onFalseEnabled;\r\n\r\n        // calculate enabled states\r\n        let countEnabled = 0;\r\n        for (let u = 0; u < index; u++) {\r\n            if (!this.state.members[u].disabled) {\r\n                countEnabled++;\r\n            }\r\n        }\r\n\r\n        return <Paper key={ member.id } className={ clsx(classes.memberCard, member.disabled && classes.disabled) }>\r\n            <div className={ classes.memberToolbar }>\r\n                <div className={ classes.memberTitle }>{ member.id }</div>\r\n                <div className={ classes.memberDesc }>{ member.desc || this.state.objectNames[member.id] || '' }</div>\r\n                <div className={ classes.memberButtons }>\r\n                    <IconButton title={ I18n.t('Edit') } onClick={ () => {\r\n                        const openedMembers = [...this.state.openedMembers];\r\n                        const pos = openedMembers.indexOf(member.id);\r\n                        if (pos !== -1) {\r\n                            openedMembers.splice(pos, 1);\r\n                        } else {\r\n                            openedMembers.push(member.id);\r\n                            openedMembers.sort();\r\n                        }\r\n                        window.localStorage.setItem('Scenes.openedMembers', JSON.stringify(openedMembers));\r\n                        this.setState({openedMembers});\r\n                    }}>\r\n                        { opened ? <IconClose/> : <IconEdit/> }\r\n                    </IconButton>\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 5 }} aria-label=\"Delete\" title={I18n.t('Delete')}\r\n                        onClick={ () => this.setState({deleteDialog: member.id}) }>\r\n                        <IconDelete/>\r\n                    </IconButton>\r\n                    <Switch\r\n                        checked={ !member.disabled }\r\n                        onChange={ e => {\r\n                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                            members[index].disabled = !e.target.checked;\r\n                            this.setStateWithParent({members});\r\n                        }}\r\n                        name={ member.id }\r\n                    />\r\n                    { value }\r\n                </div>\r\n            </div>\r\n            <div>{ member.desc } { !opened && !member.disabled && (this.props.intervalBetweenCommands || member.delay) ?\r\n                <span> <IconClock/> { this.props.intervalBetweenCommands * countEnabled + (member.delay || 0) + I18n.t('ms') + ' ' + I18n.t('from scene start')}</span> : null }</div>\r\n            {\r\n                opened ?\r\n                    <div>\r\n                        {/*<Box className={classes.p}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}} label={I18n.t('Description')}\r\n                                value={member.desc || ''}\r\n                                onChange={e => {\r\n                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                    members[index].desc = e.target.value;\r\n                                    this.setStateWithParent({members});\r\n                                }}\r\n                            />\r\n                        </Box>*/ }\r\n                        { !this.state.virtualGroup ? <Box className={ classes.p }>\r\n                            { this.state.objectTypes[member.id] === 'boolean' ?\r\n                                <FormControl className={ classes.setValue }>\r\n                                    <InputLabel>{ onFalseEnabled ? I18n.t('Setpoint by TRUE') : I18n.t('Setpoint') }</InputLabel>\r\n                                    <Select\r\n                                        value={ member.setIfTrue === true || member.setIfTrue === 'true' ? 'true' : 'false'}\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].setIfTrue = e.target.value === 'true';\r\n                                            this.setStateWithParent({members});\r\n                                        } }\r\n                                    >\r\n                                        <MenuItem value=\"false\">FALSE</MenuItem>\r\n                                        <MenuItem value=\"true\">TRUE</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                                :\r\n                                <Box className={ classes.p }>\r\n                                    <TextField\r\n                                        InputLabelProps={ {shrink: true} }\r\n                                        label={ onFalseEnabled ? I18n.t('Setpoint by TRUE') : I18n.t('Setpoint') }\r\n                                        value={ member.setIfTrue === undefined || member.setIfTrue === null ? '' : member.setIfTrue }\r\n                                        className={ classes.setValue }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            if (this.state.objectTypes[member.id] === 'number') {\r\n                                                members[index].setIfTrue = parseFloat(e.target.value.replace(',', '.'));\r\n                                            } else {\r\n                                                members[index].setIfTrue = e.target.value;\r\n                                            }\r\n\r\n                                            this.setStateWithParent({members});\r\n                                         } }/>\r\n                                    <TextField\r\n                                        InputLabelProps={ {shrink: true} }\r\n                                        label={ '± ' + (onFalseEnabled ? I18n.t('Tolerance by TRUE') : I18n.t('Tolerance')) }\r\n                                        value={ member.setIfTrueTolerance === undefined || member.setIfTrueTolerance === null ? '' : member.setIfTrueTolerance }\r\n                                        title={ I18n.t('Absolute value, not percent') }\r\n                                        className={ classes.setValue }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].setIfTrueTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                                            this.setStateWithParent({members});\r\n                                        } }/>\r\n                                </Box>\r\n                            }\r\n                        </Box> : null }\r\n                        { !this.state.virtualGroup && this.state.onFalseEnabled ?\r\n                            <Box className={ classes.p }>\r\n                                {\r\n                                    this.state.objectTypes[member.id] === 'boolean' ?\r\n                                        <FormControl className={ classes.setValue }>\r\n                                            <InputLabel>{ I18n.t('Setpoint by FALSE') }</InputLabel>\r\n                                            <Select\r\n                                                value={ member.setIfFalse === true || member.setIfFalse === 'true' ? 'true' : 'false'}\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].setIfFalse = e.target.value === 'true';\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            >\r\n                                                <MenuItem value=\"false\">FALSE</MenuItem>\r\n                                                <MenuItem value=\"true\">TRUE</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        <Box className={ classes.p }>\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                InputLabelProps={ {shrink: true} }\r\n                                                label={ I18n.t('Setpoint by FALSE') }\r\n                                                value={ member.setIfFalse === undefined || member.setIfFalse === null ? '' : member.setIfFalse }\r\n                                                className={ classes.setValue }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    if (this.state.objectTypes[member.id] === 'number') {\r\n                                                        members[index].setIfFalse = parseFloat(e.target.value.replace(',', '.'));\r\n                                                    } else {\r\n                                                        members[index].setIfFalse = e.target.value;\r\n                                                    }\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                            <TextField\r\n                                                InputLabelProps={ {shrink: true} }\r\n                                                label={ '± ' + I18n.t('Tolerance by FALSE') }\r\n                                                title={ I18n.t('Absolute value, not percent') }\r\n                                                value={ member.setIfFalseTolerance === undefined || member.setIfFalseTolerance === null ? '' : member.setIfFalseTolerance }\r\n                                                className={ classes.setValue }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].setIfFalseTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                        </Box>\r\n                                }\r\n                            </Box>\r\n                            : null}\r\n                        <Box className={ classes.p }>\r\n                            <Grid container spacing={ 4 }>\r\n                                <Grid item xs={ 12 } sm={ 6 }>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        InputLabelProps={{shrink: true}}\r\n                                        label={ I18n.t('Delay from start of scene (ms)')}\r\n                                        title={ I18n.t(\r\n                                            'Additionally to the interval between commands. E.g. if the interval %s, this state will be set after %s ms from scene start',\r\n                                            this.props.intervalBetweenCommands,\r\n                                            this.props.intervalBetweenCommands * index + (member.delay || 0)\r\n                                        )}\r\n                                        value={ member.delay || 0}\r\n                                        min={ 0 }\r\n                                        type=\"number\"\r\n                                        onChange={e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].delay = parseInt(e.target.value, 10);\r\n                                            this.setStateWithParent({members});\r\n                                        }}/>\r\n                                </Grid>\r\n                                <Grid item xs={ 12 } sm={ 6 }>\r\n                                    <FormControlLabel\r\n                                        label={ I18n.t('Stop already started commands') }\r\n                                        control={\r\n                                            <Checkbox\r\n                                                checked={ member.stopAllDelays }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].stopAllDelays = e.target.checked;\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                    }/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                        <Box className={ classes.p }>\r\n                            <FormControlLabel\r\n                                label={ I18n.t('Do not overwrite state if it has the required value') }\r\n                                title={\r\n                                    I18n.t('For example, if the value is already at \"%s\" and \"%s\" is the setpoint, then write the value anyway if this checkbox is activated.',\r\n                                        member.setIfTrue === undefined || member.setIfTrue === null ? 'null' : member.setIfTrue.toString(),\r\n                                        member.setIfTrue === undefined || member.setIfTrue === null ? 'null' : member.setIfTrue.toString())\r\n                                }\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={ !!member.doNotOverwrite }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].doNotOverwrite = e.target.checked;\r\n                                            this.setStateWithParent({members});\r\n                                        } }\r\n                                    />\r\n                            }/>\r\n                        </Box>\r\n                    </div> :\r\n                    (!this.state.virtualGroup ? <div className={ classes.smallOnTrueFalse }>\r\n                        { I18n.t('Set if TRUE') + ': ' } <span className={ classes.stateValueTrue }>{ setIfTrue }</span>\r\n                        { this.state.onFalseEnabled ? ' / ' + I18n.t('Set if FALSE') + ': ' : null}\r\n                        { this.state.onFalseEnabled ? <span className={ classes.stateValueFalse }>{ setIfFalse }</span> : null}\r\n                    </div> : <div style={ {height: 8} }/>)\r\n            }\r\n        </Paper>\r\n    };\r\n\r\n    onWriteScene(val) {\r\n        if (val === 'true') {\r\n            val = true;\r\n        } else if (val === 'false') {\r\n            val = false;\r\n        } else if (typeof val === 'string' && parseFloat(val.replace(',', '.')).toString() === val) {\r\n            val = parseFloat(val.replace(',', '.'));\r\n        }\r\n\r\n        this.props.socket.setState(this.props.sceneId, val)\r\n            .catch(e => this.props.showError(e));\r\n    }\r\n\r\n    getItemStyle = (isDragging, draggableStyle) => ({\r\n        // some basic styles to make the items look a bit nicer\r\n        userSelect: 'none',\r\n        background: isDragging ? 'lightgreen' : 'inherit',\r\n\r\n        // styles we need to apply on draggables\r\n        ...draggableStyle\r\n    });\r\n\r\n    getListStyle = isDraggingOver => ({\r\n        background: isDraggingOver ? 'lightblue' : 'inherit',\r\n    });\r\n\r\n    render = () => {\r\n        let sceneState = this.state.states[this.props.sceneId];\r\n        if (this.state.selectedSceneChanged) {\r\n            sceneState = I18n.t('Save scene before test');\r\n        } else if (sceneState === undefined || sceneState === null) {\r\n            sceneState = '';\r\n        }\r\n\r\n        if (this.engineId !== this.state.engineId) {\r\n            this.engineId && this.props.socket.unsubscribeState(this.engineId + '.alive', this.memberStateChange);\r\n            this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n            this.engineId = this.state.engineId;\r\n        }\r\n\r\n        const onFalseEnabled =!this.state.virtualGroup && this.state.onFalseEnabled;\r\n\r\n        let result = <div key=\"SceneMembersForm\" className={ clsx(!this.props.oneColumn && this.props.classes.height, this.props.classes.columnContainer) }>\r\n            <Toolbar classes={{ gutters: this.props.classes.guttersZero }}>\r\n                <Typography variant=\"h6\" className={ clsx(this.props.classes.sceneTitle) } >\r\n                    { I18n.t('Scene states') }{ !this.state.states[this.state.engineId + '.alive'] ? <span className={ this.props.classes.instanceNotActive }>{ I18n.t('Instance not active') }</span> : ''}\r\n                    <br/>\r\n                    <span className={ clsx(\r\n                        this.props.classes.sceneSubTitle,\r\n                        !this.state.virtualGroup && sceneState === true && this.props.classes.sceneTrue,\r\n                        !this.state.virtualGroup && sceneState === false && this.props.classes.sceneFalse,\r\n                        !this.state.virtualGroup && sceneState === 'uncertain' && this.props.classes.sceneUncertain,\r\n                    ) }>{ I18n.t('Scene state:') } { sceneState === true ? 'TRUE' : (sceneState === false ? 'FALSE' : sceneState.toString()) }</span>\r\n                </Typography>\r\n                <IconButton title={I18n.t('Add new state')} onClick={() => this.setState({showDialog: true})}>\r\n                    <IconAdd/>\r\n                </IconButton>\r\n            </Toolbar>\r\n            <div className={ clsx(this.props.classes.testButtons, this.props.classes.width100) }>\r\n                {  !this.state.selectedSceneChanged && this.state.virtualGroup ? <TextField\r\n                    className={ this.props.classes.width100WithButton }\r\n                    label={ I18n.t('Write to virtual group') }\r\n                    defaultValue={ sceneState }\r\n                    onKeyUp={e => e.keyCode === 13 && this.onWriteScene(this.state.writeSceneState)}\r\n                    onChange={e => this.setState({writeSceneState: e.target.value}) }\r\n                /> : null}\r\n                { !this.state.selectedSceneChanged && this.state.virtualGroup && this.state.members.length ? <IconButton\r\n                    onClick={e => this.onWriteScene(this.state.writeSceneState) }\r\n                ><IconPlay/></IconButton> : null}\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && !this.state.virtualGroup ? <Button\r\n                    className={ this.props.classes.btnTestTrue }\r\n                    onClick={ () => this.onWriteScene(true) }\r\n                ><IconPlay/>{ !onFalseEnabled ? I18n.t('Test') : I18n.t('Test TRUE') }</Button> : null }\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && onFalseEnabled && this.state.members.length ? <Button\r\n                    className={ this.props.classes.btnTestFalse }\r\n                    onClick={ () => this.onWriteScene(false) }\r\n                ><IconPlay/>{ I18n.t('Test FALSE') }</Button> : null }\r\n            </div>\r\n            <DragDropContext onDragEnd={ this.onDragEnd }>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div className={ this.props.classes.scroll }\r\n                             {...provided.droppableProps}\r\n                             ref={ provided.innerRef }\r\n                             style={ this.getListStyle(snapshot.isDraggingOver) }\r\n                        >\r\n                            { this.state.members.map((member, i) =>\r\n                                <Draggable key={ member.id } draggableId={ member.id } index={ i }>\r\n                                    {(provided, snapshot) =>\r\n                                        <div\r\n                                            ref={ provided.innerRef }\r\n                                            {...provided.draggableProps }\r\n                                            {...provided.dragHandleProps }\r\n                                            style={ this.getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            ) }\r\n                                        >{ this.renderMember(member, i) }</div>}\r\n                                </Draggable>\r\n                            )}\r\n                            { provided.placeholder }\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>;\r\n\r\n        return [\r\n            result,\r\n            this.renderDeleteDialog(),\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneMembersForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateSceneMembers: PropTypes.func,\r\n    sceneId: PropTypes.string,\r\n    onFalseEnabled: PropTypes.bool,\r\n    virtualGroup: PropTypes.bool,\r\n    sceneEnabled: PropTypes.bool,\r\n    selectedSceneChanged: PropTypes.bool,\r\n    intervalBetweenCommands: PropTypes.number,\r\n    engineId: PropTypes.string,\r\n    oneColumn: PropTypes.bool,\r\n    showError: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(SceneMembersForm);","// Common\r\nimport React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nimport AceEditor from 'react-ace';\r\n//import 'ace-builds/src-noconflict/mode-json';\r\nimport 'ace-builds/src-noconflict/theme-clouds_midnight';\r\nimport 'ace-builds/src-noconflict/theme-chrome';\r\nimport 'ace-builds/src-noconflict/ext-language_tools'\r\n\r\n// Own\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport copy from '@iobroker/adapter-react/Components/copy-to-clipboard';\r\n\r\nconst styles = theme => ({\r\n    divWithoutTitle: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: '2px solid #00000000',\r\n    },\r\n    error: {\r\n        border: '2px solid #FF0000',\r\n    },\r\n});\r\n\r\nclass ExportImportDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            text: props.sceneObj ? JSON.stringify(props.sceneObj, null, 2) : '',\r\n            error: false,\r\n            toast: '',\r\n        };\r\n    }\r\n\r\n    onChange(value) {\r\n        const newState = {text: value};\r\n        try {\r\n            JSON.parse(value);\r\n            if (this.state.error) {\r\n                newState.error = false;\r\n            }\r\n\r\n            this.setState(newState);\r\n        } catch (e) {\r\n            newState.error = true;\r\n            this.setState(newState);\r\n        }\r\n    }\r\n\r\n    renderToast() {\r\n        return <Snackbar open={ !!this.state.toast } autoHideDuration={ 3000 } onClick={ () => this.setState({ toast: '' }) } onClose={ () => this.setState({ toast: '' }) }>\r\n            <Alert color=\"info\" severity=\"success\" >{ this.state.toast }</Alert>\r\n        </Snackbar>;\r\n    }\r\n\r\n    render() {\r\n        return <Dialog\r\n            open={ true }\r\n            onClose={ () => this.props.onClose() }\r\n            aria-labelledby=\"export-dialog-title\"\r\n            fullWidth\r\n            maxWidth=\"lg\"\r\n            fullScreen={ true }\r\n            aria-describedby=\"export-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"export-dialog-title\">{ this.props.isImport ? I18n.t('Import scene') : I18n.t('Export scene') }</DialogTitle>\r\n            <DialogContent>\r\n                <div className={ clsx(this.props.classes.divWithoutTitle, this.state.error && this.props.classes.error) }>\r\n                    <AceEditor\r\n                        autoFocus\r\n                        mode=\"json\"\r\n                        width=\"100%\"\r\n                        height=\"100%\"\r\n                        onLoad={editor => {\r\n                            this.codeEditor = editor;\r\n                            this.codeEditor.focus();\r\n                        }}\r\n                        theme={ this.props.themeType === 'dark' ? 'clouds_midnight' : 'chrome' }\r\n                        onChange={ newValue => this.onChange(newValue) }\r\n                        value={ this.state.text || '' }\r\n                        name=\"UNIQUE_ID_OF_DIV\"\r\n                        fontSize={ 14 }\r\n                        readOnly={ !this.props.isImport }\r\n                        editorProps={{ $blockScrolling: true }}\r\n                    />\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={ () => this.props.onClose() } autoFocus={ !this.props.isImport }>\r\n                    { I18n.t('Close') }\r\n                </Button>\r\n                { this.props.isImport ?\r\n                    <Button\r\n                        disabled={ !this.state.text || this.state.error }\r\n                        onClick={ () => this.props.onClose(JSON.parse(this.state.text)) }\r\n                        color=\"primary\"\r\n                    >\r\n                        { I18n.t('Import') }\r\n                    </Button>\r\n                    :\r\n                    <Button onClick={ () => {\r\n                        copy(this.state.text);\r\n                        this.setState({ toast: I18n.t('Copied') });\r\n                        setTimeout(() => this.props.onClose(), 500);\r\n                    } } color=\"primary\" autoFocus>\r\n                        { I18n.t('Copy to clipboard') }\r\n                    </Button>}\r\n                { this.renderToast() }\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n}\r\n\r\nExportImportDialog.propTypes = {\r\n    classes: PropTypes.object,\r\n    sceneObj: PropTypes.object,\r\n    themeType: PropTypes.string,\r\n    onClose: PropTypes.func,\r\n    isImport: PropTypes.bool,\r\n};\r\n\r\nexport default withStyles(styles)(ExportImportDialog);","// Common\r\nimport React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport { withTheme } from '@material-ui/core/styles';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport withWidth from \"@material-ui/core/withWidth\";\r\n\r\n// MaterialUi\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\n// Own\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Loader from '@iobroker/adapter-react/Components/Loader'\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport SceneForm from './components/SceneForm';\r\nimport SceneMembersForm from './components/SceneMembersForm';\r\nimport ExportImportDialog from './components/ExportImportDialog';\r\n\r\n// icons\r\nimport {MdExpandLess as IconCollapse} from 'react-icons/md';\r\nimport {MdExpandMore as IconExpand} from 'react-icons/md';\r\nimport {MdAdd as IconAdd} from 'react-icons/md';\r\nimport {MdModeEdit as IconEdit} from 'react-icons/md';\r\nimport {RiFolderAddLine as IconFolderAdd} from 'react-icons/ri';\r\nimport {MdClose as IconCancel} from 'react-icons/md';\r\nimport {MdCheck as IconCheck} from 'react-icons/md';\r\nimport {MdSave as IconSave} from 'react-icons/md';\r\nimport {MdDelete as IconDelete} from 'react-icons/md';\r\nimport {MdFileDownload as IconExport} from 'react-icons/md';\r\nimport {FaScroll as IconScript} from 'react-icons/all';\r\nimport {FaFolder as IconFolderClosed} from 'react-icons/all';\r\nimport {FaFolderOpen as IconFolderOpened} from 'react-icons/all';\r\n// import {MdFileUpload as IconImport} from 'react-icons/md';\r\nimport {FaClone as IconClone} from 'react-icons/fa';\r\nimport {FaBars as IconMenu} from 'react-icons/fa';\r\nimport {BsFolderSymlink as IconMoveToFolder} from 'react-icons/bs';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nconst LEVEL_PADDING = 16;\r\nconst MARGIN_MEMBERS = 20;\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        height: 'calc(100% + 4px)',\r\n        backgroundColor: theme.palette.type === 'dark' ? '#000': '#fff',\r\n        overflowX: 'hidden',\r\n    },\r\n    mainToolbar: {\r\n        background: theme.palette.primary.main,\r\n    },\r\n    tabContent: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px)',\r\n        overflow: 'auto'\r\n    },\r\n    textInput: {\r\n        display: 'block',\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n    noGutters: {\r\n        paddingLeft: 0,\r\n        paddingRight: 0,\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    heightMinusToolbar: {\r\n        height: 'calc(100% - 48px)',\r\n    },\r\n    heightMinus2Toolbars: {\r\n        height: 'calc(100% - 96px)',\r\n    },\r\n    heightMinusMargin: {\r\n        height: 'calc(100% - ' + MARGIN_MEMBERS + 'px)',\r\n    },\r\n    folderItem: {\r\n        fontWeight: 'bold',\r\n        cursor: 'pointer',\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    fullWidthContainer: {\r\n        maxWidth: 'inherit',\r\n        paddingTop: 2,\r\n        paddingBottom: 2,\r\n        paddingLeft: 2,\r\n        paddingRight: 2,\r\n        overflow: 'hidden'\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        width: '100%',\r\n    },\r\n    buttonsContainer1: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    list: {\r\n        width: '100%',\r\n        padding: 0,\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    membersCell: {\r\n        backgroundColor: theme.palette.type === 'dark' ? '#566770': '#ADD8E6',\r\n        marginTop: MARGIN_MEMBERS,\r\n        marginRight: theme.spacing(1),\r\n        marginBottom: theme.spacing(2),\r\n        paddingTop: 0,\r\n        paddingLeft: 10,\r\n        paddingRight: 10,\r\n        paddingBottom: 10,\r\n\r\n        borderRadius: 4,\r\n        height: 'calc(100% - ' + theme.spacing(1) + 'px)',\r\n    },\r\n    leftMenuItem: {\r\n        display: 'block',\r\n        borderRadius: 10,\r\n    },\r\n    p: {\r\n        margin: '1em 0',\r\n    },\r\n    changed: {\r\n        position: 'relative',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            width: 6,\r\n            height: 6,\r\n            borderRadius: 6,\r\n            background: '#FF0000',\r\n            position: 'absolute',\r\n            top: 5,\r\n            right: 5,\r\n        },\r\n    },\r\n    sceneTitle: {\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n        flexGrow: 1,\r\n        paddingLeft: theme.spacing(1),\r\n    },\r\n    sceneSubTitle: {\r\n        fontSize: 'small',\r\n        display: 'block'\r\n    },\r\n    toolbarButtons: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    settingsBackground: {\r\n        background: theme.palette.type === 'dark' ? '#3a3a3a': '#eeeeee',\r\n    },\r\n    listItemTitle: {\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    listItemSubTitle: {\r\n        color: theme.palette.type === 'dark' ? '#bababa': '#2a2a2a',\r\n    },\r\n    disabled: {\r\n        opacity: 0.3\r\n    },\r\n    itemIconRoot: {\r\n        minWidth: 24 + theme.spacing(1),\r\n    },\r\n    itemIcon: {\r\n        width: 24,\r\n        height: 24,\r\n    },\r\n    itemIconFolder: {\r\n        color: theme.palette.type === 'dark' ? '#ffca2c' : '#ffca2c'\r\n    },\r\n    noHeight: {\r\n        height: 'inherit',\r\n    },\r\n    drawer: {\r\n        overflow: 'hidden'\r\n    },\r\n});\r\n\r\nfunction getUrlQuery() {\r\n    const parts = (window.location.search || '').replace(/^\\?/, '').split('&');\r\n    const query = {};\r\n    parts.forEach(item => {\r\n        const [name, val] = item.split('=');\r\n        query[decodeURIComponent(name)] = val !== undefined ? decodeURIComponent(val) : true;\r\n    });\r\n    return query;\r\n}\r\n\r\nfunction getFolderPrefix(sceneId) {\r\n    let result = sceneId.split('.');\r\n    result.shift();\r\n    result.shift();\r\n    result.pop();\r\n    result = result.join('.');\r\n    return result;\r\n}\r\n\r\nfunction getFolderList(folder) {\r\n    let result = [];\r\n    result.push(folder);\r\n    Object.values(folder.subFolders).forEach(subFolder =>\r\n        result = result.concat(getFolderList(subFolder)));\r\n\r\n    return result;\r\n}\r\n\r\nconst FORBIDDEN_CHARS = /[.\\][*,;'\"`<>\\\\?]/g;\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        super(props);\r\n        this.translations = {\r\n            'en': require('./i18n/en'),\r\n            'de': require('./i18n/de'),\r\n            'ru': require('./i18n/ru'),\r\n            'pt': require('./i18n/pt'),\r\n            'nl': require('./i18n/nl'),\r\n            'fr': require('./i18n/fr'),\r\n            'it': require('./i18n/it'),\r\n            'es': require('./i18n/es'),\r\n            'pl': require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n\r\n        // init translations\r\n        I18n.setTranslations(this.translations);\r\n        I18n.setLanguage((navigator.language || navigator.userLanguage || 'en').substring(0, 2).toLowerCase());\r\n\r\n        const query = getUrlQuery();\r\n\r\n        this.port = query.port || (window.location.port === '3000' ? 8081 : window.location.port);\r\n        this.host = query.host || window.location.hostname;\r\n\r\n        window.iobForceHost = this.host;\r\n    }\r\n\r\n    onConnectionReady() {\r\n        let opened;\r\n        try {\r\n            opened = JSON.parse(window.localStorage.getItem('Scenes.opened')) || [];\r\n        } catch (e) {\r\n            opened = [];\r\n        }\r\n\r\n        const newState = {\r\n            lang: this.socket.systemLang,\r\n            ready: false,\r\n            selectedSceneId: window.localStorage.getItem('Scenes.selectedSceneId') || '',\r\n            opened,\r\n            scenes: {},\r\n            folders: null,\r\n            search: null,\r\n            addFolderDialog: null,\r\n            addFolderDialogTitle: null,\r\n            editFolderDialog: null,\r\n            editFolderDialogTitle: null,\r\n            changingScene: '',\r\n            showSearch: null,\r\n            instances: [],\r\n            selectedSceneChanged: false,\r\n            deleteDialog: null,\r\n            moveDialog: null,\r\n            newFolder: '',\r\n            selectedSceneData: null,\r\n            exportDialog: false,\r\n            importDialog: false,\r\n            menuOpened: false,\r\n        };\r\n\r\n        this.socket.getSystemConfig()\r\n            .then(systemConfig => {\r\n                newState.systemConfig = systemConfig;\r\n\r\n                return this.socket.getAdapterInstances(window.adapterName)\r\n                    .then(instances => {\r\n                        newState.instances = instances.map(item => item._id);\r\n                        this.setState(newState, () =>\r\n                            this.refreshData());\r\n                    });\r\n            })\r\n            .catch(e => this.showError(e));\r\n    }\r\n\r\n    sceneSwitch = event => {\r\n        const id = event.target.name;\r\n        let scenes = JSON.parse(JSON.stringify(this.state.scenes));\r\n\r\n        if (id === this.state.selectedSceneId) {\r\n            scenes[id] = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n            scenes[id].common.enabled = event.target.checked;\r\n        }\r\n\r\n        scenes[id].common.enabled = event.target.checked;\r\n\r\n        this.socket.setObject(id, scenes[id])\r\n            .then(() => this.refreshData(id))\r\n            .catch(e => this.showError(e));\r\n    };\r\n\r\n    buildTree(scenes) {\r\n        scenes = Object.values(scenes);\r\n\r\n        let folders = {subFolders: {}, scenes: {}, id: '', prefix: ''};\r\n\r\n        // create missing folders\r\n        scenes.forEach((scene) => {\r\n            let id = scene._id;\r\n            const parts = id.split('.');\r\n            parts.shift();\r\n            parts.shift();\r\n            let currentFolder = folders;\r\n            let prefix = '';\r\n            for (let i = 0; i < parts.length - 1; i++) {\r\n                if (prefix) {\r\n                    prefix = prefix + '.';\r\n                }\r\n                prefix = prefix + parts[i];\r\n                if (!currentFolder.subFolders[parts[i]]) {\r\n                    currentFolder.subFolders[parts[i]] = {\r\n                        subFolders: {},\r\n                        scenes: {},\r\n                        id: parts[i],\r\n                        prefix,\r\n                    }\r\n                }\r\n                currentFolder = currentFolder.subFolders[parts[i]];\r\n            }\r\n            currentFolder.scenes[id] = scene;\r\n        });\r\n\r\n        return folders;\r\n    }\r\n\r\n    findFolder(parent, folder) {\r\n        if (parent.prefix === folder.prefix) {\r\n            return parent;\r\n        }\r\n        for (let index in parent.subFolders) {\r\n            let result = this.findFolder(parent.subFolders[index], folder);\r\n            if (result) {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    getData() {\r\n        let scenes;\r\n        return this.socket.getObjectView('scene.0.', 'scene.\\u9999', 'state')\r\n            .then(_scenes => {\r\n                scenes = _scenes;\r\n                return {scenes, folders: this.buildTree(scenes)};\r\n            })\r\n            .catch(e => this.showError(e));\r\n    }\r\n\r\n    refreshData(changingScene) {\r\n        const that = this;\r\n        return new Promise(resolve => {\r\n            if (changingScene) {\r\n                this.setState({changingScene}, () => resolve());\r\n            } else {\r\n                this.setState({ready: false}, () => resolve());\r\n            }\r\n        })\r\n            .then(() => this.getData())\r\n            .then(newState => {\r\n                newState.ready = true;\r\n                newState.changingScene = '';\r\n                newState.selectedSceneChanged = false;\r\n\r\n                // Fill missing data\r\n                Object.keys(newState.scenes).forEach(id => {\r\n                    const sceneObj = newState.scenes[id];\r\n                    sceneObj.common = sceneObj.common || {};\r\n                    sceneObj.native = sceneObj.native || {};\r\n\r\n                    // rename attribute\r\n                    if (sceneObj.native.burstIntervall !== undefined) {\r\n                        sceneObj.native.burstInterval = sceneObj.native.burstIntervall;\r\n                        delete sceneObj.native.burstIntervall;\r\n                    }\r\n\r\n                    sceneObj.native.burstInterval = parseInt(sceneObj.native.burstInterval || 0, 10);\r\n                    sceneObj.native.onFalse = sceneObj.native.onFalse || {};\r\n                    sceneObj.native.onTrue  = sceneObj.native.onTrue  || {};\r\n                    sceneObj.native.onFalse.trigger = sceneObj.native.onFalse.trigger || {condition: '=='};\r\n                    sceneObj.native.onTrue.trigger  = sceneObj.native.onTrue.trigger  || {condition: '=='};\r\n                    sceneObj.native.members = sceneObj.native.members || [];\r\n                    const members = sceneObj.native.members;\r\n                    delete sceneObj.native.members;\r\n                    sceneObj.native.members = members; // place it on the last place\r\n\r\n                    delete sceneObj.from;\r\n                    delete sceneObj.user;\r\n                    delete sceneObj.ts;\r\n                    delete sceneObj.acl;\r\n                });\r\n\r\n                if (!newState.scenes[this.state.selectedSceneId]) {\r\n                    newState.selectedSceneId = Object.keys(newState.scenes).shift() || '';\r\n                }\r\n\r\n                if ((newState.selectedSceneId || that.state.selectedSceneId) &&\r\n                    newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]) {\r\n                    newState.selectedSceneData = JSON.parse(JSON.stringify(newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]));\r\n                } else {\r\n                    newState.selectedSceneData = null;\r\n                }\r\n\r\n                that.setState(newState);\r\n            });\r\n    }\r\n\r\n    addFolder(parentFolder, id) {\r\n        let folders = JSON.parse(JSON.stringify(this.state.folders));\r\n        let _parentFolder = this.findFolder(folders, parentFolder);\r\n\r\n        let opened = JSON.parse(JSON.stringify(this.state.opened));\r\n\r\n        _parentFolder.subFolders[id] = {\r\n            scenes: {},\r\n            subFolders: {},\r\n            id,\r\n            prefix: _parentFolder.prefix ? _parentFolder.prefix + '.' + id : id\r\n        };\r\n\r\n        opened.push(id);\r\n\r\n        this.setState({folders, opened});\r\n    }\r\n\r\n    addSceneToFolderPrefix = (scene, folderPrefix, noRefresh) => {\r\n        let oldId = scene._id;\r\n        let sceneId = scene._id.split('.').pop();\r\n        scene._id = 'scene.0.' + folderPrefix + (folderPrefix ? '.' : '') + sceneId;\r\n\r\n        return this.socket.delObject(oldId)\r\n            .then(() => {\r\n                console.log('Deleted ' + oldId);\r\n                return this.socket.setObject(scene._id, scene)\r\n            })\r\n            .then(() => {\r\n                console.log('Set new ID: ' + scene._id);\r\n                return !noRefresh && this.refreshData(sceneId)\r\n                    .then(() => this.changeSelectedScene(scene._id))\r\n            })\r\n            .catch(e => this.showError(e));\r\n    };\r\n\r\n    renameFolder(folder, newName) {\r\n        return new Promise(resolve => this.setState({changingScene: folder}, () => resolve()))\r\n            .then(() => {\r\n                let newSelectedId;\r\n                let pos;\r\n                // if selected folder opened, replace its ID in this.state.opened\r\n                if ((pos = this.state.opened.indexOf(folder.prefix)) !== -1) {\r\n                    const opened = [...this.state.opened];\r\n                    opened.splice(pos, 1);\r\n                    opened.push(newName);\r\n                    opened.sort();\r\n                    this.setState({opened});\r\n                }\r\n\r\n                let prefix = folder.prefix.split('.');\r\n                prefix[prefix.length - 1] = newName;\r\n                prefix = prefix.join('.');\r\n\r\n                if (Object.keys(folder.scenes).find(id => id === this.state.selectedSceneId)) {\r\n                    newSelectedId = 'scene.0.' + prefix + '.' + this.state.selectedSceneId.split('.').pop();\r\n                }\r\n\r\n                const promises = Object.keys(folder.scenes).map(sceneId =>\r\n                    this.addSceneToFolderPrefix(folder.scenes[sceneId], prefix, true));\r\n\r\n                return Promise.all(promises)\r\n                    .then(() => this.refreshData(folder))\r\n                    .then(() => newSelectedId && this.setState({selectedSceneId: newSelectedId}));\r\n            });\r\n    }\r\n\r\n    renderMoveDialog() {\r\n        if (!this.state.moveDialog) {\r\n            return null;\r\n        }\r\n\r\n        const newFolder = this.state.newFolder === '__root__' ? '' : this.state.newFolder;\r\n        const sceneId = this.state.selectedSceneId.split('.').pop();\r\n        const newId = 'scene.0.' + newFolder + (newFolder ? '.' : '') + sceneId;\r\n\r\n        const isIdUnique = !Object.keys(this.state.scenes).find(id => id === newId);\r\n\r\n        return <Dialog\r\n            open={ true }\r\n            key=\"moveDialog\"\r\n            onClose={ () => this.setState({moveDialog: null}) }\r\n        >\r\n            <DialogTitle>{ I18n.t('Move to folder') }</DialogTitle>\r\n            <DialogContent>\r\n                <FormControl classes={ {root: this.props.classes.width100} }>\r\n                    <InputLabel shrink={ true }>{ I18n.t('Folder') }</InputLabel>\r\n                    <Select\r\n                        className={ this.props.classes.width100 }\r\n                        value={ this.state.newFolder || '__root__' }\r\n                        onChange={e => this.setState({newFolder: e.target.value}) }>\r\n                        { getFolderList(this.state.folders).map(folder =>\r\n                            <MenuItem\r\n                                key={ folder.prefix }\r\n                                value={ folder.prefix || '__root__' }\r\n                            >\r\n                                { folder.prefix ? folder.prefix.replace('.', ' > ') : I18n.t('Root') }\r\n                            </MenuItem>)\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n            </DialogContent>\r\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                <Button variant=\"contained\" onClick={ () => this.setState({moveDialog: null}) }>\r\n                    { I18n.t('Cancel') }\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    disabled={ !isIdUnique }\r\n                    color=\"primary\" onClick={ e =>\r\n                        this.setState({moveDialog: null}, () =>\r\n                            this.addSceneToFolderPrefix(this.state.scenes[this.state.selectedSceneId], this.state.newFolder === '__root__' ? '' : this.state.newFolder))\r\n                    }\r\n                >\r\n                    { I18n.t('Move to folder') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n\r\n    /*deleteFolder(folder) {\r\n        if (Object.values(folder.scenes).length) {\r\n            return this.showError(I18n.t('Cannot delete non-empty folder'));\r\n        } else {\r\n            //delete folder;\r\n            this.setState(this.state);\r\n        }\r\n    }*/\r\n\r\n    renderTreeScene = (item, level) => {\r\n        const scene = this.state.scenes[item._id];\r\n        if (!scene || (this.state.search && !item.common.name.includes(this.state.search))) {\r\n            return null;\r\n        }\r\n\r\n        level = level || 0;\r\n\r\n        const changed = this.state.selectedSceneId && this.state.selectedSceneId === scene._id && this.state.selectedSceneChanged;\r\n\r\n        return <ListItem\r\n            style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\r\n            key={ item._id }\r\n            selected={ this.state.selectedSceneId ? this.state.selectedSceneId === scene._id : false }\r\n            button\r\n            className={ clsx(changed && this.props.classes.changed, !scene.common.enabled && this.props.classes.disabled) }\r\n            onClick={ () =>\r\n                this.changeSelectedScene(scene._id)\r\n                    .catch(() => console.log('ignore')) }>\r\n            <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} }><IconScript className={ this.props.classes.itemIcon }/></ListItemIcon>\r\n            <ListItemText\r\n                classes={ {primary: this.props.classes.listItemTitle, secondary: this.props.classes.listItemSubTitle} }\r\n                primary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) }\r\n                secondary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}, true) }\r\n                />\r\n            <ListItemSecondaryAction>\r\n                {this.state.changingScene === scene._id ?\r\n                    <CircularProgress size={ 24 }/>\r\n                    :\r\n                    <Switch\r\n                        checked={ scene.common.enabled }\r\n                        onChange={ this.sceneSwitch }\r\n                        name={ scene._id }\r\n                    />\r\n                }\r\n            </ListItemSecondaryAction>\r\n        </ListItem>;\r\n    };\r\n\r\n    toggleFolder(folder) {\r\n        const opened = [...this.state.opened];\r\n        const pos = opened.indexOf(folder.prefix);\r\n        if (pos === -1) {\r\n            opened.push(folder.prefix);\r\n        } else {\r\n            opened.splice(pos, 1);\r\n\r\n            // If active scene is inside this folder select the first scene\r\n            if (Object.keys(folder.scenes).includes(this.state.selectedSceneId)) {\r\n                // To do ask question\r\n                if (this.state.selectedSceneChanged) {\r\n                    this.confirmCb = () => {\r\n                        this.setState({selectedSceneId: '', selectedSceneData: null, selectedSceneChanged: false, opened});\r\n                        window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\r\n                    };\r\n                    return this.setState({sceneChangeDialog: 'empty'});\r\n                }\r\n\r\n                this.setState({selectedSceneId: '', selectedSceneData: null, selectedSceneChanged: false});\r\n            }\r\n        }\r\n\r\n        window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\r\n\r\n        this.setState({opened});\r\n    }\r\n\r\n    renderTree(parent, level) {\r\n        let result = [];\r\n        level = level || 0;\r\n        let opened = this.state.opened ? this.state.opened.includes(parent.prefix) : false;\r\n\r\n        // Show folder item\r\n        parent && parent.id && result.push(<ListItem\r\n            key={ parent.prefix }\r\n            classes={ {gutters: this.props.classes.noGutters} }\r\n            className={ clsx(this.props.classes.width100, this.props.classes.folderItem) }\r\n            style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\r\n        >\r\n            <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} } onClick={ () => this.toggleFolder(parent) }>{ opened ?\r\n                <IconFolderOpened className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/> :\r\n                <IconFolderClosed className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/>\r\n            }</ListItemIcon>\r\n            <ListItemText>{ parent.id }</ListItemText>\r\n            <ListItemSecondaryAction>\r\n                <IconButton onClick={ () => this.toggleFolder(parent) } title={ opened ? I18n.t('Collapse') : I18n.t('Expand')  }>\r\n                    { opened ? <IconExpand/> : <IconCollapse/> }\r\n                </IconButton>\r\n            </ListItemSecondaryAction>\r\n        </ListItem>);\r\n\r\n        if (parent && (opened || !parent.id)) { // root cannot be closed and have id === ''\r\n            parent.id && result.push(<ListItem key={ 'keys_' + parent.prefix }>\r\n                <ListItemSecondaryAction>\r\n                    <IconButton\r\n                        onClick={() => this.createScene(this.getNewSceneId(), parent.id) }\r\n                        title={ I18n.t('Create new scene') }\r\n                    ><IconAdd/></IconButton>\r\n                    { /* <IconButton\r\n                        onClick={() => this.setState({addFolderDialog: parent, addFolderDialogTitle: ''})}\r\n                        title={ I18n.t('Create new folder') }\r\n                    ><IconFolderAdd/></IconButton> */ }\r\n\r\n                    <IconButton onClick={ () => this.setState({editFolderDialog: parent, editFolderDialogTitle: parent.id, editFolderDialogTitleOrigin: parent.id}) }\r\n                                title={ I18n.t('Edit folder name') }\r\n                    ><IconEdit/></IconButton>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>);\r\n\r\n            const values = Object.values(parent.scenes);\r\n            const subFolders = Object.values(parent.subFolders);\r\n\r\n            // add first sub-folders\r\n            result.push(subFolders.sort((a, b) => a.id > b.id ? 1 : (a.id < b.id ? -1 : 0)).map(subFolder =>\r\n                this.renderTree(subFolder, level + 1)));\r\n\r\n            // Add as second scenes\r\n\r\n            result.push(<ListItem\r\n                key={ 'items_' + parent.prefix }\r\n                classes={ {gutters: this.props.classes.noGutters} }\r\n                className={ this.props.classes.width100 }>\r\n                <List\r\n                    className={ this.props.classes.list }\r\n                    classes={ {root: this.props.classes.leftMenuItem} }\r\n                    style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\r\n                >\r\n                    { values.length ?\r\n                        values.sort((a, b) => a._id > b._id ? 1 : (a._id < b._id ? -1 : 0)).map(scene => this.renderTreeScene(scene, level))\r\n                        :\r\n                        (!subFolders.length ? <ListItem><ListItemText className={ this.props.classes.folderItem}>{ I18n.t('No scenes created yet')}</ListItemText></ListItem> : '')\r\n                    }\r\n                </List>\r\n            </ListItem>);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    createScene(name, parentId) {\r\n        let template = {\r\n            common: {\r\n                name: '',\r\n                type: 'boolean',\r\n                role: 'scene.state',\r\n                desc: '',\r\n                enabled: true,\r\n                read: true,\r\n                write: true,\r\n                def: false,\r\n                engine: 'system.adapter.scenes.0'\r\n            },\r\n            native: {\r\n                onTrue: {\r\n                    trigger: {},\r\n                    cron: null,\r\n                    astro: null\r\n                },\r\n                onFalse: {\r\n                    enabled: false,\r\n                    trigger: {},\r\n                    cron: null,\r\n                    astro: null\r\n                },\r\n                members: []\r\n            },\r\n            type: 'state'\r\n        };\r\n\r\n        template.common.name = name;\r\n        let id = 'scene.0.' + (parentId ? parentId + '.' : '') + template.common.name;\r\n\r\n        this.setState({changingScene: id}, () =>\r\n            this.socket.setObject(id, template)\r\n                .then(() => this.refreshData(id))\r\n                .then(() => this.changeSelectedScene(id))\r\n                .catch(e => this.showError(e))\r\n        );\r\n    };\r\n\r\n    cloneScene(id) {\r\n        let scene = JSON.parse(JSON.stringify(this.state.scenes[id]));\r\n        scene._id = scene._id.split('.');\r\n        scene._id.pop();\r\n        scene._id.push(this.getNewSceneId());\r\n        scene._id = scene._id.join('.');\r\n        scene.common.name = scene.common.name + ' ' + I18n.t('copy');\r\n\r\n        this.setState({changingScene: scene._id}, () =>\r\n            this.socket.setObject(scene._id, scene)\r\n                .then(() => this.refreshData(scene._id))\r\n                .then(() => this.changeSelectedScene(scene._id))\r\n                .catch(e => this.showError(e))\r\n        );\r\n    };\r\n\r\n    writeScene() {\r\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        scene._id = this.state.selectedSceneId;\r\n\r\n        const folder = getFolderPrefix(scene._id);\r\n        const newId = 'scene.0.' + (folder ? folder + '.' : '') + scene.common.name.replace(FORBIDDEN_CHARS, '_').replace(/\\s/g, '_');\r\n\r\n        if (scene._id !== newId) {\r\n            // check if the scene name is unique\r\n            if (Object.keys(this.state.scenes).find(id => id === newId)) {\r\n                return this.showError(I18n.t('Name is not unique. Please change name before the save.'));\r\n            }\r\n\r\n            // delete first the old scene\r\n            return this.socket.delObject(scene._id)\r\n                .then(() => {\r\n                    scene._id = newId;\r\n                    return this.socket.setObject(scene._id, scene);\r\n                })\r\n                .then(() => this.refreshData(this.state.selectedSceneId))\r\n                .then(() => this.changeSelectedScene(newId))\r\n                .catch(e => this.showError(e));\r\n        } else {\r\n            return this.socket.setObject(this.state.selectedSceneId, scene)\r\n                .then(() => this.refreshData(this.state.selectedSceneId))\r\n                .catch(e => this.showError(e));\r\n        }\r\n    }\r\n\r\n    updateScene(common, native, cb) {\r\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        if (common) {\r\n            scene.common = JSON.parse(JSON.stringify(common));\r\n        }\r\n        if (native) {\r\n            const members = scene.native.members;\r\n            scene.native = JSON.parse(JSON.stringify(native));\r\n            scene.native.members = members;\r\n        }\r\n\r\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\r\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\r\n    };\r\n\r\n    deleteScene = (id) => {\r\n        return this.socket.delObject(id)\r\n            .then(() => {\r\n                if (this.state.selectedSceneId === id) {\r\n                    return this.refreshData(id)\r\n                        .then(() => {\r\n                            const ids = Object.keys(this.state.scenes);\r\n                            // Find next scene\r\n                            let nextId = ids.find(_id => _id > id) || '';\r\n                            if (!nextId) {\r\n                                // try prev scene\r\n                                for (let i = ids.length - 1; i >= 0; i--) {\r\n                                    if (ids[i] < id) {\r\n                                        nextId = ids[i];\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (!nextId && ids.length) {\r\n                                nextId = ids.shift();\r\n                            }\r\n\r\n                            return this.changeSelectedScene(nextId);\r\n                        });\r\n                } else {\r\n                    return this.refreshData(id);\r\n                }\r\n            })\r\n            .catch(e => this.showError(e));\r\n    };\r\n\r\n    getNewSceneId() {\r\n        let newId = 0;\r\n\r\n        for (const id in this.state.scenes) {\r\n            let shortId = id.split('.').pop();\r\n            let matches = shortId.match(/^scene([0-9]+)$/);\r\n            if (matches && parseInt(matches[1], 10) >= newId) {\r\n                newId = parseInt(matches[1]) + 1;\r\n            }\r\n        }\r\n\r\n        return 'scene' + newId;\r\n    };\r\n\r\n    updateSceneMembers(members, cb) {\r\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        scene.native.members = JSON.parse(JSON.stringify(members));\r\n\r\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\r\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\r\n    };\r\n\r\n    changeSelectedScene(newId, ignoreUnsaved, cb) {\r\n        return new Promise(resolve => {\r\n            if (this.state.selectedSceneId !== newId) {\r\n                if (this.state.selectedSceneChanged && !ignoreUnsaved) {\r\n                    this.confirmCb = cb;\r\n                    this.setState({sceneChangeDialog: newId}, () => resolve());\r\n                } else {\r\n                    window.localStorage.setItem('Scenes.selectedSceneId', newId);\r\n                    this.setState({\r\n                        selectedSceneData: this.state.scenes[newId] ? JSON.parse(JSON.stringify(this.state.scenes[newId])) : null,\r\n                        sceneChangeDialog: '',\r\n                        selectedSceneId: newId || '',\r\n                        selectedSceneChanged: false,\r\n                        menuOpened: false,\r\n                    }, () => {\r\n                        resolve();\r\n                        cb && cb();\r\n                    });\r\n                }\r\n            } else {\r\n                resolve();\r\n                cb && cb();\r\n            }\r\n        });\r\n    }\r\n\r\n    renderAddFolderDialog() {\r\n        return this.state.addFolderDialog ?\r\n            <Dialog\r\n                open={ !!this.state.addFolderDialog }\r\n                onClose={ () => this.setState({addFolderDialog: null}) }\r\n            >\r\n                <DialogTitle>{I18n.t('Create folder')}</DialogTitle>\r\n                <DialogContent className={ this.props.classes.p }>\r\n                    <TextField label={ I18n.t('Title') } value={ this.state.addFolderDialogTitle } onChange={ e =>\r\n                        this.setState({addFolderDialogTitle: e.target.value.replace(FORBIDDEN_CHARS, '_')}) }/>\r\n                </DialogContent>\r\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                    <Button variant=\"contained\" onClick={ () => this.setState({addFolderDialog: null}) }>\r\n                        <IconCancel className={ this.props.classes.buttonIcon }/>\r\n                        { I18n.t('Cancel') }\r\n                    </Button>\r\n                    <Button variant=\"contained\" disabled={!this.state.addFolderDialogTitle || Object.keys(this.state.folders.subFolders).find(name => name === this.state.addFolderDialogTitle)} onClick={() => {\r\n                        this.addFolder(this.state.addFolderDialog, this.state.addFolderDialogTitle);\r\n                        this.setState({addFolderDialog: null});\r\n                    }} color=\"primary\" autoFocus>\r\n                        <IconCheck className={ this.props.classes.buttonIcon }/>\r\n                        {I18n.t('Create')}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog> : null;\r\n    }\r\n\r\n    renderEditFolderDialog() {\r\n        const isUnique = !Object.keys(this.state.folders.subFolders).find(folder => folder.id === this.state.editFolderDialogTitle);\r\n\r\n        return this.state.editFolderDialog ? <Dialog open={ !!this.state.editFolderDialog } onClose={ () => this.setState({editFolderDialog: null}) }>\r\n            <DialogTitle>{ I18n.t('Edit folder') }</DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                    label={ I18n.t('Title') }\r\n                    value={ this.state.editFolderDialogTitle }\r\n                    onChange={ e => this.setState({editFolderDialogTitle: e.target.value.replace(FORBIDDEN_CHARS, '_')}) }/>\r\n            </DialogContent>\r\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                <Button variant=\"contained\" onClick={ () => this.setState({editFolderDialog: null}) }>\r\n                    <IconCancel className={ this.props.classes.buttonIcon }/>\r\n                    { I18n.t('Cancel') }\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    disabled={ !this.state.editFolderDialogTitle || this.state.editFolderDialogTitleOrigin === this.state.editFolderDialogTitle || !isUnique}\r\n                    onClick={ () => {\r\n                        this.renameFolder(this.state.editFolderDialog, this.state.editFolderDialogTitle)\r\n                            .then(() => this.setState({editFolderDialog: null}));\r\n                    }}\r\n                    color=\"primary\"\r\n                    autoFocus\r\n                >\r\n                    <IconCheck className={ this.props.classes.buttonIcon }/>\r\n                    { I18n.t('Apply') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog> : null;\r\n    }\r\n\r\n    renderSceneChangeDialog() {\r\n        const that = this;\r\n        return this.state.sceneChangeDialog ? <Dialog\r\n            open={ true }\r\n            key=\"sceneChangeDialog\"\r\n            onClose={ () => this.setState({sceneChangeDialog: ''}) }>\r\n                <DialogTitle>{ I18n.t('Are you sure for cancel unsaved changes?') }</DialogTitle>\r\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                    <Button variant=\"contained\" onClick={() => {\r\n                        this.confirmCb = null; // cancel callback\r\n                        this.setState({sceneChangeDialog: ''});\r\n                    }}>\r\n                        <IconCancel/> { I18n.t('Cancel') }\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={ () =>\r\n                        this.changeSelectedScene(this.state.sceneChangeDialog, true, () => {\r\n                            const cb = this.confirmCb;\r\n                            this.confirmCb = null;\r\n                            cb && cb();\r\n                        })\r\n                            .catch(() => console.log('ignore')) }>\r\n                        { I18n.t('Discard') }\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={e => {\r\n                        // save scene\r\n                        this.writeScene()\r\n                            .then(() => that.changeSelectedScene(that.state.sceneChangeDialog === 'empty' ? '' : that.state.sceneChangeDialog, true, () => {\r\n                                const cb = this.confirmCb;\r\n                                this.confirmCb = null;\r\n                                cb && cb();\r\n                            }))\r\n                            .catch(() => console.log('ignore'))\r\n                    }}>\r\n                        <IconSave/> { I18n.t('Save changes') }\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog> : null;\r\n    };\r\n\r\n    renderDeleteDialog() {\r\n        return this.state.deleteDialog ? <Dialog\r\n            open={ true }\r\n            key=\"deleteDialog\"\r\n            onClose={ () => this.setState({deleteDialog: false}) }\r\n        >\r\n            <DialogTitle>{ I18n.t('Are you sure for delete this scene?') }</DialogTitle>\r\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: false}) }>\r\n                    {I18n.t('Cancel')}\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={e => {\r\n                    this.deleteScene(this.state.selectedSceneId);\r\n                    this.setState({deleteDialog: false});\r\n                }}>\r\n                    { I18n.t('Delete') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog> : null;\r\n    }\r\n\r\n    renderExportImportDialog() {\r\n        if (!this.state.exportDialog && !this.state.importDialog) {\r\n            return null;\r\n        }\r\n\r\n        return <ExportImportDialog\r\n            isImport={ !!this.state.importDialog }\r\n            themeType={ this.state.themeType }\r\n            onClose={ importedScene => {\r\n                if (this.state.importDialog && importedScene) {\r\n                    const scene = this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId];\r\n                    importedScene.common._id = scene._id;\r\n                    importedScene.common.name = scene.name || importedScene.common.name;\r\n                    this.setState({selectedSceneData: importedScene,  importDialog: false});\r\n                } else {\r\n                    this.setState({exportDialog: false, importDialog: false})\r\n                }\r\n            } }\r\n            sceneObj={ this.state.exportDialog ? this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId] : '' }\r\n        />\r\n    }\r\n\r\n    renderListToolbar() {\r\n        return <Toolbar key=\"toolbar\" variant=\"dense\" className={ this.props.classes.mainToolbar }>\r\n                <IconButton\r\n                    onClick={ () => this.createScene(this.getNewSceneId()) }\r\n                    title={ I18n.t('Create new scene') }\r\n                ><IconAdd/></IconButton>\r\n\r\n                <IconButton\r\n                    onClick={ () => this.setState({addFolderDialog: this.state.folders, addFolderDialogTitle: ''}) }\r\n                    title={ I18n.t('Create new folder') }\r\n                ><IconFolderAdd/></IconButton>\r\n\r\n                <span className={this.props.classes.right}>\r\n                                            <IconButton onClick={() => this.setState({showSearch: !this.state.showSearch}) }>\r\n                                                <SearchIcon/>\r\n                                            </IconButton>\r\n                                        </span>\r\n                {this.state.showSearch ?\r\n                    <TextField\r\n                        value={ this.state.search }\r\n                        className={ this.props.classes.textInput }\r\n                        onChange={ e => this.setState({search: e.target.value}) }/> : null\r\n                }\r\n            </Toolbar>;\r\n    }\r\n\r\n    renderSceneTopToolbar(showDrawer) {\r\n        return <Toolbar variant=\"dense\" key=\"topToolbar\" classes={ {gutters: this.props.classes.noGutters} }>\r\n            { this.props.width !== 'md' && this.props.width !== 'sm' && this.props.width !== 'xs' ? <Typography variant=\"h6\" className={ this.props.classes.sceneTitle }>\r\n                { I18n.t('Scene options') /*Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) */}\r\n                <span className={this.props.classes.sceneSubTitle}>{ Utils.getObjectNameFromObj(this.state.scenes[this.state.selectedSceneId], null, {language: I18n.getLanguage()}, true) }</span>\r\n            </Typography> : null }\r\n\r\n            { showDrawer ? <IconButton aria-label=\"Open list\" title={ I18n.t('Open list') } onClick={ () => this.setState({menuOpened: true}) }><IconMenu/></IconButton> : null }\r\n            <IconButton aria-label=\"Clone\" title={ I18n.t('Clone') } onClick={ () => this.cloneScene(this.state.selectedSceneId) }><IconClone/></IconButton>\r\n\r\n            <IconButton aria-label=\"Delete\" title={ I18n.t('Delete') } onClick={ () => this.setState({deleteDialog: true}) }><IconDelete/></IconButton>\r\n\r\n            <IconButton aria-label=\"Move to folder\" title={ I18n.t('Move to folder') } onClick={ () => this.setState({moveDialog: true, newFolder: getFolderPrefix(this.state.selectedSceneId)}) }><IconMoveToFolder/></IconButton>\r\n\r\n            <IconButton aria-label=\"Export\" title={ I18n.t('Export scene') } onClick={ () => this.setState({exportDialog: true}) }><IconExport/></IconButton>\r\n\r\n            {/*<IconButton aria-label=\"Import\" title={ I18n.t('Import scene') } onClick={ () => this.setState({importDialog: true}) }><IconImport/></IconButton>*/}\r\n        </Toolbar>;\r\n    }\r\n\r\n    renderSceneBottomToolbar() {\r\n        return <Toolbar variant=\"dense\" key=\"bottomToolbar\" classes={ {gutters: this.props.classes.noGutters} }>\r\n            <div style={{flexGrow: 1}}/>\r\n            { this.state.selectedSceneChanged ? <Button\r\n                className={ this.props.classes.toolbarButtons }\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => this.writeScene()}\r\n            >\r\n                { I18n.t('Save') }\r\n            </Button> : null }\r\n\r\n            { this.state.selectedSceneChanged ? <Button\r\n                className={ this.props.classes.toolbarButtons }\r\n                variant=\"contained\"\r\n                onClick={ () => this.refreshData(this.state.selectedSceneId) }\r\n            >\r\n                { I18n.t('Cancel') }\r\n            </Button> : null }\r\n        </Toolbar>;\r\n    }\r\n\r\n    renderDrawerContent() {\r\n        return [\r\n            this.renderListToolbar(),\r\n            <div key=\"list\" className={ this.props.classes.heightMinusToolbar }>\r\n                <List className={ this.props.classes.scroll }>\r\n                    { this.renderTree(this.state.folders) }\r\n                </List>\r\n            </div>\r\n        ];\r\n    }\r\n\r\n    renderSceneMembers(oneColumn) {\r\n        return <SceneMembersForm\r\n            key={ 'selected' + this.state.selectedSceneId }\r\n            oneColumn={ oneColumn }\r\n            showError={ e => this.showError(e) }\r\n            updateSceneMembers={ (members, cb) => this.updateSceneMembers(members, cb) }\r\n            selectedSceneChanged={ this.state.selectedSceneChanged }\r\n            sceneEnabled={ this.state.selectedSceneData.common.enabled }\r\n            members={ this.state.selectedSceneData.native.members }\r\n            socket={ this.socket }\r\n            onFalseEnabled={ this.state.selectedSceneData.native.onFalse.enabled }\r\n            virtualGroup={ this.state.selectedSceneData.native.virtualGroup }\r\n            sceneId={ this.state.selectedSceneId }\r\n            engineId={ this.state.selectedSceneData.common.engine }\r\n            intervalBetweenCommands={ this.state.selectedSceneData.native.burstInterval || 0 }\r\n        />;\r\n    }\r\n\r\n    renderSceneSettings(oneColumn) {\r\n        if (!this.state.selectedSceneData) {\r\n            this.state.selectedSceneData = JSON.parse(JSON.stringify(this.state.scenes[this.state.selectedSceneId]));\r\n        }\r\n\r\n        return <SceneForm\r\n            key={ this.state.selectedSceneId }\r\n            showError={ e => this.showError(e) }\r\n            oneColumn={ oneColumn }\r\n            updateScene={ (common, native, cb) => this.updateScene(common, native, cb) }\r\n            scene={ this.state.selectedSceneData }\r\n            socket={ this.socket }\r\n            instances={ this.state.instances }\r\n        />;\r\n    }\r\n\r\n    renderInOneColumn() {\r\n        return [\r\n            <Drawer\r\n                key=\"drawer\"\r\n                anchor=\"left\"\r\n                open={ this.state.menuOpened }\r\n                onClose={() => this.setState({menuOpened: false}) }\r\n                classes={ {paper: this.props.classes.drawer }}\r\n            >\r\n                { this.renderDrawerContent() }\r\n            </Drawer>,\r\n            this.renderSceneTopToolbar(true),\r\n            this.state.selectedSceneId ? <div\r\n                    key=\"main\"\r\n                    className={ this.props.classes.heightMinus2Toolbars }\r\n                    style={{ overflowY: 'auto', overflowX: 'hidden'}}\r\n                >\r\n                    { this.renderSceneSettings(true) }\r\n                    { this.renderSceneMembers(true) }\r\n                </div> : null,\r\n            this.renderSceneBottomToolbar(),\r\n        ]\r\n    }\r\n\r\n    renderInMoreThanOneColumn() {\r\n        const showDrawer = this.props.width === 'sm' || this.props.width === 'xs';\r\n\r\n        return <Container className={ clsx(this.props.classes.height, this.props.classes.fullWidthContainer) }>\r\n            <Grid container spacing={ 1 } className={ this.props.classes.height }>\r\n                { showDrawer ?\r\n                    <Drawer anchor=\"left\" open={ this.state.menuOpened } onClose={() => this.setState({menuOpened: false}) }>\r\n                        { this.renderDrawerContent() }\r\n                    </Drawer> :\r\n                    <Grid item xs={ 3 } className={ clsx(this.props.classes.columnContainer, this.props.classes.height) }>\r\n                        { this.renderDrawerContent() }\r\n                    </Grid>\r\n                }\r\n                { this.state.selectedSceneId && this.state.scenes[this.state.selectedSceneId] ?\r\n                    <Grid item xs={ showDrawer ? 12 : 9 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\r\n                        <Grid container spacing={ 1 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\r\n                            <Grid item xs={ this.props.width === 'xs' ? 12 : 5 } className={ this.props.classes.heightMinus2Toolbars }>\r\n                                { this.renderSceneTopToolbar(showDrawer) }\r\n                                <div className={this.props.classes.height}>\r\n                                    {this.state.selectedSceneId ? this.renderSceneSettings() : null}\r\n                                </div>\r\n                                { this.renderSceneBottomToolbar() }\r\n                            </Grid>\r\n                            <Grid item xs={ this.props.width === 'xs' ? 12 : 7 } className={ clsx(this.props.classes.height) }>\r\n                                <div className={ clsx(this.props.classes.heightMinusMargin) }>\r\n                                    { this.state.selectedSceneId ?\r\n                                        <div className={ clsx(this.props.classes.membersCell, this.props.classes.height) }>\r\n                                            { this.renderSceneMembers() }\r\n                                        </div>\r\n                                        : null}\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    : null\r\n                }\r\n            </Grid>\r\n        </Container>\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.ready) {\r\n            return <MuiThemeProvider theme={ this.state.theme }>\r\n                <Loader theme={ this.state.themeName }/>\r\n            </MuiThemeProvider>;\r\n        }\r\n\r\n        const oneColumn = this.props.width === 'xs';\r\n\r\n        return (\r\n            <MuiThemeProvider theme={ this.state.theme }>\r\n                <div className={ this.props.classes.root }>\r\n                    { oneColumn ?\r\n                        this.renderInOneColumn() :\r\n                        this.renderInMoreThanOneColumn()\r\n                    }\r\n\r\n                    { this.renderSceneChangeDialog() }\r\n                    { this.renderEditFolderDialog() }\r\n                    { this.renderMoveDialog() }\r\n                    { this.renderDeleteDialog() }\r\n                    { this.renderAddFolderDialog() }\r\n                    { this.renderExportImportDialog() }\r\n                    { this.renderError() }\r\n                </div>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withWidth()(withStyles(styles)(withTheme(App)));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as Sentry from '@sentry/browser';\r\nimport * as SentryIntegrations from '@sentry/integrations';\r\nimport { MuiThemeProvider} from '@material-ui/core/styles';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport { version } from '../package.json';\r\n\r\nimport theme from '@iobroker/adapter-react/Theme';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nwindow.adapterName = 'scenes';\r\n\r\nconsole.log('iobroker.' + window.adapterName + '@' + version);\r\nlet themeName = Utils.getThemeName();\r\n\r\nfunction build() {\r\n    return ReactDOM.render(<MuiThemeProvider theme={ theme(themeName) }>\r\n        <App onThemeChange={_theme => {\r\n            themeName = _theme;\r\n            build();\r\n        }}/>\r\n    </MuiThemeProvider>, document.getElementById('root'));\r\n}\r\n\r\n// if not local development\r\nif (window.location.host !== 'localhost:3000') {\r\n    Sentry.init({\r\n        dsn: 'https://89fc6260a1af4df68f9db767a603b7e5@sentry.iobroker.net/86',\r\n        release: 'iobroker.' + window.adapterName + '@' + version,\r\n        integrations: [\r\n            new SentryIntegrations.Dedupe()\r\n        ]\r\n    });\r\n}\r\n\r\nbuild();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}