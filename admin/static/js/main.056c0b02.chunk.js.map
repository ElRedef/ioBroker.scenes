{"version":3,"sources":["serviceWorker.js","components/SceneForm.js","components/SceneMembersForm.js","components/ExportImportDialog.js","components/ScenesList.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","SceneForm","React","Component","constructor","props","super","setStateWithParent","newState","cb","this","setState","updateScene","common","native","sceneObj","scene","JSON","parse","stringify","members","state","showDialog","sceneId","_id","renderSelectIdDialog","key","imagePrefix","socket","dialogName","title","I18n","t","selected","onOk","onClose","renderOnTrueFalse","name","on","className","classes","editItem","onTrue","onFalse","enabled","right","Switch","checked","trigger","id","onChange","e","target","condition","Grid","container","spacing","item","xs","TextField","fullWidth","InputLabelProps","shrink","label","value","onClick","FormControl","InputLabel","Select","MenuItem","cron","render","Box","clsx","columnContainer","oneColumn","height","scroll","desc","sm","width100","engine","instances","map","replace","min","burstInterval","helperText","type","parseInt","FormControlLabel","style","paddingTop","control","Checkbox","virtualGroup","withStyles","theme","alignRight","textAlign","buttonsContainer","margin","width","display","flexDirection","float","overflowY","overflowX","paddingRight","marginBottom","color","palette","p","background","SceneMembersForm","memberStateChange","states","val","objectTypes","undefined","parseFloat","createSceneMembers","ids","length","openedMembers","objectNames","Promise","all","getObject","then","obj","template","setIfTrue","setIfFalse","stopAllDelays","disabled","delay","Utils","getObjectNameFromObj","language","getLanguage","onFalseEnabled","push","forEach","subscribeState","catch","showError","deleteSceneMember","i","splice","deleteDialog","unsubscribeState","renderMember","member","index","_valStr","toString","setIfTrueTolerance","Math","abs","memberTrueFalse","memberTrue","setIfFalseTolerance","memberFalse","memberUncertain","opened","includes","setIfTrueVisible","varType","setIfFalseVisible","countEnabled","u","Paper","memberCard","memberToolbar","IconButton","memberFolder","pos","indexOf","sort","localStorage","setItem","memberTitle","memberDesc","memberButtons","size","marginLeft","aria-label","intervalBetweenCommands","setValue","InputProps","endAdornment","doNotOverwrite","smallOnTrueFalse","stateValueTrue","stateValueFalse","getItemStyle","isDragging","draggableStyle","userSelect","getListStyle","isDraggingOver","sceneState","selectedSceneChanged","engineId","Toolbar","gutters","guttersZero","Typography","variant","sceneTitle","instanceNotActive","sceneSubTitle","sceneTrue","sceneFalse","sceneUncertain","testButtons","width100WithButton","defaultValue","onKeyUp","keyCode","onWriteScene","writeSceneState","sceneEnabled","Button","btnTestTrue","btnTestFalse","btnCollapseAll","btnExpandAll","onDragEnd","droppableId","provided","snapshot","droppableProps","ref","innerRef","draggableId","draggableProps","dragHandleProps","placeholder","renderDeleteDialog","getItem","bind","componentDidMount","readObjects","componentWillUnmount","changed","result","destination","source","removed","results","resolve","that","updateSceneMembers","multiSelect","Dialog","open","DialogTitle","DialogActions","borderRadius","padding","fontSize","fontWeight","whiteSpace","maxWidth","overflow","textOverflow","backgroundColor","position","top","left","flexGrow","marginRight","content","fontStyle","minHeight","minWidth","opacity","ExportImportDialog","text","error","toast","renderToast","Snackbar","autoHideDuration","Alert","severity","aria-labelledby","fullScreen","aria-describedby","isImport","DialogContent","divWithoutTitle","autoFocus","mode","onLoad","editor","codeEditor","focus","themeType","newValue","readOnly","editorProps","$blockScrolling","copy","setTimeout","border","Droppable","onDrop","useDrop","accept","drop","isOver","collect","monitor","shallow","isOverAny","children","Draggable","useDrag","drag","transform","ScenesList","renderTreeScene","level","scenes","search","selectedSceneId","listItem","ListItem","paddingLeft","reorder","root","noPaddings","button","onSceneSelect","ListItemIcon","itemIconRoot","itemIcon","ListItemText","primary","listItemTitle","secondary","listItemSubTitle","ListItemSecondaryAction","changingScene","CircularProgress","event","onSceneEnableDisable","showSearch","addFolderDialog","addFolderDialogTitle","editFolderDialogeditFolderDialog","editFolderDialogTitle","onAddFolder","parent","onCreateFolder","renderAddFolderDialog","FORBIDDEN_CHARS","buttonIcon","Object","keys","folders","subFolders","find","onRenameFolder","folder","newName","prefix","editFolderDialog","renderEditFolderDialog","isUnique","editFolderDialogTitleOrigin","toggleFolder","confirmCb","selectedSceneData","sceneChangeDialog","onDragFinish","console","log","newId","split","pop","onMoveScene","renderTree","reactChildren","values","a","b","subFolder","folderItem","noGutters","itemIconFolder","onCreateScene","r","renderListToolbar","mainToolbar","textInput","toolbarButtons","stopPropagation","heightMinusToolbar","backend","HTML5Backend","List","mainList","main","paddingBottom","leftMenuItem","cursor","list","folderButtons","App","GenericApp","extendedProps","translations","require","addSceneToFolderPrefix","folderPrefix","noRefresh","oldId","delObject","setObject","refreshData","changeSelectedScene","query","parts","decodeURIComponent","getUrlQuery","port","host","iobForceHost","onConnectionReady","lang","systemLang","ready","exportDialog","importDialog","menuOpened","getSystemConfig","systemConfig","getAdapterInstances","adapterName","sceneSwitch","buildTree","shift","currentFolder","findFolder","getData","getObjectView","_scenes","burstIntervall","from","user","ts","acl","addFolder","parentFolder","_parentFolder","moveScript","renameFolder","newSelectedId","join","promises","createScene","parentId","role","read","write","def","astro","cloneScene","getNewSceneId","writeScene","getFolderPrefix","deleteScene","nextId","matches","ignoreUnsaved","renderSceneChangeDialog","renderExportImportDialog","importedScene","renderSceneTopToolbar","showDrawer","renderSceneBottomToolbar","renderDrawerContent","renderSceneMembers","renderSceneSettings","renderInOneColumn","Drawer","anchor","paper","drawer","heightMinus2Toolbars","renderInMoreThanOneColumn","Container","fullWidthContainer","settingsBackground","heightMinusMargin","membersCell","themeName","renderError","withWidth","buttonsContainer1","marginTop","withTheme","version","getThemeName","Sentry","dsn","release","integrations","SentryIntegrations","build","ReactDOM","onThemeChange","_theme","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.056c0b02.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nconst styles = theme => ({\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    width100: {\r\n        width: '100%'\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    editItem: {\r\n        display: 'block',\r\n        marginBottom: theme.spacing(2),\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    onTrue: {\r\n        background: 'lightgreen',\r\n    },\r\n    onFalse: {\r\n        background: '#ff9999',\r\n    },\r\n});\r\n\r\nclass SceneForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        this.state = {\r\n            common: sceneObj.common,\r\n            native: sceneObj.native,\r\n            showDialog: null,\r\n            sceneId: props.scene._id,\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        if (JSON.stringify(sceneObj.common) !== JSON.stringify(state.common) || JSON.stringify(sceneObj.native) !== JSON.stringify(state.native)) {\r\n            return {\r\n                common: sceneObj.common,\r\n                native: sceneObj.native,\r\n            };\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    setStateWithParent = (newState, cb) => {\r\n        this.setState(newState, () =>\r\n            this.props.updateScene(newState.common, newState.native, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n                key=\"selectDialog\"\r\n                imagePrefix={'../..'}\r\n                socket={ this.props.socket }\r\n                dialogName=\"memberEdit\"\r\n                title={ I18n.t('Select for ') }\r\n                selected={ null }\r\n                onOk={ this.state.showDialog }\r\n                onClose={ () => this.setState({showDialog: false}) }\r\n            /> : null;\r\n    };\r\n\r\n    renderOnTrueFalse(name) {\r\n        const on = this.state.native[name];\r\n\r\n        return [\r\n            <div key=\"switch\" className={ this.props.classes.editItem }>\r\n                <h4>{ on === this.state.native.onTrue ? (this.state.native.onFalse.enabled ? I18n.t('Trigger for TRUE') : I18n.t('Trigger')) : I18n.t('Trigger for FALSE') }\r\n                    <span className={ this.props.classes.right }>\r\n                        <Switch checked={ !!on.trigger.id }\r\n                                onChange={ e => {\r\n                                    if (e.target.checked) {\r\n                                        this.setState({\r\n                                            showDialog: id => {\r\n                                                const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                native[name].trigger.id = id;\r\n                                                native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                                this.setStateWithParent({native});\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                        native[name].trigger.id = '';\r\n                                        this.setStateWithParent({native});\r\n                                    }\r\n                                } }\r\n                        />\r\n                    </span>\r\n                </h4>\r\n            </div>,\r\n            <div key=\"id\" className={ this.props.classes.editItem }>\r\n                {on.trigger.id ?\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={8}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Trigger ID') }\r\n                                value={ on.trigger.id }\r\n                                onClick={ () => {\r\n                                    this.setState({\r\n                                        showDialog: id => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.id = id;\r\n                                            native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                            this.setStateWithParent({native});\r\n                                        }\r\n                                    });\r\n                                } }\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2}>\r\n                            <FormControl>\r\n                                <InputLabel shrink={ true }>{ I18n.t('Condition') }</InputLabel>\r\n                                <Select value={ on.trigger.condition || '==' }\r\n                                        onChange={ e => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.condition = e.target.value;\r\n                                            this.setStateWithParent({native});\r\n                                        } }\r\n                                >\r\n                                    <MenuItem value=\"==\">==</MenuItem>\r\n                                    <MenuItem value=\"!=\">!=</MenuItem>\r\n                                    <MenuItem value=\">\">&gt;</MenuItem>\r\n                                    <MenuItem value=\"<\">&lt;</MenuItem>\r\n                                    <MenuItem value=\">=\">&gt;=</MenuItem>\r\n                                    <MenuItem value=\"<=\">&lt;=</MenuItem>\r\n                                    <MenuItem value=\"update\">{ I18n.t('on update') }</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps= {{shrink: true} } label={ I18n.t('Value') }\r\n                                value={ on.trigger.value || '' }\r\n                                onChange={ e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native[name].trigger.value = e.target.value;\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    : null}\r\n            </div>,\r\n            <div key=\"cron\" className={ this.props.classes.editItem }>\r\n                <TextField\r\n                    fullWidth\r\n                    InputLabelProps={{shrink: true}}\r\n                    label={ name === 'onTrue' ? I18n.t('On time (CRON expression)') : I18n.t('Off time (CRON expression)')}\r\n                    value={ on.cron || '' }\r\n                    onChange={e => {\r\n                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                        native[name].cron = e.target.value;\r\n                        this.setStateWithParent({native});\r\n                    }}\r\n                />\r\n            </div>\r\n        ];\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.props.width);\r\n        let result = <Box key=\"sceneForm\" className={ clsx(this.props.classes.columnContainer, !this.props.oneColumn && this.props.classes.height) }>\r\n            <Box className={ this.props.classes.scroll }>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene name') }\r\n                        value={ this.state.common.name }\r\n                        onChange={ e => {\r\n                           const common = JSON.parse(JSON.stringify(this.state.common));\r\n                           common.name = e.target.value;\r\n                           this.setStateWithParent({common});\r\n                       } }/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene description') }\r\n                        value={ this.state.common.desc }\r\n                        onChange={ e => {\r\n                               const common = JSON.parse(JSON.stringify(this.state.common));\r\n                               common.desc = e.target.value;\r\n                               this.setStateWithParent({common});\r\n                           }\r\n                        }/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={ 1 }>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControl className={this.props.classes.width100}>\r\n                                <InputLabel shrink={true}>{ I18n.t('Instance') }</InputLabel>\r\n                                <Select\r\n                                    value={ this.state.common.engine }\r\n                                    onChange={e => {\r\n                                        const common = JSON.parse(JSON.stringify(this.state.common));\r\n                                        common.engine = e.target.value;\r\n                                        this.setStateWithParent({common});\r\n                                    }}\r\n                                >\r\n                                    { this.props.instances.map(id => <MenuItem key={ id } value={ id }>{ id.replace('system.adapter.', '') }</MenuItem>) }\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Interval between commands') }\r\n                                min={ 0 }\r\n                                value={ this.state.native.burstInterval || 0 }\r\n                                helperText=\"ms\"\r\n                                type=\"number\"\r\n                                onChange={e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native.burstInterval = parseInt(e.target.value, 10);\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControlLabel\r\n                                style={{paddingTop: 10}}\r\n                                title={ I18n.t('virtual_group_tooltip') }\r\n                                label={ I18n.t('Virtual group') } control={\r\n                                <Checkbox checked={this.state.native.virtualGroup}\r\n                                          onChange={e => {\r\n                                              const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                              native.virtualGroup = e.target.checked;\r\n                                              this.setStateWithParent({native});\r\n                                          }}/>\r\n                            }/>\r\n                        </Grid>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            { !this.state.native.virtualGroup ?\r\n                                <FormControlLabel\r\n                                    style={{paddingTop: 10}}\r\n                                    label={I18n.t('Set value if false')}\r\n                                    control={\r\n                                          <Checkbox\r\n                                              checked={ this.state.native.onFalse.enabled }\r\n                                                    onChange={e => {\r\n                                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                        native.onFalse.enabled = e.target.checked;\r\n                                                        this.setStateWithParent({native});\r\n                                                    }}/>}\r\n                                />\r\n                                : null}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                { !this.state.native.virtualGroup ? this.renderOnTrueFalse('onTrue') : null }\r\n                { !this.state.native.virtualGroup && this.state.native.onFalse.enabled ? this.renderOnTrueFalse('onFalse') : null }\r\n            </Box>\r\n        </Box>;\r\n\r\n        return [\r\n            result,\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateScene: PropTypes.func.isRequired,\r\n    instances: PropTypes.array,\r\n    oneColumn: PropTypes.bool,\r\n    showError: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(SceneForm);","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\n// own components\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\n// icons\r\nimport {AiOutlineClockCircle as IconClock} from 'react-icons/ai';\r\nimport {MdDelete as IconDelete} from 'react-icons/md';\r\nimport {MdAdd as IconAdd} from 'react-icons/md';\r\nimport {MdPlayArrow as IconPlay} from 'react-icons/md';\r\nimport {FaFolder as IconFolderClosed} from 'react-icons/fa';\r\nimport {FaFolderOpen as IconFolderOpened} from 'react-icons/fa';\r\nimport ClearIcon from '@material-ui/icons/Close';\r\nimport IconExpandAll from '@material-ui/icons/ExpandMore';\r\nimport IconCollapseAll from '@material-ui/icons/ExpandLess';\r\n\r\nconst TRUE_COLOR       = '#90ee90';\r\nconst FALSE_COLOR      = '#ff9999';\r\nconst TRUE_DARK_COLOR  = '#528952';\r\nconst FALSE_DARK_COLOR = '#774747';\r\nconst UNCERTAIN_COLOR  = '#bfb7be';\r\n\r\nconst styles = theme => ({\r\n    memberTrueFalse: {\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n        fontSize: 'initial',\r\n        fontWeight: 'initial',\r\n        margin: '0 ' + theme.spacing(1) + 'px',\r\n        textAlign: 'right',\r\n        whiteSpace: 'nowrap',\r\n        maxWidth: 300,\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    memberTrue: {\r\n        backgroundColor: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    memberFalse: {\r\n        backgroundColor: 'pink',\r\n    },\r\n    memberUncertain: {\r\n        color: '#FFF',\r\n        backgroundColor: '#808080',\r\n    },\r\n    memberCard: {\r\n        padding: 4,\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    memberFolder: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    guttersZero: {\r\n        padding: 0,\r\n    },\r\n    sceneTitle: {\r\n        flexGrow: 1,\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    sceneSubTitle: {\r\n        fontSize: 'small',\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n    },\r\n    sceneTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    sceneFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n    },\r\n    sceneUncertain: {\r\n        background: UNCERTAIN_COLOR,\r\n    },\r\n    btnTestTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n        marginRight: theme.spacing(1),\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    btnTestFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    btnExpandAll: {\r\n        float: 'right'\r\n    },\r\n    btnCollapseAll: {\r\n        float: 'right'\r\n    },\r\n    smallOnTrueFalse: {\r\n        fontSize: 'small',\r\n        textAlign: 'right',\r\n        width: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    stateValueTrue: {\r\n        color: '#60a060',\r\n        fontWeight: 'bold',\r\n    },\r\n    stateValueFalse: {\r\n        color: '#c15454',\r\n        fontWeight: 'bold',\r\n    },\r\n    changed: {\r\n        position: 'relative',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            width: 6,\r\n            height: 6,\r\n            borderRadius: 6,\r\n            background: '#FF0000',\r\n            position: 'absolute',\r\n            top: 5,\r\n            right: 5,\r\n        },\r\n    },\r\n    memberDesc: {\r\n        display: 'inline-block',\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n        marginLeft: 50,\r\n    },\r\n    memberTitle: {\r\n        fontSize: 14,\r\n        fontWeight: 'bold',\r\n        marginLeft: 50,\r\n    },\r\n    memberToolbar: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        minHeight: 72,\r\n    },\r\n    memberButtons: {\r\n        textAlign: 'right',\r\n        position: 'absolute',\r\n        top: 2,\r\n        right: 2,\r\n    },\r\n    width100WithButton: {\r\n        width: 'calc(100% - 48px)',\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n    testButtons: {\r\n        minHeight: 48,\r\n    },\r\n    setValue: {\r\n        width: 'calc(50% - ' + theme.spacing(1) + 'px)',\r\n        minWidth: 100,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    disabled: {\r\n        opacity: 0.3\r\n    },\r\n    instanceNotActive: {\r\n        marginLeft: theme.spacing(1),\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n        color: '#FF0000',\r\n    }\r\n});\r\n\r\nclass SceneMembersForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let openedMembers = window.localStorage.getItem('Scenes.openedMembers') || '[]';\r\n        try {\r\n            openedMembers = JSON.parse(openedMembers);\r\n        } catch (e) {\r\n            openedMembers = [];\r\n        }\r\n\r\n        this.state = {\r\n            states: {},\r\n            openedMembers,\r\n            objectTypes: {},\r\n            objectNames: {},\r\n            members: JSON.parse(JSON.stringify(props.members)),\r\n            writeSceneState: '',\r\n            deleteDialog: null,\r\n            onFalseEnabled: props.onFalseEnabled,\r\n            virtualGroup: props.virtualGroup,\r\n            sceneEnabled: props.sceneEnabled,\r\n            selectedSceneChanged: props.selectedSceneChanged,\r\n            engineId: props.engineId,\r\n        };\r\n\r\n        this.engineId = this.state.engineId;\r\n\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.readObjects()\r\n            .then(newState =>\r\n                this.setState(newState, () => {\r\n                    // subscribe on scene state\r\n                    this.props.socket.subscribeState(this.props.sceneId, this.memberStateChange);\r\n                    this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n                    // subscribe on all states\r\n                    this.state.members.forEach(member =>\r\n                        member.id && this.props.socket.subscribeState(member.id, this.memberStateChange))\r\n                }));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.unsubscribeState(this.props.sceneId, this.memberStateChange);\r\n        this.state.engineId && this.props.socket.unsubscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n        this.state.members.forEach(member =>\r\n            this.props.socket.unsubscribeState(member.id, this.memberStateChange));\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const newState = {};\r\n        let changed = false;\r\n\r\n        if (props.onFalseEnabled !== state.onFalseEnabled) {\r\n            newState.onFalseEnabled = props.onFalseEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.virtualGroup !== state.virtualGroup) {\r\n            newState.virtualGroup = props.virtualGroup;\r\n            changed = true;\r\n        }\r\n        if (props.selectedSceneChanged !== state.selectedSceneChanged) {\r\n            newState.selectedSceneChanged = props.selectedSceneChanged;\r\n            changed = true;\r\n        }\r\n        if (props.sceneEnabled !== state.sceneEnabled) {\r\n            newState.sceneEnabled = props.sceneEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.engineId !== state.engineId) {\r\n            newState.engineId = props.engineId;\r\n            changed = true;\r\n        }\r\n\r\n        return changed ? newState : null;\r\n    }\r\n\r\n    onDragEnd(result) {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n        const members = JSON.parse(JSON.stringify(this.state.members));\r\n        const [removed] = members.splice(result.source.index, 1);\r\n        members.splice(result.destination.index, 0, removed);\r\n\r\n        this.setStateWithParent({members});\r\n    }\r\n\r\n    readObjects() {\r\n        if (this.state.members) {\r\n            return Promise.all(\r\n                this.state.members.map(member =>\r\n                    this.props.socket.getObject(member.id)))\r\n                .then(results => {\r\n                    const objectTypes = {};\r\n                    const objectNames = {};\r\n                    results.forEach(obj => {\r\n                        if (obj && obj.common && obj.common.type) {\r\n                            objectTypes[obj._id] = obj.common.type;\r\n                            objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, false);\r\n                        }\r\n                    });\r\n\r\n                    return {objectTypes, objectNames};\r\n                })\r\n                .catch(e => this.props.showError(e));\r\n        } else {\r\n            return Promise.resolve({});\r\n        }\r\n    }\r\n\r\n    memberStateChange = (id, state) => {\r\n        const states = JSON.parse(JSON.stringify(this.state.states));\r\n        states[id] = state ? state.val : null;\r\n        const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n\r\n        if (!objectTypes[id] && states[id] !== null && states[id] !== undefined) {\r\n            objectTypes[id] = typeof states[id];\r\n        }\r\n\r\n        if (objectTypes[id] === 'boolean') {\r\n            if (states[id] === 'true') {\r\n                states[id] = true;\r\n            }\r\n            if (states[id] === 'false') {\r\n                states[id] = false;\r\n            }\r\n        } else if (objectTypes[id] === 'number') {\r\n            states[id] = parseFloat(states[id]);\r\n        }\r\n\r\n        this.setState({states, objectTypes});\r\n    };\r\n\r\n    createSceneMembers = ids => {\r\n        this.setState({showDialog: false}, () => {\r\n            if (ids.length) {\r\n                const openedMembers = [...this.state.openedMembers];\r\n                const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n                const objectNames = JSON.parse(JSON.stringify(this.state.objectNames));\r\n                const members     = JSON.parse(JSON.stringify(this.state.members));\r\n\r\n                Promise.all(ids.map(id =>\r\n                    // Read type of state\r\n                    this.props.socket.getObject(id)\r\n                        .then(obj => {\r\n                            if (!obj) {\r\n                                return;\r\n                            }\r\n\r\n                            const template = {\r\n                                id,\r\n                                setIfTrue: null,\r\n                                setIfFalse: null,\r\n                                stopAllDelays: true,\r\n                                desc: null,\r\n                                disabled: false,\r\n                                delay: 0\r\n                            };\r\n\r\n                            if (obj) {\r\n                                objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, true);\r\n                            }\r\n\r\n\r\n                            if (obj && obj.common && obj.common.type) {\r\n                                objectTypes[id] = obj.common.type;\r\n\r\n                                if (objectTypes[id] === 'boolean') {\r\n                                    template.setIfTrue = true;\r\n                                    if (this.state.onFalseEnabled) {\r\n                                        template.setIfFalse = false;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            members.push(template);\r\n\r\n                            // open added state\r\n                            openedMembers.push(id);\r\n                        })\r\n                        .then(() => this.setStateWithParent({objectTypes, objectNames, members, openedMembers}, () =>\r\n                            // Subscribe on all new members\r\n                            ids.forEach(id => this.props.socket.subscribeState(id, this.memberStateChange)))\r\n                        )\r\n                    )\r\n                )\r\n                    .catch(e => this.props.showError(e));\r\n            } else {\r\n                // Show alert\r\n                this.props.showError(I18n.t('Unknown error!'));\r\n            }\r\n        });\r\n    };\r\n\r\n    deleteSceneMember = id => {\r\n        let members = JSON.parse(JSON.stringify(this.state.members));\r\n\r\n        for (let i = 0; i < members.length; i++) {\r\n            if (members[i].id === id) {\r\n                members.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        this.setStateWithParent({members, deleteDialog: null}, () =>\r\n            this.props.socket.unsubscribeState(id, this.memberStateChange));\r\n    };\r\n\r\n    setStateWithParent(newState, cb) {\r\n        const that = this;\r\n        this.setState(newState, () =>\r\n            this.props.updateSceneMembers(that.state.members, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n            imagePrefix={'../..'}\r\n            key=\"selectDialogMembers\"\r\n            socket={ this.props.socket }\r\n            dialogName=\"memberEdit\"\r\n            multiSelect={ true }\r\n            title={ I18n.t('Select for ') }\r\n            selected={ null }\r\n            onOk={ id => this.createSceneMembers(id) }\r\n            onClose={ () => this.setState({showDialog: false}) }\r\n        /> : null;\r\n    }\r\n\r\n    renderDeleteDialog() {\r\n        if (this.state.deleteDialog === null) {\r\n            return;\r\n        }\r\n\r\n        return <Dialog\r\n            open={ true }\r\n            key=\"deleteDialog\"\r\n            onClose={ () =>\r\n                this.setState({deleteDialog: null}) }\r\n            >\r\n                <DialogTitle>{ I18n.t('Are you sure for delete this state?') }</DialogTitle>\r\n\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: null}) }>\r\n                        {I18n.t('Cancel')}\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={ e => this.deleteSceneMember(this.state.deleteDialog) }>\r\n                        { I18n.t('Delete') }\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>;\r\n    };\r\n\r\n    renderMember = (member, index) => {\r\n        let value = null;\r\n        const classes = this.props.classes;\r\n        if (this.state.states[member.id] !== undefined && this.state.states[member.id] !== null) {\r\n            let _valStr = this.state.states[member.id].toString();\r\n\r\n            if (_valStr === 'true') {\r\n                _valStr = 'TRUE';\r\n            } else if (_valStr === 'false') {\r\n                _valStr = 'FALSE';\r\n            }\r\n\r\n            if (member.setIfTrueTolerance && Math.abs(this.state.states[member.id] - member.setIfTrue) <= member.setIfTrueTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (this.state.states[member.id] === member.setIfTrue) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && member.setIfFalseTolerance && Math.abs(this.state.states[member.id] - member.setIfFalse) <= member.setIfFalseTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && this.state.states[member.id] === member.setIfFalse) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberUncertain) }>{ _valStr }</div>;\r\n            }\r\n        }\r\n\r\n        const opened = this.state.openedMembers.includes(member.id);\r\n        const onFalseEnabled = !this.state.virtualGroup && this.state.onFalseEnabled;\r\n        let setIfTrueVisible = true;\r\n\r\n        let setIfTrue = member.setIfTrue;\r\n        if (setIfTrue === undefined || setIfTrue === null) {\r\n            setIfTrue = '';\r\n            setIfTrueVisible = false;\r\n        } else {\r\n            if (setIfTrue === true) {\r\n                setIfTrue = 'TRUE';\r\n            } else if (setIfTrue === false) {\r\n                setIfTrue = 'FALSE';\r\n            } else {\r\n                if (member.setIfTrueTolerance) {\r\n                    setIfTrue = setIfTrue + '±' + member.setIfTrueTolerance;\r\n                } else {\r\n                    setIfTrue = setIfTrue.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        const varType =  this.state.objectTypes[member.id];\r\n\r\n        if (onFalseEnabled && setIfTrueVisible && setIfTrue === '' && (varType === 'number' || varType === 'boolean')) {\r\n            setIfTrueVisible = false;\r\n        }\r\n\r\n        let setIfFalse = member.setIfFalse;\r\n        let setIfFalseVisible = onFalseEnabled;\r\n        if (setIfFalse === undefined || setIfFalse === null) {\r\n            setIfFalse = '';\r\n            setIfFalseVisible = false;\r\n        } else {\r\n            if (setIfFalse === true) {\r\n                setIfFalse = 'TRUE';\r\n            } else if (setIfFalse === false) {\r\n                setIfFalse = 'FALSE';\r\n            } else {\r\n                if (member.setIfFalseTolerance) {\r\n                    setIfFalse = setIfFalse + '±' + member.setIfFalseTolerance;\r\n                } else {\r\n                    setIfFalse = setIfFalse.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (setIfFalseVisible && setIfFalse === '' && (varType === 'number' || varType === 'boolean')) {\r\n            setIfFalseVisible = false;\r\n        }\r\n\r\n        // calculate enabled states\r\n        let countEnabled = 0;\r\n        for (let u = 0; u < index; u++) {\r\n            if (!this.state.members[u].disabled) {\r\n                countEnabled++;\r\n            }\r\n        }\r\n\r\n        return <Paper key={ member.id + '_' + index } className={ clsx(classes.memberCard, member.disabled && classes.disabled) }>\r\n            <div className={ classes.memberToolbar }>\r\n                <IconButton className={ classes.memberFolder} title={ I18n.t('Edit') } onClick={ () => {\r\n                    const openedMembers = [...this.state.openedMembers];\r\n                    const pos = openedMembers.indexOf(member.id);\r\n                    if (pos !== -1) {\r\n                        openedMembers.splice(pos, 1);\r\n                    } else {\r\n                        openedMembers.push(member.id);\r\n                        openedMembers.sort();\r\n                    }\r\n                    window.localStorage.setItem('Scenes.openedMembers', JSON.stringify(openedMembers));\r\n                    this.setState({openedMembers});\r\n                }}>\r\n                    { opened ? <IconFolderOpened/> : <IconFolderClosed/> }\r\n                </IconButton>\r\n                <div className={ classes.memberTitle }>{ member.id }</div>\r\n                <div className={ classes.memberDesc }>{ member.desc || this.state.objectNames[member.id] || '' }</div>\r\n                <div className={ classes.memberButtons }>\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 5 }} aria-label=\"Delete\" title={I18n.t('Delete')}\r\n                        onClick={ () => this.setState({deleteDialog: member.id}) }>\r\n                        <IconDelete/>\r\n                    </IconButton>\r\n                    <Switch\r\n                        checked={ !member.disabled }\r\n                        onChange={ e => {\r\n                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                            members[index].disabled = !e.target.checked;\r\n                            this.setStateWithParent({members});\r\n                        }}\r\n                        name={ member.id }\r\n                    />\r\n                    { value }\r\n                </div>\r\n            </div>\r\n            <div>{ member.desc } { !opened && !member.disabled && (this.props.intervalBetweenCommands || member.delay) ?\r\n                <span> <IconClock/> { this.props.intervalBetweenCommands * countEnabled + (member.delay || 0) + I18n.t('ms') + ' ' + I18n.t('from scene start')}</span> : null }</div>\r\n            {\r\n                opened ?\r\n                    <div>\r\n                        {/*<Box className={classes.p}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}} label={I18n.t('Description')}\r\n                                value={member.desc || ''}\r\n                                onChange={e => {\r\n                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                    members[index].desc = e.target.value;\r\n                                    this.setStateWithParent({members});\r\n                                }}\r\n                            />\r\n                        </Box>*/ }\r\n                        { !this.state.virtualGroup ? <Box className={ classes.p }>\r\n                            { this.state.objectTypes[member.id] === 'boolean' ?\r\n                                <FormControl className={ classes.setValue }>\r\n                                    <InputLabel>{ onFalseEnabled ? I18n.t('Setpoint by TRUE') : I18n.t('Setpoint') }</InputLabel>\r\n                                    <Select\r\n                                        value={ member.setIfTrue === true || member.setIfTrue === 'true' ? 'true' : (member.setIfTrue === false || member.setIfTrue === 'false' ? 'false' : 'null')}\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].setIfTrue = e.target.value === 'true' ? true : (e.target.value === 'false' ? false : null);\r\n                                            this.setStateWithParent({members});\r\n                                        } }\r\n                                    >\r\n                                        <MenuItem value=\"false\">FALSE</MenuItem>\r\n                                        <MenuItem value=\"true\">TRUE</MenuItem>\r\n                                        <MenuItem value=\"null\">{I18n.t('NOT CHANGE')}</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                                :\r\n                                <Box className={ classes.p }>\r\n                                    <TextField\r\n                                        InputLabelProps={ {shrink: true} }\r\n                                        label={ onFalseEnabled ? I18n.t('Setpoint by TRUE') : I18n.t('Setpoint') }\r\n                                        value={ member.setIfTrue === undefined || member.setIfTrue === null ? '' : member.setIfTrue }\r\n                                        className={ classes.setValue }\r\n                                        InputProps={{\r\n                                            endAdornment: member.setIfTrue ?\r\n                                                <IconButton\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                        members[index].setIfTrue = null;\r\n                                                        this.setStateWithParent({members});\r\n                                                    }}>\r\n                                                    <ClearIcon />\r\n                                                </IconButton>\r\n                                                : undefined,\r\n                                        }}\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            if (this.state.objectTypes[member.id] === 'number') {\r\n                                                members[index].setIfTrue = parseFloat(e.target.value.replace(',', '.'));\r\n                                            } else {\r\n                                                members[index].setIfTrue = e.target.value;\r\n                                            }\r\n\r\n                                            this.setStateWithParent({members});\r\n                                         } }/>\r\n                                    <TextField\r\n                                        InputLabelProps={ {shrink: true} }\r\n                                        label={ '± ' + (onFalseEnabled ? I18n.t('Tolerance by TRUE') : I18n.t('Tolerance')) }\r\n                                        value={ member.setIfTrueTolerance === undefined || member.setIfTrueTolerance === null ? '' : member.setIfTrueTolerance }\r\n                                        title={ I18n.t('Absolute value, not percent') }\r\n                                        className={ classes.setValue }\r\n                                        InputProps={{\r\n                                            endAdornment: member.setIfTrueTolerance ?\r\n                                                <IconButton\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                        members[index].setIfTrueTolerance = null;\r\n                                                        this.setStateWithParent({members});\r\n                                                    }}>\r\n                                                    <ClearIcon />\r\n                                                </IconButton>\r\n                                                : undefined,\r\n                                        }}\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].setIfTrueTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                                            this.setStateWithParent({members});\r\n                                        } }/>\r\n                                </Box>\r\n                            }\r\n                        </Box> : null }\r\n                        { !this.state.virtualGroup && this.state.onFalseEnabled ?\r\n                            <Box className={ classes.p }>\r\n                                {\r\n                                    this.state.objectTypes[member.id] === 'boolean' ?\r\n                                        <FormControl className={ classes.setValue }>\r\n                                            <InputLabel>{ I18n.t('Setpoint by FALSE') }</InputLabel>\r\n                                            <Select\r\n                                                value={ member.setIfFalse === true || member.setIfFalse === 'true' ? 'true' : (member.setIfFalse === false || member.setIfFalse === 'false' ? 'false' : 'null')}\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].setIfFalse = e.target.value === 'true' ? true : (e.target.value === 'false' ? false : null);\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            >\r\n                                                <MenuItem value=\"false\">FALSE</MenuItem>\r\n                                                <MenuItem value=\"true\">TRUE</MenuItem>\r\n                                                <MenuItem value=\"null\">{I18n.t('NOT CHANGE')}</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        <Box className={ classes.p }>\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                InputLabelProps={ {shrink: true} }\r\n                                                label={ I18n.t('Setpoint by FALSE') }\r\n                                                value={ member.setIfFalse === undefined || member.setIfFalse === null ? '' : member.setIfFalse }\r\n                                                className={ classes.setValue }\r\n                                                InputProps={{\r\n                                                    endAdornment: member.setIfFalse ?\r\n                                                        <IconButton\r\n                                                            size=\"small\"\r\n                                                            onClick={() => {\r\n                                                                const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                                members[index].setIfFalse = null;\r\n                                                                this.setStateWithParent({members});\r\n                                                            }}>\r\n                                                            <ClearIcon />\r\n                                                        </IconButton>\r\n                                                        : undefined,\r\n                                                }}\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    if (this.state.objectTypes[member.id] === 'number') {\r\n                                                        members[index].setIfFalse = parseFloat(e.target.value.replace(',', '.'));\r\n                                                    } else {\r\n                                                        members[index].setIfFalse = e.target.value;\r\n                                                    }\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                            <TextField\r\n                                                InputLabelProps={ {shrink: true} }\r\n                                                label={ '± ' + I18n.t('Tolerance by FALSE') }\r\n                                                title={ I18n.t('Absolute value, not percent') }\r\n                                                value={ member.setIfFalseTolerance === undefined || member.setIfFalseTolerance === null ? '' : member.setIfFalseTolerance }\r\n                                                className={ classes.setValue }\r\n                                                InputProps={{\r\n                                                    endAdornment: member.setIfFalseTolerance ?\r\n                                                        <IconButton\r\n                                                            size=\"small\"\r\n                                                            onClick={() => {\r\n                                                                const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                                members[index].setIfFalseTolerance = null;\r\n                                                                this.setStateWithParent({members});\r\n                                                            }}>\r\n                                                            <ClearIcon />\r\n                                                        </IconButton>\r\n                                                        : undefined,\r\n                                                }}\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].setIfFalseTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                        </Box>\r\n                                }\r\n                            </Box>\r\n                            : null}\r\n                        <Box className={ classes.p }>\r\n                            <Grid container spacing={ 4 }>\r\n                                <Grid item xs={ 12 } sm={ 6 }>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        InputLabelProps={{shrink: true}}\r\n                                        label={ I18n.t('Delay from start of scene (ms)')}\r\n                                        title={ I18n.t(\r\n                                            'Additionally to the interval between commands. E.g. if the interval %s, this state will be set after %s ms from scene start',\r\n                                            this.props.intervalBetweenCommands,\r\n                                            this.props.intervalBetweenCommands * index + (member.delay || 0)\r\n                                        )}\r\n                                        value={ member.delay || 0}\r\n                                        min={ 0 }\r\n                                        type=\"number\"\r\n                                        onChange={e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].delay = parseInt(e.target.value, 10);\r\n                                            this.setStateWithParent({members});\r\n                                        }}/>\r\n                                </Grid>\r\n                                <Grid item xs={ 12 } sm={ 6 }>\r\n                                    <FormControlLabel\r\n                                        label={ I18n.t('Stop already started commands') }\r\n                                        control={\r\n                                            <Checkbox\r\n                                                checked={ member.stopAllDelays }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].stopAllDelays = e.target.checked;\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                    }/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                        <Box className={ classes.p }>\r\n                            <FormControlLabel\r\n                                label={ I18n.t('Do not overwrite state if it has the required value') }\r\n                                title={\r\n                                    I18n.t('For example, if the value is already at \"%s\" and \"%s\" is the setpoint, then write the value anyway if this checkbox is activated.',\r\n                                        member.setIfTrue === undefined || member.setIfTrue === null ? 'null' : member.setIfTrue.toString(),\r\n                                        member.setIfTrue === undefined || member.setIfTrue === null ? 'null' : member.setIfTrue.toString())\r\n                                }\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={ !!member.doNotOverwrite }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].doNotOverwrite = e.target.checked;\r\n                                            this.setStateWithParent({members});\r\n                                        } }\r\n                                    />\r\n                            }/>\r\n                        </Box>\r\n                    </div> :\r\n                    (!this.state.virtualGroup ? <div className={ classes.smallOnTrueFalse }>\r\n                        { setIfTrueVisible ? `${onFalseEnabled ? I18n.t('Set if TRUE') : I18n.t('Setpoint')}: ` : ''}\r\n                        { setIfTrueVisible ? <span className={ classes.stateValueTrue }>{ setIfTrue }</span> : null }\r\n                        { setIfFalseVisible && onFalseEnabled ? `${setIfTrueVisible ? ' / ' : ''}${I18n.t('Set if FALSE')}: ` : null}\r\n                        { setIfFalseVisible && onFalseEnabled ? <span className={ classes.stateValueFalse }>{ setIfFalse }</span> : null}\r\n                    </div> : <div style={ {height: 8} }/>)\r\n            }\r\n        </Paper>\r\n    };\r\n\r\n    onWriteScene(val) {\r\n        if (val === 'true') {\r\n            val = true;\r\n        } else if (val === 'false') {\r\n            val = false;\r\n        } else if (typeof val === 'string' && parseFloat(val.replace(',', '.')).toString() === val) {\r\n            val = parseFloat(val.replace(',', '.'));\r\n        }\r\n\r\n        this.props.socket.setState(this.props.sceneId, val)\r\n            .catch(e => this.props.showError(e));\r\n    }\r\n\r\n    getItemStyle = (isDragging, draggableStyle) => ({\r\n        // some basic styles to make the items look a bit nicer\r\n        userSelect: 'none',\r\n        background: isDragging ? 'lightgreen' : 'inherit',\r\n\r\n        // styles we need to apply on draggables\r\n        ...draggableStyle\r\n    });\r\n\r\n    getListStyle = isDraggingOver => ({\r\n        background: isDraggingOver ? 'lightblue' : 'inherit',\r\n    });\r\n\r\n    render = () => {\r\n        let sceneState = this.state.states[this.props.sceneId];\r\n        if (this.state.selectedSceneChanged) {\r\n            sceneState = I18n.t('Save scene before test');\r\n        } else if (sceneState === undefined || sceneState === null) {\r\n            sceneState = '';\r\n        }\r\n\r\n        if (this.engineId !== this.state.engineId) {\r\n            this.engineId && this.props.socket.unsubscribeState(this.engineId + '.alive', this.memberStateChange);\r\n            this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n            this.engineId = this.state.engineId;\r\n        }\r\n\r\n        const onFalseEnabled =!this.state.virtualGroup && this.state.onFalseEnabled;\r\n\r\n        let result = <div key=\"SceneMembersForm\" className={ clsx(!this.props.oneColumn && this.props.classes.height, this.props.classes.columnContainer) }>\r\n            <Toolbar classes={{ gutters: this.props.classes.guttersZero }}>\r\n                <Typography variant=\"h6\" className={ clsx(this.props.classes.sceneTitle) } >\r\n                    { I18n.t('Scene states') }{ !this.state.states[this.state.engineId + '.alive'] ? <span className={ this.props.classes.instanceNotActive }>{ I18n.t('Instance not active') }</span> : ''}\r\n                    <br/>\r\n                    <span className={ clsx(\r\n                        this.props.classes.sceneSubTitle,\r\n                        !this.state.virtualGroup && sceneState === true && this.props.classes.sceneTrue,\r\n                        !this.state.virtualGroup && sceneState === false && this.props.classes.sceneFalse,\r\n                        !this.state.virtualGroup && sceneState === 'uncertain' && this.props.classes.sceneUncertain,\r\n                    ) }>{ I18n.t('Scene state:') } { sceneState === true ? 'TRUE' : (sceneState === false ? 'FALSE' : sceneState.toString()) }</span>\r\n                </Typography>\r\n                <IconButton title={I18n.t('Add new state')} onClick={() => this.setState({showDialog: true})}>\r\n                    <IconAdd/>\r\n                </IconButton>\r\n            </Toolbar>\r\n            <div className={ clsx(this.props.classes.testButtons, this.props.classes.width100) }>\r\n                {  !this.state.selectedSceneChanged && this.state.virtualGroup ? <TextField\r\n                    className={ this.props.classes.width100WithButton }\r\n                    label={ I18n.t('Write to virtual group') }\r\n                    defaultValue={ sceneState }\r\n                    onKeyUp={e => e.keyCode === 13 && this.onWriteScene(this.state.writeSceneState)}\r\n                    onChange={e => this.setState({writeSceneState: e.target.value}) }\r\n                /> : null}\r\n                { !this.state.selectedSceneChanged && this.state.virtualGroup && this.state.members.length ? <IconButton\r\n                    onClick={e => this.onWriteScene(this.state.writeSceneState) }\r\n                ><IconPlay/></IconButton> : null}\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && !this.state.virtualGroup ? <Button\r\n                    className={ this.props.classes.btnTestTrue }\r\n                    onClick={ () => this.onWriteScene(true) }\r\n                ><IconPlay/>{ !onFalseEnabled ? I18n.t('Test') : I18n.t('Test TRUE') }</Button> : null }\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && onFalseEnabled && this.state.members.length ? <Button\r\n                    className={ this.props.classes.btnTestFalse }\r\n                    onClick={ () => this.onWriteScene(false) }\r\n                ><IconPlay/>{ I18n.t('Test FALSE') }</Button> : null }\r\n                {this.state.members.length > 1 && this.state.openedMembers.length ? <IconButton\r\n                    title={I18n.t('Collapse all')}\r\n                    className={ this.props.classes.btnCollapseAll }\r\n                    onClick={ () => {\r\n                        window.localStorage.setItem('Scenes.openedMembers', '[]');\r\n                        this.setState({openedMembers: []});\r\n                    } }\r\n                ><IconCollapseAll/></IconButton> : null }\r\n                {this.state.members.length > 1 && this.state.openedMembers.length !== this.state.members.length ? <IconButton\r\n                    title={I18n.t('Expand all')}\r\n                    className={ this.props.classes.btnExpandAll }\r\n                    onClick={ () => {\r\n                        const openedMembers = this.state.members.map(member => member.id);\r\n                        window.localStorage.setItem('Scenes.openedMembers', JSON.stringify(openedMembers));\r\n                        this.setState({openedMembers});\r\n                    } }\r\n                ><IconExpandAll/></IconButton> : null }\r\n            </div>\r\n            <DragDropContext onDragEnd={ this.onDragEnd }>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div className={ this.props.classes.scroll }\r\n                             {...provided.droppableProps}\r\n                             ref={ provided.innerRef }\r\n                             style={ this.getListStyle(snapshot.isDraggingOver) }\r\n                        >\r\n                            { this.state.members.map((member, i) =>\r\n                                <Draggable key={ member.id + '_' + i } draggableId={ member.id + '_' + i } index={ i }>\r\n                                    {(provided, snapshot) =>\r\n                                        <div\r\n                                            ref={ provided.innerRef }\r\n                                            {...provided.draggableProps }\r\n                                            {...provided.dragHandleProps }\r\n                                            style={ this.getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            ) }\r\n                                        >{ this.renderMember(member, i) }</div>}\r\n                                </Draggable>\r\n                            )}\r\n                            { provided.placeholder }\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>;\r\n\r\n        return [\r\n            result,\r\n            this.renderDeleteDialog(),\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneMembersForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateSceneMembers: PropTypes.func,\r\n    sceneId: PropTypes.string,\r\n    onFalseEnabled: PropTypes.bool,\r\n    virtualGroup: PropTypes.bool,\r\n    sceneEnabled: PropTypes.bool,\r\n    selectedSceneChanged: PropTypes.bool,\r\n    intervalBetweenCommands: PropTypes.number,\r\n    engineId: PropTypes.string,\r\n    oneColumn: PropTypes.bool,\r\n    showError: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(SceneMembersForm);","// Common\r\nimport React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nimport AceEditor from 'react-ace';\r\nimport 'ace-builds/src-noconflict/mode-json';\r\nimport 'ace-builds/src-noconflict/theme-clouds_midnight';\r\nimport 'ace-builds/src-noconflict/theme-chrome';\r\nimport 'ace-builds/src-noconflict/ext-language_tools'\r\n\r\n// Own\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport copy from '@iobroker/adapter-react/Components/copy-to-clipboard';\r\n\r\nconst styles = theme => ({\r\n    divWithoutTitle: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: '2px solid #00000000',\r\n    },\r\n    error: {\r\n        border: '2px solid #FF0000',\r\n    },\r\n});\r\n\r\nclass ExportImportDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            text: props.sceneObj ? JSON.stringify(props.sceneObj, null, 2) : '',\r\n            error: false,\r\n            toast: '',\r\n        };\r\n    }\r\n\r\n    onChange(value) {\r\n        const newState = {text: value};\r\n        try {\r\n            JSON.parse(value);\r\n            if (this.state.error) {\r\n                newState.error = false;\r\n            }\r\n\r\n            this.setState(newState);\r\n        } catch (e) {\r\n            newState.error = true;\r\n            this.setState(newState);\r\n        }\r\n    }\r\n\r\n    renderToast() {\r\n        return <Snackbar open={ !!this.state.toast } autoHideDuration={ 3000 } onClick={ () => this.setState({ toast: '' }) } onClose={ () => this.setState({ toast: '' }) }>\r\n            <Alert color=\"info\" severity=\"success\" >{ this.state.toast }</Alert>\r\n        </Snackbar>;\r\n    }\r\n\r\n    render() {\r\n        return <Dialog\r\n            open={ true }\r\n            onClose={ () => this.props.onClose() }\r\n            aria-labelledby=\"export-dialog-title\"\r\n            fullWidth\r\n            maxWidth=\"lg\"\r\n            fullScreen={ true }\r\n            aria-describedby=\"export-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"export-dialog-title\">{ this.props.isImport ? I18n.t('Import scene') : I18n.t('Export scene') }</DialogTitle>\r\n            <DialogContent>\r\n                <div className={ clsx(this.props.classes.divWithoutTitle, this.state.error && this.props.classes.error) }>\r\n                    <AceEditor\r\n                        autoFocus\r\n                        mode=\"json\"\r\n                        width=\"100%\"\r\n                        height=\"100%\"\r\n                        onLoad={editor => {\r\n                            this.codeEditor = editor;\r\n                            this.codeEditor.focus();\r\n                        }}\r\n                        theme={ this.props.themeType === 'dark' ? 'clouds_midnight' : 'chrome' }\r\n                        onChange={ newValue => this.onChange(newValue) }\r\n                        value={ this.state.text || '' }\r\n                        name=\"UNIQUE_ID_OF_DIV\"\r\n                        fontSize={ 14 }\r\n                        readOnly={ !this.props.isImport }\r\n                        editorProps={{ $blockScrolling: true }}\r\n                    />\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={ () => this.props.onClose() } autoFocus={ !this.props.isImport }>\r\n                    { I18n.t('Close') }\r\n                </Button>\r\n                { this.props.isImport ?\r\n                    <Button\r\n                        disabled={ !this.state.text || this.state.error }\r\n                        onClick={ () => this.props.onClose(JSON.parse(this.state.text)) }\r\n                        color=\"primary\"\r\n                    >\r\n                        { I18n.t('Import') }\r\n                    </Button>\r\n                    :\r\n                    <Button onClick={ () => {\r\n                        copy(this.state.text);\r\n                        this.setState({ toast: I18n.t('Copied') });\r\n                        setTimeout(() => this.props.onClose(), 500);\r\n                    } } color=\"primary\" autoFocus>\r\n                        { I18n.t('Copy to clipboard') }\r\n                    </Button>}\r\n                { this.renderToast() }\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n}\r\n\r\nExportImportDialog.propTypes = {\r\n    classes: PropTypes.object,\r\n    sceneObj: PropTypes.object,\r\n    themeType: PropTypes.string,\r\n    onClose: PropTypes.func,\r\n    isImport: PropTypes.bool,\r\n};\r\n\r\nexport default withStyles(styles)(ExportImportDialog);","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport { useDrag, useDrop, DndProvider as DragDropContext } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\n\r\nimport List from '@material-ui/core/List';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport {FaFolder as IconFolderClosed, FaFolderOpen as IconFolderOpened, FaScroll as IconScript} from 'react-icons/fa';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\n// icons\r\nimport {MdExpandLess as IconCollapse} from 'react-icons/md';\r\nimport {MdExpandMore as IconExpand} from 'react-icons/md';\r\nimport {MdModeEdit as IconEdit} from 'react-icons/md';\r\nimport {MdClose as IconCancel} from 'react-icons/md';\r\nimport {MdCheck as IconCheck} from 'react-icons/md';\r\nimport {MdAdd as IconAdd} from 'react-icons/md';\r\nimport {MdCreateNewFolder as IconFolderAdd} from 'react-icons/md';\r\nimport {MdSwapVert as IconReorder} from 'react-icons/md';\r\n\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nconst LEVEL_PADDING = 16;\r\n\r\nexport const Droppable = (props) => {\r\n    const { onDrop} = props;\r\n\r\n    const [{ isOver, isOverAny}, drop] = useDrop({\r\n        accept: ['item'],\r\n        drop: e => isOver ? onDrop(e) : undefined,\r\n        collect: monitor => ({\r\n            isOver: monitor.isOver({ shallow: true }),\r\n            isOverAny: monitor.isOver(),\r\n        }),\r\n    });\r\n\r\n    return <div ref={drop} className={clsx(isOver && 'js-folder-dragover', isOverAny && 'js-folder-dragging')}>\r\n        {props.children}\r\n    </div>;\r\n};\r\n\r\nexport const Draggable = (props) => {\r\n    const { name } = props;\r\n    const [{ opacity }, drag] = useDrag({\r\n        item: {\r\n            name,\r\n            type: 'item'\r\n        },\r\n        collect: (monitor) => ({\r\n            opacity: monitor.isDragging() ? 0.3 : 1,\r\n        }),\r\n    });\r\n\r\n    // About transform: https://github.com/react-dnd/react-dnd/issues/832#issuecomment-442071628\r\n    return <div ref={drag} style={{ opacity, transform: 'translate3d(0, 0, 0)' }}>\r\n        {props.children}\r\n    </div>;\r\n};\r\n\r\nconst styles = theme => ({\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        width: '100%',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    heightMinusToolbar: {\r\n        height: 'calc(100% - 48px)',\r\n    },\r\n    mainToolbar: {\r\n        background: theme.palette.primary.main,\r\n    },\r\n    textInput: {\r\n        display: 'block',\r\n    },\r\n    noGutters: {\r\n        paddingLeft: 0,\r\n        paddingRight: 0,\r\n    },\r\n    noPaddings: {\r\n        paddingTop: 0,\r\n        paddingBottom: 0,\r\n    },\r\n    itemIcon: {\r\n        width: 24,\r\n        height: 24,\r\n    },\r\n    itemIconRoot: {\r\n        minWidth: 24 + theme.spacing(1),\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n    leftMenuItem: {\r\n        display: 'block',\r\n        borderRadius: 10,\r\n    },\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    itemIconFolder: {\r\n        color: theme.palette.type === 'dark' ? '#ffca2c' : '#ffca2c'\r\n    },\r\n    changed: {\r\n        position: 'relative',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            width: 6,\r\n            height: 6,\r\n            borderRadius: 6,\r\n            background: '#FF0000',\r\n            position: 'absolute',\r\n            top: 5,\r\n            right: 5,\r\n        },\r\n    },\r\n    disabled: {\r\n        opacity: 0.3\r\n    },\r\n    folderItem: {\r\n        fontWeight: 'bold',\r\n        cursor: 'pointer',\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    listItemTitle: {\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    listItemSubTitle: {\r\n        color: theme.palette.type === 'dark' ? '#bababa': '#2a2a2a',\r\n    },\r\n    list: {\r\n        width: '100%',\r\n        padding: 0,\r\n    },\r\n    p: {\r\n        margin: '1em 0',\r\n    },\r\n    folderButtons:  {\r\n        height: 32,\r\n    },\r\n    mainList: {\r\n        width: 'calc(100% - ' + theme.spacing(1) + 'px)',\r\n        marginLeft: theme.spacing(1),\r\n        '& .js-folder-dragover>li.folder-reorder': {\r\n            background: '#40adff'\r\n        },\r\n        '& .js-folder-dragging .folder-reorder': {\r\n            opacity: 1,\r\n        },\r\n        '& .js-folder-dragging .item-reorder': {\r\n            opacity: 0.3,\r\n        }\r\n    }\r\n});\r\n\r\nclass ScenesList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let opened;\r\n        try {\r\n            opened = JSON.parse(window.localStorage.getItem('Scenes.opened')) || [];\r\n        } catch (e) {\r\n            opened = [];\r\n        }\r\n\r\n        this.state = {\r\n            opened,\r\n            search: '',\r\n            reorder: false,\r\n            showSearch: false,\r\n            addFolderDialog: null,\r\n            addFolderDialogTitle: null,\r\n            editFolderDialogeditFolderDialog: null,\r\n            editFolderDialogTitle: null,\r\n        };\r\n    }\r\n\r\n    onAddFolder(parent, id) {\r\n        let opened = JSON.parse(JSON.stringify(this.state.opened));\r\n        opened.push(id);\r\n        this.setState({addFolderDialog: null, opened}, () =>\r\n            this.props.onCreateFolder(parent, id));\r\n    }\r\n\r\n    renderAddFolderDialog() {\r\n        return this.state.addFolderDialog ?\r\n            <Dialog\r\n                key=\"addDialog\"\r\n                open={ !!this.state.addFolderDialog }\r\n                onClose={ () => this.setState({addFolderDialog: null}) }\r\n            >\r\n                <DialogTitle>{I18n.t('Create folder')}</DialogTitle>\r\n                <DialogContent className={ this.props.classes.p }>\r\n                    <TextField\r\n                        autoFocus={true}\r\n                        label={ I18n.t('Title') }\r\n                        value={ this.state.addFolderDialogTitle }\r\n                        onChange={ e =>\r\n                            this.setState({addFolderDialogTitle: e.target.value.replace(Utils.FORBIDDEN_CHARS, '_').replace(/\\./g, '_')}) }\r\n                        onKeyUp={e => e.keyCode === 13 && this.onAddFolder(this.state.addFolderDialog, this.state.addFolderDialogTitle) }\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                    <Button variant=\"contained\" onClick={ () => this.setState({addFolderDialog: null}) }>\r\n                        <IconCancel className={ this.props.classes.buttonIcon }/>\r\n                        { I18n.t('Cancel') }\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        disabled={!this.state.addFolderDialogTitle || Object.keys(this.props.folders.subFolders).find(name => name === this.state.addFolderDialogTitle)}\r\n                        onClick={() => this.onAddFolder(this.state.addFolderDialog, this.state.addFolderDialogTitle)}\r\n                        color=\"primary\" autoFocus\r\n                    >\r\n                        <IconCheck className={ this.props.classes.buttonIcon }/>\r\n                        {I18n.t('Create')}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog> : null;\r\n    }\r\n\r\n    onRenameFolder(folder, newName) {\r\n        let pos;\r\n\r\n        // if selected folder opened, replace its ID in this.state.opened\r\n        if ((pos = this.state.opened.indexOf(folder.prefix)) !== -1) {\r\n            const opened = [...this.state.opened];\r\n            opened.splice(pos, 1);\r\n            opened.push(newName);\r\n            opened.sort();\r\n            this.setState({opened});\r\n        }\r\n\r\n        return this.props.onRenameFolder(this.state.editFolderDialog, this.state.editFolderDialogTitle)\r\n            .then(() => this.setState({editFolderDialog: null}));\r\n    }\r\n\r\n    renderEditFolderDialog() {\r\n        if (!this.state.editFolderDialog) {\r\n            return;\r\n        }\r\n\r\n        const isUnique = !Object.keys(this.props.folders.subFolders).find(folder => folder.id === this.state.editFolderDialogTitle);\r\n\r\n        return <Dialog\r\n            key=\"dialogEdit\"\r\n            open={ !!this.state.editFolderDialog }\r\n            onClose={ () => this.setState({editFolderDialog: null}) }\r\n        >\r\n            <DialogTitle>{ I18n.t('Edit folder') }</DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                    autoFocus={true}\r\n                    label={ I18n.t('Title') }\r\n                    value={ this.state.editFolderDialogTitle }\r\n                    onChange={ e => this.setState({editFolderDialogTitle: e.target.value.replace(Utils.FORBIDDEN_CHARS, '_').replace(/\\./g, '_')}) }\r\n                    onKeyUp={e => e.keyCode === 13 && this.onRenameFolder(this.state.editFolderDialog, this.state.editFolderDialogTitle) }\r\n                />\r\n            </DialogContent>\r\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                <Button variant=\"contained\" onClick={ () => this.setState({editFolderDialog: null}) }>\r\n                    <IconCancel className={ this.props.classes.buttonIcon }/>\r\n                    { I18n.t('Cancel') }\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    disabled={ !this.state.editFolderDialogTitle || this.state.editFolderDialogTitleOrigin === this.state.editFolderDialogTitle || !isUnique}\r\n                    onClick={() => this.onRenameFolder(this.state.editFolderDialog, this.state.editFolderDialogTitle)}\r\n                    color=\"primary\"\r\n                    autoFocus\r\n                >\r\n                    <IconCheck className={ this.props.classes.buttonIcon }/>\r\n                    { I18n.t('Apply') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n\r\n    toggleFolder(folder) {\r\n        const opened = [...this.state.opened];\r\n        const pos = opened.indexOf(folder.prefix);\r\n        if (pos === -1) {\r\n            opened.push(folder.prefix);\r\n        } else {\r\n            opened.splice(pos, 1);\r\n\r\n            // If active scene is inside this folder select the first scene\r\n            if (Object.keys(folder.scenes).includes(this.props.selectedSceneId)) {\r\n                // To do ask question\r\n                if (this.props.selectedSceneChanged) {\r\n                    this.confirmCb = () => {\r\n                        this.setState({selectedSceneId: '', selectedSceneData: null, selectedSceneChanged: false, opened});\r\n                        window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\r\n                    };\r\n                    return this.setState({sceneChangeDialog: 'empty'});\r\n                }\r\n\r\n                this.setState({selectedSceneId: '', selectedSceneData: null, selectedSceneChanged: false});\r\n            }\r\n        }\r\n\r\n        window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\r\n\r\n        this.setState({opened});\r\n    }\r\n\r\n    renderTreeScene = (item, level) => {\r\n        const scene = this.props.scenes[item._id];\r\n        if (!scene || (this.state.search && !item.common.name.includes(this.state.search))) {\r\n            return null;\r\n        }\r\n\r\n        level = level || 0;\r\n\r\n        const changed = this.props.selectedSceneId && this.props.selectedSceneId === scene._id && this.props.selectedSceneChanged;\r\n\r\n        const listItem = <ListItem\r\n            style={ {paddingLeft: (this.state.reorder ? level : (level - 1)) * LEVEL_PADDING} }\r\n            key={ item._id }\r\n            classes={{root: this.props.classes.noPaddings}}\r\n            selected={ this.props.selectedSceneId ? this.props.selectedSceneId === scene._id : false }\r\n            button\r\n            className={ clsx(\r\n                changed && this.props.classes.changed,\r\n                !scene.common.enabled && this.props.classes.disabled,\r\n                this.state.reorder && 'item-reorder'\r\n            ) }\r\n            onClick={ () => this.props.onSceneSelect(scene._id) }>\r\n            <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} }><IconScript className={ this.props.classes.itemIcon }/></ListItemIcon>\r\n            <ListItemText\r\n                classes={ {primary: this.props.classes.listItemTitle, secondary: this.props.classes.listItemSubTitle} }\r\n                primary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) }\r\n                secondary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}, true) }\r\n            />\r\n            {!this.state.reorder ? <ListItemSecondaryAction>\r\n                {this.state.changingScene === scene._id ?\r\n                    <CircularProgress size={ 24 }/>\r\n                    :\r\n                    <Switch\r\n                        checked={ scene.common.enabled }\r\n                        onChange={event => this.props.onSceneEnableDisable(event.target.name) }\r\n                        name={ scene._id }\r\n                    />\r\n                }\r\n            </ListItemSecondaryAction> : null}\r\n        </ListItem>;\r\n\r\n        if (this.state.reorder) {\r\n            return <Draggable key={'draggable_' + item._id} name={item._id}>{listItem}</Draggable>;\r\n        } else {\r\n            return  listItem;\r\n        }\r\n    };\r\n\r\n    onDragFinish(source, target) {\r\n        console.log('Rename ' + source + ' => ' + target);\r\n        let newId = target + '.' + source.split('.').pop();\r\n        if (source !== newId) {\r\n            if (this.props.scenes[newId]) {\r\n                newId += '_' + I18n.t('copy');\r\n            }\r\n            this.props.onMoveScene(source, newId);\r\n        }\r\n    }\r\n\r\n    renderTree(parent, level) {\r\n        let result = [];\r\n        level = level || 0;\r\n        let opened = this.state.reorder ||(this.state.opened ? this.state.opened.includes(parent.prefix) : false);\r\n\r\n        const reactChildren = [];\r\n        if (parent && (opened || !parent.id)) { // root cannot be closed and have id === ''\r\n            const values     = Object.values(parent.scenes);\r\n            const subFolders = Object.values(parent.subFolders);\r\n\r\n            // add first sub-folders\r\n            subFolders\r\n                .sort((a, b) => a.id > b.id ? 1 : (a.id < b.id ? -1 : 0))\r\n                .forEach(subFolder =>\r\n                    reactChildren.push(this.renderTree(subFolder, level + 1)));\r\n\r\n            // Add as second scenes\r\n            if (values.length || subFolders.length) {\r\n                values\r\n                    .sort((a, b) => a._id > b._id ? 1 : (a._id < b._id ? -1 : 0))\r\n                    .forEach(scene =>\r\n                        reactChildren.push(this.renderTreeScene(scene, level + 1)));\r\n            } else {\r\n                reactChildren.push(<ListItem><ListItemText className={ this.props.classes.folderItem}>{ I18n.t('No scenes created yet')}</ListItemText></ListItem>);\r\n            }\r\n        }\r\n\r\n        // Show folder item\r\n        if (parent && (parent.id || this.state.reorder)) {\r\n            const folder = <ListItem\r\n                key={ parent.prefix }\r\n                classes={ {gutters: this.props.classes.noGutters, root: this.props.classes.noPaddings} }\r\n                className={ clsx(this.props.classes.width100, this.props.classes.folderItem, this.state.reorder && 'folder-reorder') }\r\n                style={ {paddingLeft: (this.state.reorder ? level : (level - 1)) * LEVEL_PADDING} }\r\n            >\r\n                <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} } onClick={ () => this.toggleFolder(parent) }>{ opened ?\r\n                    <IconFolderOpened className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/> :\r\n                    <IconFolderClosed className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/>\r\n                }</ListItemIcon>\r\n                <ListItemText>{ parent.id || I18n.t('Root') }</ListItemText>\r\n                {!this.state.reorder ? <ListItemSecondaryAction>\r\n                    {opened ? <IconButton\r\n                        onClick={() => this.props.onCreateScene(parent.id) }\r\n                        title={ I18n.t('Create new scene') }\r\n                    ><IconAdd/></IconButton> : null}\r\n                    <IconButton\r\n                        onClick={ () =>\r\n                            this.setState({\r\n                                editFolderDialog: parent,\r\n                                editFolderDialogTitle: parent.id,\r\n                                editFolderDialogTitleOrigin: parent.id\r\n                            })\r\n                        }\r\n                        title={ I18n.t('Edit folder name') }\r\n                    ><IconEdit/></IconButton>\r\n                    <IconButton onClick={ () => this.toggleFolder(parent) } title={ opened ? I18n.t('Collapse') : I18n.t('Expand')  }>\r\n                        { opened ? <IconExpand/> : <IconCollapse/> }\r\n                    </IconButton>\r\n                </ListItemSecondaryAction> : null}\r\n            </ListItem>;\r\n\r\n            if (!this.state.reorder) {\r\n                result.push(folder);\r\n            } else {\r\n                result.push(<Droppable\r\n                    key={'droppable_' + parent.prefix}\r\n                    name={parent.prefix}\r\n                    onDrop={e => this.onDragFinish(e.name, 'scene.0' + (parent.prefix ? '.' : '') + parent.prefix)}\r\n                >\r\n                    {folder}\r\n                </Droppable>);\r\n            }\r\n        }\r\n\r\n        reactChildren && reactChildren.forEach(r => result.push(r));\r\n\r\n        return result;\r\n    }\r\n\r\n    renderListToolbar() {\r\n        return <Toolbar key=\"toolbar\" variant=\"dense\" className={ this.props.classes.mainToolbar }>\r\n            {!this.state.reorder ? <IconButton\r\n                onClick={ () => this.props.onCreateScene() }\r\n                title={ I18n.t('Create new scene') }\r\n            ><IconAdd/></IconButton> : null}\r\n\r\n                {!this.state.reorder ? <IconButton\r\n                onClick={ () => this.setState({addFolderDialog: this.props.folders, addFolderDialogTitle: ''}) }\r\n                title={ I18n.t('Create new folder') }\r\n            ><IconFolderAdd/></IconButton> : null}\r\n\r\n            {!this.state.reorder ? <span className={this.props.classes.right}>\r\n                <IconButton onClick={() => this.setState({showSearch: !this.state.showSearch}) }>\r\n                    <SearchIcon/>\r\n                </IconButton>\r\n            </span> : null}\r\n            {this.state.showSearch ?\r\n                <TextField\r\n                    value={ this.state.search }\r\n                    className={ this.props.classes.textInput }\r\n                    onChange={ e => this.setState({search: e.target.value}) }/>\r\n                : null\r\n            }\r\n            <div style={{flexGrow: 1}}/>\r\n            {!this.state.showSearch ? <IconButton\r\n                key=\"reorder\"\r\n                title={I18n.t('Reorder scenes in folders')}\r\n                className={this.props.classes.toolbarButtons}\r\n                style={{color: this.state.reorder ? 'red' : undefined, float: 'right'}}\r\n                onClick={e => {\r\n                    e.stopPropagation();\r\n                    this.setState({reorder: !this.state.reorder});\r\n                }}\r\n            ><IconReorder/></IconButton> : null }\r\n        </Toolbar>;\r\n    }\r\n\r\n    render() {\r\n        return [\r\n            this.renderListToolbar(),\r\n            <div key=\"list\" className={ this.props.classes.heightMinusToolbar }>\r\n                <DragDropContext backend={HTML5Backend}>\r\n                    <List className={ clsx(this.props.classes.scroll, this.props.classes.mainList) }>\r\n                        { this.renderTree(this.props.folders) }\r\n                    </List>\r\n                </DragDropContext>\r\n            </div>,\r\n            this.renderAddFolderDialog(),\r\n            this.renderEditFolderDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nScenesList.propTypes = {\r\n    onRenameFolder: PropTypes.func,\r\n    onCreateScene: PropTypes.func,\r\n    onCreateFolder: PropTypes.func,\r\n    onSceneSelect: PropTypes.func,\r\n    onMoveScene: PropTypes.func,\r\n    onSceneEnableDisable: PropTypes.func,\r\n    classes: PropTypes.object,\r\n    scenes: PropTypes.object,\r\n    selectedSceneId: PropTypes.string,\r\n    selectedSceneChanged: PropTypes.bool,\r\n    theme: PropTypes.object,\r\n    folders: PropTypes.object,\r\n};\r\n\r\nexport default withStyles(styles)(ScenesList);","// Common\r\nimport React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport { withTheme } from '@material-ui/core/styles';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport withWidth from \"@material-ui/core/withWidth\";\r\n\r\n// MaterialUi\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\n// Own\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Loader from '@iobroker/adapter-react/Components/Loader'\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport SceneForm from './components/SceneForm';\r\nimport SceneMembersForm from './components/SceneMembersForm';\r\nimport ExportImportDialog from './components/ExportImportDialog';\r\nimport ScenesList from './components/ScenesList';\r\n\r\n// icons\r\nimport {MdClose as IconCancel} from 'react-icons/md';\r\nimport {MdSave as IconSave} from 'react-icons/md';\r\nimport {MdDelete as IconDelete} from 'react-icons/md';\r\nimport {MdFileDownload as IconExport} from 'react-icons/md';\r\n// import {MdFileUpload as IconImport} from 'react-icons/md';\r\nimport {FaClone as IconClone} from 'react-icons/fa';\r\nimport {FaBars as IconMenu} from 'react-icons/fa';\r\n\r\nconst MARGIN_MEMBERS = 20;\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        height: 'calc(100% + 4px)',\r\n        backgroundColor: theme.palette.type === 'dark' ? '#000': '#fff',\r\n        overflowX: 'hidden',\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n    noGutters: {\r\n        paddingLeft: 0,\r\n        paddingRight: 0,\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    heightMinus2Toolbars: {\r\n        height: 'calc(100% - 96px)',\r\n    },\r\n    heightMinusMargin: {\r\n        height: 'calc(100% - ' + MARGIN_MEMBERS + 'px)',\r\n    },\r\n    fullWidthContainer: {\r\n        maxWidth: 'inherit',\r\n        paddingTop: 2,\r\n        paddingBottom: 2,\r\n        paddingLeft: 2,\r\n        paddingRight: 2,\r\n        overflow: 'hidden'\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    buttonsContainer1: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    membersCell: {\r\n        backgroundColor: theme.palette.type === 'dark' ? '#566770': '#ADD8E6',\r\n        marginTop: MARGIN_MEMBERS,\r\n        marginRight: theme.spacing(1),\r\n        marginBottom: theme.spacing(2),\r\n        paddingTop: 0,\r\n        paddingLeft: 10,\r\n        paddingRight: 10,\r\n        paddingBottom: 10,\r\n\r\n        borderRadius: 4,\r\n        height: 'calc(100% - ' + theme.spacing(1) + 'px)',\r\n    },\r\n    sceneTitle: {\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n        flexGrow: 1,\r\n        paddingLeft: theme.spacing(1),\r\n    },\r\n    sceneSubTitle: {\r\n        fontSize: 'small',\r\n        display: 'block'\r\n    },\r\n    toolbarButtons: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    settingsBackground: {\r\n        background: theme.palette.type === 'dark' ? '#3a3a3a': '#eeeeee',\r\n    },\r\n    drawer: {\r\n        overflow: 'hidden'\r\n    },\r\n});\r\n\r\nfunction getUrlQuery() {\r\n    const parts = (window.location.search || '').replace(/^\\?/, '').split('&');\r\n    const query = {};\r\n    parts.forEach(item => {\r\n        const [name, val] = item.split('=');\r\n        query[decodeURIComponent(name)] = val !== undefined ? decodeURIComponent(val) : true;\r\n    });\r\n    return query;\r\n}\r\n\r\nfunction getFolderPrefix(sceneId) {\r\n    let result = sceneId.split('.');\r\n    result.shift();\r\n    result.shift();\r\n    result.pop();\r\n    result = result.join('.');\r\n    return result;\r\n}\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        const extendedProps = {...props};\r\n        extendedProps.translations = {\r\n            'en': require('./i18n/en'),\r\n            'de': require('./i18n/de'),\r\n            'ru': require('./i18n/ru'),\r\n            'pt': require('./i18n/pt'),\r\n            'nl': require('./i18n/nl'),\r\n            'fr': require('./i18n/fr'),\r\n            'it': require('./i18n/it'),\r\n            'es': require('./i18n/es'),\r\n            'pl': require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n\r\n        super(props, extendedProps);\r\n\r\n        const query = getUrlQuery();\r\n\r\n        this.port = query.port || (window.location.port === '3000' ? 8081 : window.location.port);\r\n        this.host = query.host || window.location.hostname;\r\n\r\n        window.iobForceHost = this.host;\r\n    }\r\n\r\n    onConnectionReady() {\r\n        const newState = {\r\n            lang: this.socket.systemLang,\r\n            ready: false,\r\n            selectedSceneId: window.localStorage.getItem('Scenes.selectedSceneId') || '',\r\n            scenes: {},\r\n            folders: null,\r\n            changingScene: '',\r\n            instances: [],\r\n            selectedSceneChanged: false,\r\n            deleteDialog: null,\r\n            selectedSceneData: null,\r\n            exportDialog: false,\r\n            importDialog: false,\r\n            menuOpened: false,\r\n        };\r\n\r\n        this.socket.getSystemConfig()\r\n            .then(systemConfig => {\r\n                newState.systemConfig = systemConfig;\r\n\r\n                return this.socket.getAdapterInstances(window.adapterName)\r\n                    .then(instances => {\r\n                        newState.instances = instances.map(item => item._id);\r\n                        this.setState(newState, () =>\r\n                            this.refreshData());\r\n                    });\r\n            })\r\n            .catch(e => this.showError(e));\r\n    }\r\n\r\n    sceneSwitch(id) {\r\n        let scenes = JSON.parse(JSON.stringify(this.state.scenes));\r\n\r\n        if (id === this.state.selectedSceneId) {\r\n            scenes[id] = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        }\r\n\r\n        scenes[id].common.enabled = !scenes[id].common.enabled;\r\n\r\n        return this.socket.setObject(id, scenes[id])\r\n            .then(() => this.refreshData(id))\r\n            .catch(e => this.showError(e));\r\n    }\r\n\r\n    buildTree(scenes) {\r\n        scenes = Object.values(scenes);\r\n\r\n        let folders = {subFolders: {}, scenes: {}, id: '', prefix: ''};\r\n\r\n        // create missing folders\r\n        scenes.forEach((scene) => {\r\n            let id = scene._id;\r\n            const parts = id.split('.');\r\n            parts.shift();\r\n            parts.shift();\r\n            let currentFolder = folders;\r\n            let prefix = '';\r\n            for (let i = 0; i < parts.length - 1; i++) {\r\n                if (prefix) {\r\n                    prefix = prefix + '.';\r\n                }\r\n                prefix = prefix + parts[i];\r\n                if (!currentFolder.subFolders[parts[i]]) {\r\n                    currentFolder.subFolders[parts[i]] = {\r\n                        subFolders: {},\r\n                        scenes: {},\r\n                        id: parts[i],\r\n                        prefix,\r\n                    }\r\n                }\r\n                currentFolder = currentFolder.subFolders[parts[i]];\r\n            }\r\n            currentFolder.scenes[id] = scene;\r\n        });\r\n\r\n        return folders;\r\n    }\r\n\r\n    findFolder(parent, folder) {\r\n        if (parent.prefix === folder.prefix) {\r\n            return parent;\r\n        }\r\n        for (let index in parent.subFolders) {\r\n            let result = this.findFolder(parent.subFolders[index], folder);\r\n            if (result) {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    getData() {\r\n        let scenes;\r\n        return this.socket.getObjectView('scene.0.', 'scene.\\u9999', 'state')\r\n            .then(_scenes => {\r\n                scenes = _scenes;\r\n                return {scenes, folders: this.buildTree(scenes)};\r\n            })\r\n            .catch(e => this.showError(e));\r\n    }\r\n\r\n    refreshData(changingScene) {\r\n        const that = this;\r\n        return new Promise(resolve => {\r\n            if (changingScene) {\r\n                this.setState({changingScene}, () => resolve());\r\n            } else {\r\n                this.setState({ready: false}, () => resolve());\r\n            }\r\n        })\r\n            .then(() => this.getData())\r\n            .then(newState => {\r\n                newState.ready = true;\r\n                newState.changingScene = '';\r\n                newState.selectedSceneChanged = false;\r\n\r\n                // Fill missing data\r\n                Object.keys(newState.scenes).forEach(id => {\r\n                    const sceneObj = newState.scenes[id];\r\n                    sceneObj.common = sceneObj.common || {};\r\n                    sceneObj.native = sceneObj.native || {};\r\n\r\n                    // rename attribute\r\n                    if (sceneObj.native.burstIntervall !== undefined) {\r\n                        sceneObj.native.burstInterval = sceneObj.native.burstIntervall;\r\n                        delete sceneObj.native.burstIntervall;\r\n                    }\r\n\r\n                    sceneObj.native.burstInterval = parseInt(sceneObj.native.burstInterval || 0, 10);\r\n                    sceneObj.native.onFalse = sceneObj.native.onFalse || {};\r\n                    sceneObj.native.onTrue  = sceneObj.native.onTrue  || {};\r\n                    sceneObj.native.onFalse.trigger = sceneObj.native.onFalse.trigger || {condition: '=='};\r\n                    sceneObj.native.onTrue.trigger  = sceneObj.native.onTrue.trigger  || {condition: '=='};\r\n                    sceneObj.native.members = sceneObj.native.members || [];\r\n                    const members = sceneObj.native.members;\r\n                    delete sceneObj.native.members;\r\n                    sceneObj.native.members = members; // place it on the last place\r\n\r\n                    delete sceneObj.from;\r\n                    delete sceneObj.user;\r\n                    delete sceneObj.ts;\r\n                    delete sceneObj.acl;\r\n                });\r\n\r\n                if (!newState.scenes[this.state.selectedSceneId]) {\r\n                    newState.selectedSceneId = Object.keys(newState.scenes).shift() || '';\r\n                }\r\n\r\n                if ((newState.selectedSceneId || that.state.selectedSceneId) &&\r\n                    newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]) {\r\n                    newState.selectedSceneData = JSON.parse(JSON.stringify(newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]));\r\n                } else {\r\n                    newState.selectedSceneData = null;\r\n                }\r\n\r\n                that.setState(newState);\r\n            });\r\n    }\r\n\r\n    addFolder(parentFolder, id) {\r\n        let folders = JSON.parse(JSON.stringify(this.state.folders));\r\n        let _parentFolder = this.findFolder(folders, parentFolder);\r\n\r\n        _parentFolder.subFolders[id] = {\r\n            scenes: {},\r\n            subFolders: {},\r\n            id,\r\n            prefix: _parentFolder.prefix ? _parentFolder.prefix + '.' + id : id\r\n        };\r\n\r\n        this.setState({folders});\r\n    }\r\n\r\n    addSceneToFolderPrefix = (scene, folderPrefix, noRefresh) => {\r\n        let oldId = scene._id;\r\n        let sceneId = scene._id.split('.').pop();\r\n        scene._id = 'scene.0.' + folderPrefix + (folderPrefix ? '.' : '') + sceneId;\r\n\r\n        return this.socket.delObject(oldId)\r\n            .then(() => {\r\n                console.log('Deleted ' + oldId);\r\n                return this.socket.setObject(scene._id, scene)\r\n            })\r\n            .catch(e => this.showError(e))\r\n            .then(() => {\r\n                console.log('Set new ID: ' + scene._id);\r\n                return !noRefresh && this.refreshData(sceneId)\r\n                    .then(() => this.changeSelectedScene(scene._id))\r\n                    .catch(e => this.showError(e));\r\n            });\r\n    };\r\n\r\n    moveScript(oldId, newId) {\r\n        const scene = this.state.scenes[oldId];\r\n        if (this.state.selectedSceneId === oldId) {\r\n            return this.setState({selectedSceneId: newId}, () => this.moveScript(oldId, newId));\r\n        }\r\n\r\n        scene._id = newId;\r\n\r\n        return this.socket.delObject(oldId)\r\n            .then(() => {\r\n                console.log('Deleted ' + oldId);\r\n                return this.socket.setObject(scene._id, scene)\r\n            })\r\n            .catch(e => this.showError(e))\r\n            .then(() => {\r\n                console.log('Set new ID: ' + scene._id);\r\n                return this.refreshData(newId)\r\n                    .then(() => this.changeSelectedScene(scene._id))\r\n                    .catch(e => this.showError(e));\r\n            });\r\n    };\r\n\r\n    renameFolder(folder, newName) {\r\n        return new Promise(resolve => this.setState({changingScene: folder}, () => resolve()))\r\n            .then(() => {\r\n                let newSelectedId;\r\n\r\n                let prefix = folder.prefix.split('.');\r\n                prefix[prefix.length - 1] = newName;\r\n                prefix = prefix.join('.');\r\n\r\n                if (Object.keys(folder.scenes).find(id => id === this.state.selectedSceneId)) {\r\n                    newSelectedId = 'scene.0.' + prefix + '.' + this.state.selectedSceneId.split('.').pop();\r\n                }\r\n\r\n                const promises = Object.keys(folder.scenes).map(sceneId =>\r\n                    this.addSceneToFolderPrefix(folder.scenes[sceneId], prefix, true));\r\n\r\n                return Promise.all(promises)\r\n                    .then(() => this.refreshData(folder))\r\n                    .then(() => newSelectedId && this.setState({selectedSceneId: newSelectedId}));\r\n            });\r\n    }\r\n\r\n    createScene(name, parentId) {\r\n        let template = {\r\n            common: {\r\n                name: '',\r\n                type: 'boolean',\r\n                role: 'scene.state',\r\n                desc: '',\r\n                enabled: true,\r\n                read: true,\r\n                write: true,\r\n                def: false,\r\n                engine: 'system.adapter.scenes.0'\r\n            },\r\n            native: {\r\n                onTrue: {\r\n                    trigger: {},\r\n                    cron: null,\r\n                    astro: null\r\n                },\r\n                onFalse: {\r\n                    enabled: false,\r\n                    trigger: {},\r\n                    cron: null,\r\n                    astro: null\r\n                },\r\n                members: []\r\n            },\r\n            type: 'state'\r\n        };\r\n\r\n        template.common.name = name;\r\n        let id = 'scene.0.' + (parentId ? parentId + '.' : '') + template.common.name;\r\n\r\n        this.setState({changingScene: id}, () =>\r\n            this.socket.setObject(id, template)\r\n                .then(() => this.refreshData(id))\r\n                .then(() => this.changeSelectedScene(id))\r\n                .catch(e => this.showError(e))\r\n        );\r\n    };\r\n\r\n    cloneScene(id) {\r\n        let scene = JSON.parse(JSON.stringify(this.state.scenes[id]));\r\n        scene._id = scene._id.split('.');\r\n        scene._id.pop();\r\n        scene._id.push(this.getNewSceneId());\r\n        scene._id = scene._id.join('.');\r\n        scene.common.name = scene.common.name + ' ' + I18n.t('copy');\r\n\r\n        this.setState({changingScene: scene._id}, () =>\r\n            this.socket.setObject(scene._id, scene)\r\n                .then(() => this.refreshData(scene._id))\r\n                .then(() => this.changeSelectedScene(scene._id))\r\n                .catch(e => this.showError(e))\r\n        );\r\n    };\r\n\r\n    writeScene() {\r\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        scene._id = this.state.selectedSceneId;\r\n\r\n        const folder = getFolderPrefix(scene._id);\r\n        const newId = 'scene.0.' + (folder ? folder + '.' : '') + scene.common.name.replace(Utils.FORBIDDEN_CHARS, '_').replace(/\\./g, '_').replace(/\\s/g, '_');\r\n\r\n        if (scene._id !== newId) {\r\n            // check if the scene name is unique\r\n            if (Object.keys(this.state.scenes).find(id => id === newId)) {\r\n                return this.showError(I18n.t('Name is not unique. Please change name before the save.'));\r\n            }\r\n\r\n            // delete first the old scene\r\n            return this.socket.delObject(scene._id)\r\n                .then(() => {\r\n                    scene._id = newId;\r\n                    return this.socket.setObject(scene._id, scene);\r\n                })\r\n                .then(() => this.refreshData(this.state.selectedSceneId))\r\n                .then(() => this.changeSelectedScene(newId))\r\n                .catch(e => this.showError(e));\r\n        } else {\r\n            return this.socket.setObject(this.state.selectedSceneId, scene)\r\n                .then(() => this.refreshData(this.state.selectedSceneId))\r\n                .catch(e => this.showError(e));\r\n        }\r\n    }\r\n\r\n    updateScene(common, native, cb) {\r\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        if (common) {\r\n            scene.common = JSON.parse(JSON.stringify(common));\r\n        }\r\n        if (native) {\r\n            const members = scene.native.members;\r\n            scene.native = JSON.parse(JSON.stringify(native));\r\n            scene.native.members = members;\r\n        }\r\n\r\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\r\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\r\n    };\r\n\r\n    deleteScene(id) {\r\n        return this.socket.delObject(id)\r\n            .then(() => {\r\n                if (this.state.selectedSceneId === id) {\r\n                    return this.refreshData(id)\r\n                        .then(() => {\r\n                            const ids = Object.keys(this.state.scenes);\r\n                            // Find next scene\r\n                            let nextId = ids.find(_id => _id > id) || '';\r\n                            if (!nextId) {\r\n                                // try prev scene\r\n                                for (let i = ids.length - 1; i >= 0; i--) {\r\n                                    if (ids[i] < id) {\r\n                                        nextId = ids[i];\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (!nextId && ids.length) {\r\n                                nextId = ids.shift();\r\n                            }\r\n\r\n                            return this.changeSelectedScene(nextId);\r\n                        });\r\n                } else {\r\n                    return this.refreshData(id);\r\n                }\r\n            })\r\n            .catch(e => this.showError(e));\r\n    };\r\n\r\n    getNewSceneId() {\r\n        let newId = 0;\r\n\r\n        for (const id in this.state.scenes) {\r\n            let shortId = id.split('.').pop();\r\n            let matches = shortId.match(/^scene([0-9]+)$/);\r\n            if (matches && parseInt(matches[1], 10) >= newId) {\r\n                newId = parseInt(matches[1]) + 1;\r\n            }\r\n        }\r\n\r\n        return 'scene' + newId;\r\n    };\r\n\r\n    updateSceneMembers(members, cb) {\r\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        scene.native.members = JSON.parse(JSON.stringify(members));\r\n\r\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\r\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\r\n    };\r\n\r\n    changeSelectedScene(newId, ignoreUnsaved, cb) {\r\n        return new Promise(resolve => {\r\n            if (this.state.selectedSceneId !== newId) {\r\n                if (this.state.selectedSceneChanged && !ignoreUnsaved) {\r\n                    this.confirmCb = cb;\r\n                    this.setState({sceneChangeDialog: newId}, () => resolve());\r\n                } else {\r\n                    window.localStorage.setItem('Scenes.selectedSceneId', newId);\r\n                    this.setState({\r\n                        selectedSceneData: this.state.scenes[newId] ? JSON.parse(JSON.stringify(this.state.scenes[newId])) : null,\r\n                        sceneChangeDialog: '',\r\n                        selectedSceneId: newId || '',\r\n                        selectedSceneChanged: false,\r\n                        menuOpened: false,\r\n                    }, () => {\r\n                        resolve();\r\n                        cb && cb();\r\n                    });\r\n                }\r\n            } else {\r\n                resolve();\r\n                cb && cb();\r\n            }\r\n        });\r\n    }\r\n\r\n    renderSceneChangeDialog() {\r\n        const that = this;\r\n        return this.state.sceneChangeDialog ? <Dialog\r\n            open={ true }\r\n            key=\"sceneChangeDialog\"\r\n            onClose={ () => this.setState({sceneChangeDialog: ''}) }>\r\n                <DialogTitle>{ I18n.t('Are you sure for cancel unsaved changes?') }</DialogTitle>\r\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                    <Button variant=\"contained\" onClick={() => {\r\n                        this.confirmCb = null; // cancel callback\r\n                        this.setState({sceneChangeDialog: ''});\r\n                    }}>\r\n                        <IconCancel/> { I18n.t('Cancel') }\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={ () =>\r\n                        this.changeSelectedScene(this.state.sceneChangeDialog, true, () => {\r\n                            const cb = this.confirmCb;\r\n                            this.confirmCb = null;\r\n                            cb && cb();\r\n                        })\r\n                            .catch(() => console.log('ignore')) }>\r\n                        { I18n.t('Discard') }\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={e => {\r\n                        // save scene\r\n                        this.writeScene()\r\n                            .then(() => that.changeSelectedScene(that.state.sceneChangeDialog === 'empty' ? '' : that.state.sceneChangeDialog, true, () => {\r\n                                const cb = this.confirmCb;\r\n                                this.confirmCb = null;\r\n                                cb && cb();\r\n                            }))\r\n                            .catch(() => console.log('ignore'))\r\n                    }}>\r\n                        <IconSave/> { I18n.t('Save changes') }\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog> : null;\r\n    };\r\n\r\n    renderDeleteDialog() {\r\n        return this.state.deleteDialog ? <Dialog\r\n            open={ true }\r\n            key=\"deleteDialog\"\r\n            onClose={ () => this.setState({deleteDialog: false}) }\r\n        >\r\n            <DialogTitle>{ I18n.t('Are you sure for delete this scene?') }</DialogTitle>\r\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: false}) }>\r\n                    {I18n.t('Cancel')}\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={e =>\r\n                        this.setState({deleteDialog: false}, () =>\r\n                            this.deleteScene(this.state.selectedSceneId))\r\n                    }\r\n                >\r\n                    { I18n.t('Delete') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog> : null;\r\n    }\r\n\r\n    renderExportImportDialog() {\r\n        if (!this.state.exportDialog && !this.state.importDialog) {\r\n            return null;\r\n        }\r\n\r\n        return <ExportImportDialog\r\n            isImport={ !!this.state.importDialog }\r\n            themeType={ this.state.themeType }\r\n            onClose={ importedScene => {\r\n                if (this.state.importDialog && importedScene) {\r\n                    const scene = this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId];\r\n                    importedScene.common._id = scene._id;\r\n                    importedScene.common.name = scene.name || importedScene.common.name;\r\n                    this.setState({selectedSceneData: importedScene,  importDialog: false});\r\n                } else {\r\n                    this.setState({exportDialog: false, importDialog: false})\r\n                }\r\n            } }\r\n            sceneObj={ this.state.exportDialog ? this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId] : '' }\r\n        />\r\n    }\r\n\r\n    renderSceneTopToolbar(showDrawer) {\r\n        return <Toolbar variant=\"dense\" key=\"topToolbar\" classes={ {gutters: this.props.classes.noGutters} }>\r\n            { this.props.width !== 'md' && this.props.width !== 'sm' && this.props.width !== 'xs' ? <Typography variant=\"h6\" className={ this.props.classes.sceneTitle }>\r\n                { I18n.t('Scene options') /*Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) */}\r\n                <span className={this.props.classes.sceneSubTitle}>{ Utils.getObjectNameFromObj(this.state.scenes[this.state.selectedSceneId], null, {language: I18n.getLanguage()}, true) }</span>\r\n            </Typography> : null }\r\n\r\n            { showDrawer ? <IconButton aria-label=\"Open list\" title={ I18n.t('Open list') } onClick={ () => this.setState({menuOpened: true}) }><IconMenu/></IconButton> : null }\r\n            <IconButton aria-label=\"Clone\" title={ I18n.t('Clone') } onClick={ () => this.cloneScene(this.state.selectedSceneId) }><IconClone/></IconButton>\r\n\r\n            <IconButton aria-label=\"Delete\" title={ I18n.t('Delete') } onClick={ () => this.setState({deleteDialog: true}) }><IconDelete/></IconButton>\r\n\r\n            <IconButton aria-label=\"Export\" title={ I18n.t('Export scene') } onClick={ () => this.setState({exportDialog: true}) }><IconExport/></IconButton>\r\n\r\n            {/*<IconButton aria-label=\"Import\" title={ I18n.t('Import scene') } onClick={ () => this.setState({importDialog: true}) }><IconImport/></IconButton>*/}\r\n        </Toolbar>;\r\n    }\r\n\r\n    renderSceneBottomToolbar() {\r\n        return <Toolbar variant=\"dense\" key=\"bottomToolbar\" classes={ {gutters: this.props.classes.noGutters} }>\r\n            <div style={{flexGrow: 1}}/>\r\n            { this.state.selectedSceneChanged ? <Button\r\n                className={ this.props.classes.toolbarButtons }\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => this.writeScene()}\r\n            >\r\n                { I18n.t('Save') }\r\n            </Button> : null }\r\n\r\n            { this.state.selectedSceneChanged ? <Button\r\n                className={ this.props.classes.toolbarButtons }\r\n                variant=\"contained\"\r\n                onClick={ () => this.refreshData(this.state.selectedSceneId) }\r\n            >\r\n                { I18n.t('Cancel') }\r\n            </Button> : null }\r\n        </Toolbar>;\r\n    }\r\n\r\n    renderDrawerContent() {\r\n        return <ScenesList\r\n            scenes={this.state.scenes}\r\n            folders={this.state.folders}\r\n            selectedSceneId={this.state.selectedSceneId}\r\n            selectedSceneChanged={this.state.selectedSceneChanged}\r\n            theme={this.state.theme}\r\n            onSceneSelect={id =>\r\n                this.changeSelectedScene(id)\r\n                    .catch(() => console.log('ignore'))}\r\n            onSceneEnableDisable={id => this.sceneSwitch(id)}\r\n            onCreateFolder={(parent, id) => this.addFolder(parent, id)}\r\n            onCreateScene={parentId => this.createScene(this.getNewSceneId(), parentId)}\r\n            onRenameFolder={(folder, newId) => this.renameFolder(folder, newId)}\r\n            onMoveScene={(oldId, newId) => this.moveScript(oldId, newId)}\r\n            />;\r\n    }\r\n\r\n    renderSceneMembers(oneColumn) {\r\n        return <SceneMembersForm\r\n            key={ 'selected' + this.state.selectedSceneId }\r\n            oneColumn={ oneColumn }\r\n            showError={ e => this.showError(e) }\r\n            updateSceneMembers={ (members, cb) => this.updateSceneMembers(members, cb) }\r\n            selectedSceneChanged={ this.state.selectedSceneChanged }\r\n            sceneEnabled={ this.state.selectedSceneData.common.enabled }\r\n            members={ this.state.selectedSceneData.native.members }\r\n            socket={ this.socket }\r\n            onFalseEnabled={ this.state.selectedSceneData.native.onFalse.enabled }\r\n            virtualGroup={ this.state.selectedSceneData.native.virtualGroup }\r\n            sceneId={ this.state.selectedSceneId }\r\n            engineId={ this.state.selectedSceneData.common.engine }\r\n            intervalBetweenCommands={ this.state.selectedSceneData.native.burstInterval || 0 }\r\n        />;\r\n    }\r\n\r\n    renderSceneSettings(oneColumn) {\r\n        if (!this.state.selectedSceneData) {\r\n            this.state.selectedSceneData = JSON.parse(JSON.stringify(this.state.scenes[this.state.selectedSceneId]));\r\n        }\r\n\r\n        return <SceneForm\r\n            key={ this.state.selectedSceneId }\r\n            showError={ e => this.showError(e) }\r\n            oneColumn={ oneColumn }\r\n            updateScene={ (common, native, cb) => this.updateScene(common, native, cb) }\r\n            scene={ this.state.selectedSceneData }\r\n            socket={ this.socket }\r\n            instances={ this.state.instances }\r\n        />;\r\n    }\r\n\r\n    renderInOneColumn() {\r\n        return [\r\n            <Drawer\r\n                key=\"drawer\"\r\n                anchor=\"left\"\r\n                open={ this.state.menuOpened }\r\n                onClose={() => this.setState({menuOpened: false}) }\r\n                classes={ {paper: this.props.classes.drawer }}\r\n            >\r\n                { this.renderDrawerContent() }\r\n            </Drawer>,\r\n            this.renderSceneTopToolbar(true),\r\n            this.state.selectedSceneId ? <div\r\n                    key=\"main\"\r\n                    className={ this.props.classes.heightMinus2Toolbars }\r\n                    style={{ overflowY: 'auto', overflowX: 'hidden'}}\r\n                >\r\n                    { this.renderSceneSettings(true) }\r\n                    { this.renderSceneMembers(true) }\r\n                </div> : null,\r\n            this.renderSceneBottomToolbar(),\r\n        ]\r\n    }\r\n\r\n    renderInMoreThanOneColumn() {\r\n        const showDrawer = this.props.width === 'sm' || this.props.width === 'xs';\r\n\r\n        return <Container className={ clsx(this.props.classes.height, this.props.classes.fullWidthContainer) }>\r\n            <Grid container spacing={ 1 } className={ this.props.classes.height }>\r\n                { showDrawer ?\r\n                    <Drawer anchor=\"left\" open={ this.state.menuOpened } onClose={() => this.setState({menuOpened: false}) }>\r\n                        { this.renderDrawerContent() }\r\n                    </Drawer> :\r\n                    <Grid item xs={ 3 } className={ clsx(this.props.classes.columnContainer, this.props.classes.height) }>\r\n                        { this.renderDrawerContent() }\r\n                    </Grid>\r\n                }\r\n                { this.state.selectedSceneId && this.state.scenes[this.state.selectedSceneId] ?\r\n                    <Grid item xs={ showDrawer ? 12 : 9 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\r\n                        <Grid container spacing={ 1 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\r\n                            <Grid item xs={ this.props.width === 'xs' ? 12 : 5 } className={ this.props.classes.heightMinus2Toolbars }>\r\n                                { this.renderSceneTopToolbar(showDrawer) }\r\n                                <div className={this.props.classes.height}>\r\n                                    {this.state.selectedSceneId ? this.renderSceneSettings() : null}\r\n                                </div>\r\n                                { this.renderSceneBottomToolbar() }\r\n                            </Grid>\r\n                            <Grid item xs={ this.props.width === 'xs' ? 12 : 7 } className={ clsx(this.props.classes.height) }>\r\n                                <div className={ clsx(this.props.classes.heightMinusMargin) }>\r\n                                    { this.state.selectedSceneId ?\r\n                                        <div className={ clsx(this.props.classes.membersCell, this.props.classes.height) }>\r\n                                            { this.renderSceneMembers() }\r\n                                        </div>\r\n                                        : null}\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    : null\r\n                }\r\n            </Grid>\r\n        </Container>\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.ready) {\r\n            return <MuiThemeProvider theme={ this.state.theme }>\r\n                <Loader theme={ this.state.themeName }/>\r\n            </MuiThemeProvider>;\r\n        }\r\n\r\n        const oneColumn = this.props.width === 'xs';\r\n\r\n        return (\r\n            <MuiThemeProvider theme={ this.state.theme }>\r\n                <div className={ this.props.classes.root }>\r\n                    { oneColumn ?\r\n                        this.renderInOneColumn() :\r\n                        this.renderInMoreThanOneColumn()\r\n                    }\r\n\r\n                    { this.renderSceneChangeDialog() }\r\n                    { this.renderDeleteDialog() }\r\n                    { this.renderExportImportDialog() }\r\n                    { this.renderError() }\r\n                </div>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withWidth()(withStyles(styles)(withTheme(App)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Sentry from '@sentry/browser';\nimport * as SentryIntegrations from '@sentry/integrations';\nimport { MuiThemeProvider} from '@material-ui/core/styles';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\nimport { version } from '../package.json';\n\nimport theme from '@iobroker/adapter-react/Theme';\nimport Utils from '@iobroker/adapter-react/Components/Utils';\n\nwindow.adapterName = 'scenes';\n\nconsole.log('iobroker.' + window.adapterName + '@' + version);\nlet themeName = Utils.getThemeName();\n\nfunction build() {\n    return ReactDOM.render(<MuiThemeProvider theme={ theme(themeName) }>\n        <App onThemeChange={_theme => {\n            themeName = _theme;\n            build();\n        }}/>\n    </MuiThemeProvider>, document.getElementById('root'));\n}\n\n// if not local development\nif (window.location.host !== 'localhost:3000') {\n    Sentry.init({\n        dsn: 'https://89fc6260a1af4df68f9db767a603b7e5@sentry.iobroker.net/86',\n        release: 'iobroker.' + window.adapterName + '@' + version,\n        integrations: [\n            new SentryIntegrations.Dedupe()\n        ]\n    });\n}\n\nbuild();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n// Service worker works only with HTTPS and valid certificates, so do not enable it\nserviceWorker.unregister();\n\n"],"sourceRoot":""}