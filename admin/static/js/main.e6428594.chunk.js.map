{"version":3,"sources":["serviceWorker.js","components/SceneForm.js","components/SceneMembersForm.js","components/ExportImportDialog.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","SceneForm","props","setStateWithParent","newState","cb","setState","updateScene","common","native","sceneObj","scene","JSON","parse","stringify","members","showDialog","sceneId","_id","this","key","socket","dialogName","title","I18n","t","selected","onOk","onClose","name","on","className","classes","editItem","onTrue","onFalse","enabled","right","Switch","checked","trigger","id","onChange","e","target","condition","Grid","container","spacing","item","xs","TextField","fullWidth","InputLabelProps","shrink","label","value","onClick","FormControl","InputLabel","Select","MenuItem","cron","width","Box","clsx","columnContainer","oneColumn","height","scroll","desc","sm","width100","engine","instances","map","replace","min","burstInterval","helperText","type","parseInt","FormControlLabel","style","paddingTop","control","Checkbox","virtualGroup","renderOnTrueFalse","renderSelectIdDialog","React","Component","withStyles","theme","alignRight","textAlign","buttonsContainer","margin","display","flexDirection","float","overflowY","overflowX","paddingRight","marginBottom","color","palette","p","background","SceneMembersForm","memberStateChange","states","val","objectTypes","undefined","parseFloat","createSceneMembers","ids","filter","find","length","openedMembers","objectNames","Promise","all","getObject","obj","template","setIfTrue","setIfFalse","stopAllDelays","disabled","delay","Utils","getObjectNameFromObj","language","getLanguage","onFalseEnabled","push","forEach","subscribeState","showError","deleteSceneMember","index","splice","deleteDialog","unsubscribeState","renderMember","member","_valStr","toString","setIfTrueTolerance","Math","abs","memberTrueFalse","memberTrue","setIfFalseTolerance","memberFalse","memberUncertain","opened","includes","Paper","memberCard","memberToolbar","memberTitle","memberDesc","memberButtons","IconButton","pos","indexOf","sort","localStorage","setItem","size","marginLeft","aria-label","intervalBetweenCommands","formControl","setValue","doNotOverwrite","smallOnTrueFalse","stateValueTrue","stateValueFalse","getItemStyle","isDragging","draggableStyle","userSelect","getListStyle","isDraggingOver","render","sceneState","selectedSceneChanged","engineId","Toolbar","gutters","guttersZero","Typography","variant","sceneTitle","instanceNotActive","sceneSubTitle","sceneTrue","sceneFalse","sceneUncertain","testButtons","width100WithButton","defaultValue","onKeyUp","keyCode","onWriteScene","writeSceneState","sceneEnabled","Button","btnTestTrue","btnTestFalse","onDragEnd","droppableId","provided","snapshot","droppableProps","ref","innerRef","i","draggableId","draggableProps","dragHandleProps","placeholder","renderDeleteDialog","getItem","bind","readObjects","result","destination","source","removed","results","resolve","that","updateSceneMembers","multiSelect","Dialog","open","DialogTitle","changed","borderRadius","padding","fontSize","fontWeight","whiteSpace","maxWidth","overflow","textOverflow","backgroundColor","flexGrow","marginRight","position","content","top","fontStyle","minHeight","minWidth","opacity","ExportImportDialog","text","toast","Snackbar","autoHideDuration","Alert","severity","aria-labelledby","fullScreen","aria-describedby","isImport","DialogContent","divWithoutTitle","autoFocus","mode","onLoad","editor","codeEditor","focus","themeType","newValue","readOnly","editorProps","$blockScrolling","DialogActions","copy","setTimeout","renderToast","border","getFolderPrefix","split","shift","pop","join","FORBIDDEN_CHARS","App","sceneSwitch","event","scenes","selectedSceneId","selectedSceneData","setObject","refreshData","addSceneToFolderPrefix","folderPrefix","noRefresh","oldId","delObject","changeSelectedScene","renderTreeScene","level","search","ListItem","paddingLeft","button","ListItemIcon","root","itemIconRoot","itemIcon","ListItemText","primary","listItemTitle","secondary","listItemSubTitle","ListItemSecondaryAction","changingScene","CircularProgress","deleteScene","Object","keys","nextId","translations","require","setTranslations","setLanguage","userLanguage","substring","toLowerCase","query","parts","decodeURIComponent","getUrlQuery","port","host","iobForceHost","lang","systemLang","ready","folders","addFolderDialog","addFolderDialogTitle","editFolderDialog","editFolderDialogTitle","showSearch","moveDialog","newFolder","exportDialog","importDialog","menuOpened","getSystemConfig","systemConfig","getAdapterInstances","adapterName","values","subFolders","prefix","currentFolder","parent","folder","findFolder","getObjectView","_scenes","buildTree","getData","burstIntervall","from","user","ts","acl","parentFolder","_parentFolder","newName","newSelectedId","promises","newId","isIdUnique","getFolderList","subFolder","concat","confirmCb","sceneChangeDialog","noGutters","folderItem","toggleFolder","itemIconFolder","createScene","getNewSceneId","editFolderDialogTitleOrigin","a","b","renderTree","List","list","leftMenuItem","parentId","role","read","write","def","astro","matches","ignoreUnsaved","buttonIcon","addFolder","isUnique","renameFolder","writeScene","importedScene","mainToolbar","textInput","showDrawer","cloneScene","toolbarButtons","renderListToolbar","heightMinusToolbar","Drawer","anchor","paper","drawer","renderDrawerContent","renderSceneTopToolbar","heightMinus2Toolbars","renderSceneSettings","renderSceneMembers","renderSceneBottomToolbar","Container","fullWidthContainer","settingsBackground","heightMinusMargin","membersCell","themeName","renderInOneColumn","renderInMoreThanOneColumn","renderSceneChangeDialog","renderEditFolderDialog","renderMoveDialog","renderAddFolderDialog","renderExportImportDialog","renderError","GenericApp","withWidth","main","tabContent","cursor","paddingBottom","buttonsContainer1","marginTop","noHeight","withTheme","version","getThemeName","Sentry","dsn","release","integrations","SentryIntegrations","build","ReactDOM","onThemeChange","_theme","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e6428594.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nconst styles = theme => ({\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    width100: {\r\n        width: '100%'\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    editItem: {\r\n        display: 'block',\r\n        marginBottom: theme.spacing(2),\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    onTrue: {\r\n        background: 'lightgreen',\r\n    },\r\n    onFalse: {\r\n        background: '#ff9999',\r\n    },\r\n});\r\n\r\nclass SceneForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        this.state = {\r\n            common: sceneObj.common,\r\n            native: sceneObj.native,\r\n            showDialog: null,\r\n            sceneId: props.scene._id,\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        if (JSON.stringify(sceneObj.common) !== JSON.stringify(state.common) || JSON.stringify(sceneObj.native) !== JSON.stringify(state.native)) {\r\n            return {\r\n                common: sceneObj.common,\r\n                native: sceneObj.native,\r\n            }\r\n        }\r\n    }\r\n\r\n    setStateWithParent = (newState, cb) => {\r\n        this.setState(newState, () =>\r\n            this.props.updateScene(newState.common, newState.native, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n                key=\"selectDialog\"\r\n                socket={ this.props.socket }\r\n                dialogName=\"memberEdit\"\r\n                title={ I18n.t('Select for ') }\r\n                selected={ null }\r\n                onOk={ this.state.showDialog }\r\n                onClose={ () => this.setState({showDialog: false}) }\r\n            /> : null;\r\n    };\r\n\r\n    renderOnTrueFalse(name) {\r\n        const on = this.state.native[name];\r\n\r\n        return [\r\n            <div key=\"switch\" className={ this.props.classes.editItem }>\r\n                <h4>{ on === this.state.native.onTrue ? (this.state.native.onFalse.enabled ? I18n.t('Trigger for TRUE') : I18n.t('Trigger')) : I18n.t('Trigger for FALSE') }\r\n                    <span className={ this.props.classes.right }>\r\n                        <Switch checked={ !!on.trigger.id }\r\n                                onChange={ e => {\r\n                                    if (e.target.checked) {\r\n                                        this.setState({\r\n                                            showDialog: id => {\r\n                                                const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                native[name].trigger.id = id;\r\n                                                native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                                this.setStateWithParent({native});\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                        native[name].trigger.id = '';\r\n                                        this.setStateWithParent({native});\r\n                                    }\r\n                                } }\r\n                        />\r\n                    </span>\r\n                </h4>\r\n            </div>,\r\n            <div key=\"id\" className={ this.props.classes.editItem }>\r\n                {on.trigger.id ?\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={8}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Trigger ID') }\r\n                                value={ on.trigger.id }\r\n                                onClick={ () => {\r\n                                    this.setState({\r\n                                        showDialog: id => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.id = id;\r\n                                            native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                            this.setStateWithParent({native});\r\n                                        }\r\n                                    });\r\n                                } }\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2}>\r\n                            <FormControl>\r\n                                <InputLabel shrink={ true }>{ I18n.t('Condition') }</InputLabel>\r\n                                <Select value={ on.trigger.condition || '==' }\r\n                                        onChange={ e => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.condition = e.target.value;\r\n                                            this.setStateWithParent({native});\r\n                                        } }\r\n                                >\r\n                                    <MenuItem value=\"==\">==</MenuItem>\r\n                                    <MenuItem value=\"!=\">!=</MenuItem>\r\n                                    <MenuItem value=\">\">&gt;</MenuItem>\r\n                                    <MenuItem value=\"<\">&lt;</MenuItem>\r\n                                    <MenuItem value=\">=\">&gt;=</MenuItem>\r\n                                    <MenuItem value=\"<=\">&lt;=</MenuItem>\r\n                                    <MenuItem value=\"update\">{ I18n.t('on update') }</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps= {{shrink: true} } label={ I18n.t('Value') }\r\n                                value={ on.trigger.value || '' }\r\n                                onChange={ e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native[name].trigger.value = e.target.value;\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    : null}\r\n            </div>,\r\n            <div key=\"cron\" className={ this.props.classes.editItem }>\r\n                <TextField\r\n                    fullWidth\r\n                    InputLabelProps={{shrink: true}}\r\n                    label={ name === 'onTrue' ? I18n.t('On time (CRON expression)') : I18n.t('Off time (CRON expression)')}\r\n                    value={ on.cron || '' }\r\n                    onChange={e => {\r\n                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                        native[name].cron = e.target.value;\r\n                        this.setStateWithParent({native});\r\n                    }}\r\n                />\r\n            </div>\r\n        ];\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.width);\r\n        let result = <Box key=\"sceneForm\" className={ clsx(this.props.classes.columnContainer, !this.props.oneColumn && this.props.classes.height) }>\r\n            <Box className={ this.props.classes.scroll }>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene name') }\r\n                        value={ this.state.common.name }\r\n                        onChange={ e => {\r\n                           const common = JSON.parse(JSON.stringify(this.state.common));\r\n                           common.name = e.target.value;\r\n                           this.setStateWithParent({common});\r\n                       } }/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene description') }\r\n                        value={ this.state.common.desc }\r\n                        onChange={ e => {\r\n                               const common = JSON.parse(JSON.stringify(this.state.common));\r\n                               common.desc = e.target.value;\r\n                               this.setStateWithParent({common});\r\n                           }\r\n                        }/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={ 1 }>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControl className={this.props.classes.width100}>\r\n                                <InputLabel shrink={true}>{ I18n.t('Instance') }</InputLabel>\r\n                                <Select\r\n                                    value={ this.state.common.engine }\r\n                                    onChange={e => {\r\n                                        const common = JSON.parse(JSON.stringify(this.state.common));\r\n                                        common.engine = e.target.value;\r\n                                        this.setStateWithParent({common});\r\n                                    }}\r\n                                >\r\n                                    { this.props.instances.map(id => <MenuItem key={ id } value={ id }>{ id.replace('system.adapter.', '') }</MenuItem>) }\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Interval between commands') }\r\n                                min={ 0 }\r\n                                value={ this.state.native.burstInterval || 0 }\r\n                                helperText=\"ms\"\r\n                                type=\"number\"\r\n                                onChange={e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native.burstInterval = parseInt(e.target.value, 10);\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControlLabel\r\n                                style={{paddingTop: 10}}\r\n                                title={ I18n.t('virtual_group_tooltip') }\r\n                                label={ I18n.t('Virtual group') } control={\r\n                                <Checkbox checked={this.state.native.virtualGroup}\r\n                                          onChange={e => {\r\n                                              const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                              native.virtualGroup = e.target.checked;\r\n                                              this.setStateWithParent({native});\r\n                                          }}/>\r\n                            }/>\r\n                        </Grid>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            { !this.state.native.virtualGroup ?\r\n                                <FormControlLabel\r\n                                    style={{paddingTop: 10}}\r\n                                    label={I18n.t('Set value if false')}\r\n                                    control={\r\n                                          <Checkbox\r\n                                              checked={ this.state.native.onFalse.enabled }\r\n                                                    onChange={e => {\r\n                                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                        native.onFalse.enabled = e.target.checked;\r\n                                                        this.setStateWithParent({native});\r\n                                                    }}/>}\r\n                                />\r\n                                : null}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                { !this.state.native.virtualGroup ? this.renderOnTrueFalse('onTrue') : null }\r\n                { !this.state.native.virtualGroup && this.state.native.onFalse.enabled ? this.renderOnTrueFalse('onFalse') : null }\r\n            </Box>\r\n        </Box>;\r\n\r\n        return [\r\n            result,\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateScene: PropTypes.func.isRequired,\r\n    instances: PropTypes.array,\r\n    oneColumn: PropTypes.bool,\r\n    showError: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(SceneForm);","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n// own components\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\n// icons\r\nimport {AiOutlineClockCircle as IconClock} from 'react-icons/ai';\r\nimport {MdDelete as IconDelete} from 'react-icons/md';\r\nimport {MdModeEdit as IconEdit} from 'react-icons/md';\r\nimport {IoMdClose as IconClose} from 'react-icons/io';\r\nimport {MdAdd as IconAdd} from 'react-icons/md';\r\nimport {MdPlayArrow as IconPlay} from 'react-icons/md';\r\n\r\nconst TRUE_COLOR       = '#90ee90';\r\nconst FALSE_COLOR      = '#ff9999';\r\nconst TRUE_DARK_COLOR  = '#528952';\r\nconst FALSE_DARK_COLOR = '#774747';\r\nconst UNCERTAIN_COLOR  = '#bfb7be';\r\n\r\nconst styles = theme => ({\r\n    memberTrueFalse: {\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n        fontSize: 'initial',\r\n        fontWeight: 'initial',\r\n        margin: '0 ' + theme.spacing(1) + 'px',\r\n        textAlign: 'right',\r\n        whiteSpace: 'nowrap',\r\n        maxWidth: 300,\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    memberTrue: {\r\n        backgroundColor: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    memberFalse: {\r\n        backgroundColor: 'pink',\r\n    },\r\n    memberUncertain: {\r\n        color: '#FFF',\r\n        backgroundColor: '#808080',\r\n    },\r\n    memberCard: {\r\n        padding: 4,\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    guttersZero: {\r\n        padding: 0,\r\n    },\r\n    sceneTitle: {\r\n        flexGrow: 1,\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    sceneSubTitle: {\r\n        fontSize: 'small',\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n    },\r\n    sceneTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    sceneFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n    },\r\n    sceneUncertain: {\r\n        background: UNCERTAIN_COLOR,\r\n    },\r\n    btnTestTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n        marginRight: theme.spacing(1),\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    btnTestFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    smallOnTrueFalse: {\r\n        fontSize: 'small',\r\n        textAlign: 'right',\r\n        width: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    stateValueTrue: {\r\n        color: '#60a060',\r\n        fontWeight: 'bold',\r\n    },\r\n    stateValueFalse: {\r\n        color: '#c15454',\r\n        fontWeight: 'bold',\r\n    },\r\n    changed: {\r\n        position: 'relative',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            width: 6,\r\n            height: 6,\r\n            borderRadius: 6,\r\n            background: '#FF0000',\r\n            position: 'absolute',\r\n            top: 5,\r\n            right: 5,\r\n        },\r\n    },\r\n    memberDesc: {\r\n        display: 'inline-block',\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n    },\r\n    memberTitle: {\r\n        fontSize: 14,\r\n        fontWeight: 'bold',\r\n    },\r\n    memberToolbar: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        minHeight: 72,\r\n    },\r\n    memberButtons: {\r\n        textAlign: 'right',\r\n        position: 'absolute',\r\n        top: 2,\r\n        right: 2,\r\n    },\r\n    width100WithButton: {\r\n        width: 'calc(100% - 48px)',\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n    testButtons: {\r\n        minHeight: 48,\r\n    },\r\n    setValue: {\r\n        width: 'calc(50% - ' + theme.spacing(1) + 'px)',\r\n        minWidth: 100,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    disabled: {\r\n        opacity: 0.3\r\n    },\r\n    instanceNotActive: {\r\n        marginLeft: theme.spacing(1),\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n        color: '#FF0000',\r\n    }\r\n});\r\n\r\nclass SceneMembersForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let openedMembers = window.localStorage.getItem('Scenes.openedMembers') || '[]';\r\n        try {\r\n            openedMembers = JSON.parse(openedMembers);\r\n        } catch (e) {\r\n            openedMembers = [];\r\n        }\r\n\r\n        this.state = {\r\n            states: {},\r\n            openedMembers,\r\n            objectTypes: {},\r\n            objectNames: {},\r\n            members: JSON.parse(JSON.stringify(props.members)),\r\n            writeSceneState: '',\r\n            deleteDialog: null,\r\n            onFalseEnabled: props.onFalseEnabled,\r\n            virtualGroup: props.virtualGroup,\r\n            sceneEnabled: props.sceneEnabled,\r\n            selectedSceneChanged: props.selectedSceneChanged,\r\n            engineId: props.engineId,\r\n        };\r\n\r\n        this.engineId = this.state.engineId;\r\n\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.readObjects()\r\n            .then(newState =>\r\n                this.setState(newState, () => {\r\n                    // subscribe on scene state\r\n                    this.props.socket.subscribeState(this.props.sceneId, this.memberStateChange);\r\n                    this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n                    // subscribe on all states\r\n                    this.state.members.forEach(member =>\r\n                        member.id && this.props.socket.subscribeState(member.id, this.memberStateChange))\r\n                }));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.unsubscribeState(this.props.sceneId, this.memberStateChange);\r\n        this.state.engineId && this.props.socket.unsubscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n        this.state.members.forEach(member =>\r\n            this.props.socket.unsubscribeState(member.id, this.memberStateChange));\r\n    }\r\n    \r\n    static getDerivedStateFromProps(props, state) {\r\n        const newState = {};\r\n        let changed = false;\r\n\r\n        if (props.onFalseEnabled !== state.onFalseEnabled) {\r\n            newState.onFalseEnabled = props.onFalseEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.virtualGroup !== state.virtualGroup) {\r\n            newState.virtualGroup = props.virtualGroup;\r\n            changed = true;\r\n        }\r\n        if (props.selectedSceneChanged !== state.selectedSceneChanged) {\r\n            newState.selectedSceneChanged = props.selectedSceneChanged;\r\n            changed = true;\r\n        }\r\n        if (props.sceneEnabled !== state.sceneEnabled) {\r\n            newState.sceneEnabled = props.sceneEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.engineId !== state.engineId) {\r\n            newState.engineId = props.engineId;\r\n            changed = true;\r\n        }\r\n\r\n        return changed ? newState : null;\r\n    }\r\n\r\n    onDragEnd(result) {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n        const members = JSON.parse(JSON.stringify(this.state.members));\r\n        const [removed] = members.splice(result.source.index, 1);\r\n        members.splice(result.destination.index, 0, removed);\r\n\r\n        this.setStateWithParent({members});\r\n    }\r\n\r\n    readObjects() {\r\n        if (this.state.members) {\r\n            return Promise.all(\r\n                this.state.members.map(member =>\r\n                    this.props.socket.getObject(member.id)))\r\n                .then(results => {\r\n                    const objectTypes = {};\r\n                    const objectNames = {};\r\n                    results.forEach(obj => {\r\n                        if (obj && obj.common && obj.common.type) {\r\n                            objectTypes[obj._id] = obj.common.type;\r\n                            objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, false);\r\n                        }\r\n                    });\r\n\r\n                    return {objectTypes, objectNames};\r\n                })\r\n                .catch(e => this.props.showError(e));\r\n        } else {\r\n            return Promise.resolve({});\r\n        }\r\n    }\r\n\r\n    memberStateChange = (id, state) => {\r\n        const states = JSON.parse(JSON.stringify(this.state.states));\r\n        states[id] = state ? state.val : null;\r\n        const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n\r\n        if (!objectTypes[id] && states[id] !== null && states[id] !== undefined) {\r\n            objectTypes[id] = typeof states[id];\r\n        }\r\n\r\n        if (objectTypes[id] === 'boolean') {\r\n            if (states[id] === 'true') {\r\n                states[id] = true;\r\n            }\r\n            if (states[id] === 'false') {\r\n                states[id] = false;\r\n            }\r\n        } else if (objectTypes[id] === 'number') {\r\n            states[id] = parseFloat(states[id]);\r\n        }\r\n\r\n        this.setState({states, objectTypes});\r\n    };\r\n    \r\n    createSceneMembers = ids => {\r\n        this.setState({showDialog: false}, () => {\r\n            // filter out yet existing IDs\r\n            ids = ids.filter(id => !this.state.members.find(item => item.id === id));\r\n            if (ids.length) {\r\n                const openedMembers = [...this.state.openedMembers];\r\n                const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n                const objectNames = JSON.parse(JSON.stringify(this.state.objectNames));\r\n                const members     = JSON.parse(JSON.stringify(this.state.members));\r\n\r\n                Promise.all(ids.map(id =>\r\n                    // Read type of state\r\n                    this.props.socket.getObject(id)\r\n                        .then(obj => {\r\n                            const template = {\r\n                                id,\r\n                                setIfTrue: null,\r\n                                setIfFalse: null,\r\n                                stopAllDelays: true,\r\n                                desc: null,\r\n                                disabled: false,\r\n                                delay: 0\r\n                            };\r\n\r\n                            objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, true);\r\n\r\n                            if (obj && obj.common && obj.common.type) {\r\n                                objectTypes[id] = obj.common.type;\r\n\r\n                                if (objectTypes[id] === 'boolean') {\r\n                                    template.setIfTrue = true;\r\n                                    if (this.state.onFalseEnabled) {\r\n                                        template.setIfFalse = false;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            members.push(template);\r\n\r\n                            // open added state\r\n                            openedMembers.push(id);\r\n                        })\r\n                        .then(() => this.setStateWithParent({objectTypes, objectNames, members, openedMembers}, () =>\r\n                            // Subscribe on all new members\r\n                            ids.forEach(id => this.props.socket.subscribeState(id, this.memberStateChange)))\r\n                        )\r\n                    )\r\n                )\r\n                    .catch(e => this.props.showError(e));\r\n            } else {\r\n                // Show alert\r\n                this.props.showError(I18n.t('Unknown error!'));\r\n            }\r\n        });\r\n    };\r\n\r\n    deleteSceneMember = index => {\r\n        let members = JSON.parse(JSON.stringify(this.state.members));\r\n        const id = members[index].id;\r\n        members.splice(index, 1);\r\n        \r\n        this.setStateWithParent({members, deleteDialog: null}, () =>\r\n            this.props.socket.unsubscribeState(id, this.memberStateChange));\r\n    };\r\n\r\n    setStateWithParent(newState, cb) {\r\n        const that = this;\r\n        this.setState(newState, () =>\r\n            this.props.updateSceneMembers(that.state.members, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n            key=\"selectDialogMembers\"\r\n            socket={ this.props.socket }\r\n            dialogName=\"memberEdit\"\r\n            multiSelect={ true }\r\n            title={ I18n.t('Select for ') }\r\n            selected={ null }\r\n            onOk={ id => this.createSceneMembers(id) }\r\n            onClose={ () => this.setState({showDialog: false}) }\r\n        /> : null;\r\n    }\r\n    \r\n    renderDeleteDialog() {\r\n        if (this.state.deleteDialog === null) {\r\n            return;\r\n        }\r\n\r\n        return <Dialog\r\n            open={ true }\r\n            key=\"deleteDialog\"\r\n            onClose={ () =>\r\n                this.setState({deleteDialog: null}) }\r\n            >\r\n                <DialogTitle>{ I18n.t('Are you sure for delete this state?') }</DialogTitle>\r\n                <div className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                    <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: null}) }>\r\n                        {I18n.t('Cancel')}\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={ e => this.deleteSceneMember(this.state.deleteDialog) }>\r\n                        { I18n.t('Delete') }\r\n                    </Button>\r\n                </div>\r\n            </Dialog>;\r\n    };\r\n\r\n    renderMember = (member, index) => {\r\n        let value = null;\r\n        const classes = this.props.classes;\r\n        if (this.state.states[member.id] !== undefined && this.state.states[member.id] !== null) {\r\n            let _valStr = this.state.states[member.id].toString();\r\n\r\n            if (_valStr === 'true') {\r\n                _valStr = 'TRUE';\r\n            } else if (_valStr === 'false') {\r\n                _valStr = 'FALSE';\r\n            }\r\n\r\n            if (member.setIfTrueTolerance && Math.abs(this.state.states[member.id] - member.setIfTrue) <= member.setIfTrueTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (this.state.states[member.id] === member.setIfTrue) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && member.setIfFalseTolerance && Math.abs(this.state.states[member.id] - member.setIfFalse) <= member.setIfFalseTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && this.state.states[member.id] === member.setIfFalse) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberUncertain) }>{ _valStr }</div>;\r\n            }\r\n        }\r\n\r\n        let setIfTrue = member.setIfTrue;\r\n        if (setIfTrue === undefined || setIfTrue === null) {\r\n            setIfTrue = '';\r\n        } else {\r\n            if (setIfTrue === true) {\r\n                setIfTrue = 'TRUE';\r\n            } else if (setIfTrue === false) {\r\n                setIfTrue = 'FALSE';\r\n            } else {\r\n                if (member.setIfTrueTolerance) {\r\n                    setIfTrue = setIfTrue + '±' + member.setIfTrueTolerance;\r\n                } else {\r\n                    setIfTrue = setIfTrue.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        let setIfFalse = member.setIfFalse;\r\n        if (setIfFalse === undefined || setIfFalse === null) {\r\n            setIfFalse = '';\r\n        } else {\r\n            if (setIfFalse === true) {\r\n                setIfFalse = 'TRUE';\r\n            } else if (setIfFalse === false) {\r\n                setIfFalse = 'FALSE';\r\n            } else {\r\n                if (member.setIfFalseTolerance) {\r\n                    setIfFalse = setIfFalse + '±' + member.setIfFalseTolerance;\r\n                } else {\r\n                    setIfFalse = setIfFalse.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        const opened = this.state.openedMembers.includes(member.id);\r\n        const onFalseEnabled = !this.state.virtualGroup && this.state.onFalseEnabled;\r\n\r\n        return <Paper key={ member.id } className={ clsx(classes.memberCard, member.disabled && classes.disabled) }>\r\n            <div className={ classes.memberToolbar }>\r\n                <div className={ classes.memberTitle }>{ member.id }</div>\r\n                <div className={ classes.memberDesc }>{ member.desc || this.state.objectNames[member.id] || '' }</div>\r\n                <div className={ classes.memberButtons }>\r\n                    <IconButton title={ I18n.t('Edit') } onClick={ () => {\r\n                        const openedMembers = [...this.state.openedMembers];\r\n                        const pos = openedMembers.indexOf(member.id);\r\n                        if (pos !== -1) {\r\n                            openedMembers.splice(pos, 1);\r\n                        } else {\r\n                            openedMembers.push(member.id);\r\n                            openedMembers.sort();\r\n                        }\r\n                        window.localStorage.setItem('Scenes.openedMembers', JSON.stringify(openedMembers));\r\n                        this.setState({openedMembers});\r\n                    }}>\r\n                        { opened ? <IconClose/> : <IconEdit/> }\r\n                    </IconButton>\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 5 }} aria-label=\"Delete\" title={I18n.t('Delete')}\r\n                        onClick={ () => this.setState({deleteDialog: index}) }>\r\n                        <IconDelete/>\r\n                    </IconButton>\r\n                    <Switch\r\n                        checked={ !member.disabled }\r\n                        onChange={ e => {\r\n                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                            members[index].disabled = !e.target.checked;\r\n                            this.setStateWithParent({members});\r\n                        }}\r\n                        name={ member.id }\r\n                    />\r\n                    { value }\r\n                </div>\r\n            </div>\r\n            <div>{ member.desc } { !opened && (this.props.intervalBetweenCommands || member.delay) ?\r\n                <span> <IconClock/> { this.props.intervalBetweenCommands * index + (member.delay || 0) + I18n.t('ms') + ' ' + I18n.t('from scene start')}</span> : null }</div>\r\n            {\r\n                opened ?\r\n                    <div>\r\n                        {/*<Box className={classes.p}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}} label={I18n.t('Description')}\r\n                                value={member.desc || ''}\r\n                                onChange={e => {\r\n                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                    members[index].desc = e.target.value;\r\n                                    this.setStateWithParent({members});\r\n                                }}\r\n                            />\r\n                        </Box>*/ }\r\n                        { !this.state.virtualGroup ? <Box className={ classes.p }>\r\n                            { this.state.objectTypes[member.id] === 'boolean' ?\r\n                                <FormControl className={classes.formControl}>\r\n                                    <InputLabel>{ onFalseEnabled ? I18n.t('Setpoint by TRUE') : I18n.t('Setpoint') }</InputLabel>\r\n                                    <Select\r\n                                        value={ member.setIfTrue === true || member.setIfTrue === 'true' ? 'true' : 'false'}\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].setIfTrue = e.target.value === 'true';\r\n                                            this.setStateWithParent({members});\r\n                                        } }\r\n                                    >\r\n                                        <MenuItem value=\"false\">false</MenuItem>\r\n                                        <MenuItem value=\"true\">true</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                                :\r\n                                <Box className={ classes.p }>\r\n                                    <TextField\r\n                                        InputLabelProps={ {shrink: true} }\r\n                                        label={ onFalseEnabled ? I18n.t('Setpoint by TRUE') : I18n.t('Setpoint') }\r\n                                        value={ member.setIfTrue === undefined || member.setIfTrue === null ? '' : member.setIfTrue }\r\n                                        className={ classes.setValue }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            if (this.state.objectTypes[member.id] === 'number') {\r\n                                                members[index].setIfTrue = parseFloat(e.target.value.replace(',', '.'));\r\n                                            } else {\r\n                                                members[index].setIfTrue = e.target.value;\r\n                                            }\r\n\r\n                                            this.setStateWithParent({members});\r\n                                         } }/>\r\n                                    <TextField\r\n                                        InputLabelProps={ {shrink: true} }\r\n                                        label={ '± ' + (onFalseEnabled ? I18n.t('Tolerance by TRUE') : I18n.t('Tolerance')) }\r\n                                        value={ member.setIfTrueTolerance === undefined || member.setIfTrueTolerance === null ? '' : member.setIfTrueTolerance }\r\n                                        title={ I18n.t('Absolute value, not percent') }\r\n                                        className={ classes.setValue }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].setIfTrueTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                                            this.setStateWithParent({members});\r\n                                        } }/>\r\n                                </Box>\r\n                            }\r\n                        </Box> : null }\r\n                        { !this.state.virtualGroup && this.state.onFalseEnabled ?\r\n                            <Box className={ classes.p }>\r\n                                {\r\n                                    this.state.objectTypes[member.id] === 'boolean' ?\r\n                                        <FormControl className={classes.formControl}>\r\n                                            <InputLabel>{ I18n.t('Setpoint by FALSE') }</InputLabel>\r\n                                            <Select\r\n                                                value={ member.setIfFalse === true || member.setIfFalse === 'true' ? 'true' : 'false'}\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].setIfFalse = e.target.value === 'true';\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            >\r\n                                                <MenuItem value=\"false\">false</MenuItem>\r\n                                                <MenuItem value=\"true\">true</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        <Box className={ classes.p }>\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                InputLabelProps={ {shrink: true} }\r\n                                                label={ I18n.t('Setpoint by FALSE') }\r\n                                                value={ member.setIfFalse === undefined || member.setIfFalse === null ? '' : member.setIfFalse }\r\n                                                className={ classes.setValue }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    if (this.state.objectTypes[member.id] === 'number') {\r\n                                                        members[index].setIfFalse = parseFloat(e.target.value.replace(',', '.'));\r\n                                                    } else {\r\n                                                        members[index].setIfFalse = e.target.value;\r\n                                                    }\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                            <TextField\r\n                                                InputLabelProps={ {shrink: true} }\r\n                                                label={ '± ' + I18n.t('Tolerance by FALSE') }\r\n                                                title={ I18n.t('Absolute value, not percent') }\r\n                                                value={ member.setIfFalseTolerance === undefined || member.setIfFalseTolerance === null ? '' : member.setIfFalseTolerance }\r\n                                                className={ classes.setValue }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].setIfFalseTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                        </Box>\r\n                                }\r\n                            </Box>\r\n                            : null}\r\n                        <Box className={ classes.p }>\r\n                            <Grid container spacing={ 4 }>\r\n                                <Grid item xs={ 12 } sm={ 6 }>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        InputLabelProps={{shrink: true}}\r\n                                        label={ I18n.t('Delay from start of scene (ms)')}\r\n                                        title={ I18n.t(\r\n                                            'Additionally to the interval between commands. E.g. if the interval %s, this state will be set after %s ms from scene start',\r\n                                            this.props.intervalBetweenCommands,\r\n                                            this.props.intervalBetweenCommands * index + (member.delay || 0)\r\n                                        )}\r\n                                        value={ member.delay || 0}\r\n                                        min={ 0 }\r\n                                        type=\"number\"\r\n                                        onChange={e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].delay = parseInt(e.target.value, 10);\r\n                                            this.setStateWithParent({members});\r\n                                        }}/>\r\n                                </Grid>\r\n                                <Grid item xs={ 12 } sm={ 6 }>\r\n                                    <FormControlLabel\r\n                                        label={ I18n.t('Stop already started commands') }\r\n                                        control={\r\n                                            <Checkbox\r\n                                                checked={ member.stopAllDelays }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].stopAllDelays = e.target.checked;\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                    }/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                        <Box className={ classes.p }>\r\n                            <FormControlLabel\r\n                                label={ I18n.t('Do not overwrite state if it has the required value') }\r\n                                title={\r\n                                    I18n.t('For example, if the value is already at \"%s\" and \"%s\" is the setpoint, then write the value anyway if this checkbox is activated.',\r\n                                        member.setIfTrue === undefined || member.setIfTrue === null ? 'null' : member.setIfTrue.toString(),\r\n                                        member.setIfTrue === undefined || member.setIfTrue === null ? 'null' : member.setIfTrue.toString())\r\n                                }\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={ !!member.doNotOverwrite }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].doNotOverwrite = e.target.checked;\r\n                                            this.setStateWithParent({members});\r\n                                        } }\r\n                                    />\r\n                            }/>\r\n                        </Box>\r\n                    </div> :\r\n                    (!this.state.virtualGroup ? <div className={ classes.smallOnTrueFalse }>\r\n                        { I18n.t('Set if TRUE') + ': ' } <span className={ classes.stateValueTrue }>{ setIfTrue }</span>\r\n                        { this.state.onFalseEnabled ? ' / ' + I18n.t('Set if FALSE') + ': ' : null}\r\n                        { this.state.onFalseEnabled ? <span className={ classes.stateValueFalse }>{ setIfFalse }</span> : null}\r\n                    </div> : <div style={ {height: 8} }/>)\r\n            }\r\n        </Paper>\r\n    };\r\n\r\n    onWriteScene(val) {\r\n        if (val === 'true') {\r\n            val = true;\r\n        } else if (val === 'false') {\r\n            val = false;\r\n        } else if (typeof val === 'string' && parseFloat(val.replace(',', '.')).toString() === val) {\r\n            val = parseFloat(val.replace(',', '.'));\r\n        }\r\n\r\n        this.props.socket.setState(this.props.sceneId, val)\r\n            .catch(e => this.props.showError(e));\r\n    }\r\n\r\n    getItemStyle = (isDragging, draggableStyle) => ({\r\n        // some basic styles to make the items look a bit nicer\r\n        userSelect: 'none',\r\n        background: isDragging ? 'lightgreen' : 'inherit',\r\n\r\n        // styles we need to apply on draggables\r\n        ...draggableStyle\r\n    });\r\n\r\n    getListStyle = isDraggingOver => ({\r\n        background: isDraggingOver ? 'lightblue' : 'inherit',\r\n    });\r\n\r\n    render = () => {\r\n        let sceneState = this.state.states[this.props.sceneId];\r\n        if (this.state.selectedSceneChanged) {\r\n            sceneState = I18n.t('Save scene before test');\r\n        } else if (sceneState === undefined || sceneState === null) {\r\n            sceneState = '';\r\n        }\r\n\r\n        if (this.engineId !== this.state.engineId) {\r\n            this.engineId && this.props.socket.unsubscribeState(this.engineId + '.alive', this.memberStateChange);\r\n            this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n            this.engineId = this.state.engineId;\r\n        }\r\n\r\n        const onFalseEnabled =!this.state.virtualGroup && this.state.onFalseEnabled;\r\n\r\n        let result = <div key=\"SceneMembersForm\" className={ clsx(!this.props.oneColumn && this.props.classes.height, this.props.classes.columnContainer) }>\r\n            <Toolbar classes={{ gutters: this.props.classes.guttersZero }}>\r\n                <Typography variant=\"h6\" className={ clsx(this.props.classes.sceneTitle) } >\r\n                    { I18n.t('Scene states') }{ !this.state.states[this.state.engineId + '.alive'] ? <span className={ this.props.classes.instanceNotActive }>{ I18n.t('Instance not active') }</span> : ''}\r\n                    <br/>\r\n                    <span className={ clsx(\r\n                        this.props.classes.sceneSubTitle,\r\n                        !this.state.virtualGroup && sceneState === true && this.props.classes.sceneTrue,\r\n                        !this.state.virtualGroup && sceneState === false && this.props.classes.sceneFalse,\r\n                        !this.state.virtualGroup && sceneState === 'uncertain' && this.props.classes.sceneUncertain,\r\n                    ) }>{ I18n.t('Scene state:') } { sceneState.toString() }</span>\r\n                </Typography>\r\n                <IconButton title={I18n.t('Add new state')} onClick={() => this.setState({showDialog: true})}>\r\n                    <IconAdd/>\r\n                </IconButton>\r\n            </Toolbar>\r\n            <div className={ clsx(this.props.classes.testButtons, this.props.classes.width100) }>\r\n                {  !this.state.selectedSceneChanged && this.state.virtualGroup ? <TextField\r\n                    className={ this.props.classes.width100WithButton }\r\n                    label={ I18n.t('Write to virtual group') }\r\n                    defaultValue={ sceneState }\r\n                    onKeyUp={e => e.keyCode === 13 && this.onWriteScene(this.state.writeSceneState)}\r\n                    onChange={e => this.setState({writeSceneState: e.target.value}) }\r\n                /> : null}\r\n                { !this.state.selectedSceneChanged && this.state.virtualGroup ? <IconButton\r\n                    onClick={e => this.onWriteScene(this.state.writeSceneState) }\r\n                ><IconPlay/></IconButton> : null}\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && !this.state.virtualGroup ? <Button\r\n                    className={ this.props.classes.btnTestTrue }\r\n                    onClick={ () => this.onWriteScene(true) }\r\n                ><IconPlay/>{ !onFalseEnabled ? I18n.t('Test') : I18n.t('Test TRUE') }</Button> : null }\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && onFalseEnabled ? <Button\r\n                    className={ this.props.classes.btnTestFalse }\r\n                    onClick={ () => this.onWriteScene(false) }\r\n                ><IconPlay/>{ I18n.t('Test FALSE') }</Button> : null }\r\n            </div>\r\n            <DragDropContext onDragEnd={ this.onDragEnd }>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div className={ this.props.classes.scroll }\r\n                             {...provided.droppableProps}\r\n                             ref={ provided.innerRef }\r\n                             style={ this.getListStyle(snapshot.isDraggingOver) }\r\n                        >\r\n                            { this.state.members.map((member, i) =>\r\n                                <Draggable key={ member.id } draggableId={ member.id } index={ i }>\r\n                                    {(provided, snapshot) =>\r\n                                        <div\r\n                                            ref={ provided.innerRef }\r\n                                            {...provided.draggableProps }\r\n                                            {...provided.dragHandleProps }\r\n                                            style={ this.getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            ) }\r\n                                        >{ this.renderMember(member, i) }</div>}\r\n                                </Draggable>\r\n                            )}\r\n                            { provided.placeholder }\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>;\r\n\r\n        return [\r\n            result,\r\n            this.renderDeleteDialog(),\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneMembersForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateSceneMembers: PropTypes.func,\r\n    sceneId: PropTypes.string,\r\n    onFalseEnabled: PropTypes.bool,\r\n    virtualGroup: PropTypes.bool,\r\n    sceneEnabled: PropTypes.bool,\r\n    selectedSceneChanged: PropTypes.bool,\r\n    intervalBetweenCommands: PropTypes.number,\r\n    engineId: PropTypes.string,\r\n    oneColumn: PropTypes.bool,\r\n    showError: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(SceneMembersForm);","// Common\r\nimport React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from 'clsx';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nimport AceEditor from 'react-ace';\r\nimport 'ace-builds/src-noconflict/mode-json';\r\nimport 'ace-builds/src-noconflict/theme-clouds_midnight';\r\nimport 'ace-builds/src-noconflict/theme-chrome';\r\nimport 'ace-builds/src-noconflict/ext-language_tools'\r\n\r\n// Own\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport copy from '@iobroker/adapter-react/Components/copy-to-clipboard';\r\n\r\nconst styles = theme => ({\r\n    divWithoutTitle: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: '2px solid #00000000',\r\n    },\r\n    error: {\r\n        border: '2px solid #FF0000',\r\n    },\r\n});\r\n\r\nclass ExportImportDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            text: props.sceneObj ? JSON.stringify(props.sceneObj, null, 2) : '',\r\n            error: false,\r\n            toast: '',\r\n        };\r\n    }\r\n\r\n    onChange(value) {\r\n        const newState = {text: value};\r\n        try {\r\n            JSON.parse(value);\r\n            if (this.state.error) {\r\n                newState.error = false;\r\n            }\r\n\r\n            this.setState(newState);\r\n        } catch (e) {\r\n            newState.error = true;\r\n            this.setState(newState);\r\n        }\r\n    }\r\n\r\n    renderToast() {\r\n        return <Snackbar open={ !!this.state.toast } autoHideDuration={ 3000 } onClick={ () => this.setState({ toast: '' }) } onClose={ () => this.setState({ toast: '' }) }>\r\n            <Alert color=\"info\" severity=\"success\" >{ this.state.toast }</Alert>\r\n        </Snackbar>;\r\n    }\r\n\r\n    render() {\r\n        return <Dialog\r\n            open={ true }\r\n            onClose={ () => this.props.onClose() }\r\n            aria-labelledby=\"export-dialog-title\"\r\n            fullWidth\r\n            maxWidth=\"lg\"\r\n            fullScreen={ true }\r\n            aria-describedby=\"export-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"export-dialog-title\">{ this.props.isImport ? I18n.t('Import scene') : I18n.t('Export scene') }</DialogTitle>\r\n            <DialogContent>\r\n                <div className={ clsx(this.props.classes.divWithoutTitle, this.state.error && this.props.classes.error) }>\r\n                    <AceEditor\r\n                        autoFocus\r\n                        mode=\"json\"\r\n                        width=\"100%\"\r\n                        height=\"100%\"\r\n                        onLoad={editor => {\r\n                            this.codeEditor = editor;\r\n                            this.codeEditor.focus();\r\n                        }}\r\n                        theme={ this.props.themeType === 'dark' ? 'clouds_midnight' : 'chrome' }\r\n                        onChange={ newValue => this.onChange(newValue) }\r\n                        value={ this.state.text || '' }\r\n                        name=\"UNIQUE_ID_OF_DIV\"\r\n                        fontSize={ 14 }\r\n                        readOnly={ !this.props.isImport }\r\n                        editorProps={{ $blockScrolling: true }}\r\n                    />\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={ () => this.props.onClose() } autoFocus={ !this.props.isImport }>\r\n                    { I18n.t('Close') }\r\n                </Button>\r\n                { this.props.isImport ?\r\n                    <Button\r\n                        disabled={ !this.state.text || this.state.error }\r\n                        onClick={ () => this.props.onClose(JSON.parse(this.state.text)) }\r\n                        color=\"primary\"\r\n                    >\r\n                        { I18n.t('Import') }\r\n                    </Button>\r\n                    :\r\n                    <Button onClick={ () => {\r\n                        copy(this.state.text);\r\n                        this.setState({ toast: I18n.t('Copied') });\r\n                        setTimeout(() => this.props.onClose(), 500);\r\n                    } } color=\"primary\" autoFocus>\r\n                        { I18n.t('Copy to clipboard') }\r\n                    </Button>}\r\n                { this.renderToast() }\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n}\r\n\r\nExportImportDialog.propTypes = {\r\n    classes: PropTypes.object,\r\n    sceneObj: PropTypes.object,\r\n    themeType: PropTypes.string,\r\n    onClose: PropTypes.func,\r\n    isImport: PropTypes.bool,\r\n};\r\n\r\nexport default withStyles(styles)(ExportImportDialog);","// Common\r\nimport React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport { withTheme } from '@material-ui/core/styles';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport withWidth from \"@material-ui/core/withWidth\";\r\n\r\n// MaterialUi\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\n// Own\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Loader from '@iobroker/adapter-react/Components/Loader'\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport SceneForm from './components/SceneForm';\r\nimport SceneMembersForm from './components/SceneMembersForm';\r\nimport ExportImportDialog from './components/ExportImportDialog';\r\n\r\n// icons\r\nimport {MdExpandLess as IconCollapse} from 'react-icons/md';\r\nimport {MdExpandMore as IconExpand} from 'react-icons/md';\r\nimport {MdAdd as IconAdd} from 'react-icons/md';\r\nimport {MdModeEdit as IconEdit} from 'react-icons/md';\r\nimport {RiFolderAddLine as IconFolderAdd} from 'react-icons/ri';\r\nimport {MdClose as IconCancel} from 'react-icons/md';\r\nimport {MdCheck as IconCheck} from 'react-icons/md';\r\nimport {MdSave as IconSave} from 'react-icons/md';\r\nimport {MdDelete as IconDelete} from 'react-icons/md';\r\nimport {MdFileDownload as IconExport} from 'react-icons/md';\r\nimport {FaScroll as IconScript} from 'react-icons/all';\r\nimport {FaFolder as IconFolderClosed} from 'react-icons/all';\r\nimport {FaFolderOpen as IconFolderOpened} from 'react-icons/all';\r\n// import {MdFileUpload as IconImport} from 'react-icons/md';\r\nimport {FaClone as IconClone} from 'react-icons/fa';\r\nimport {FaBars as IconMenu} from 'react-icons/fa';\r\nimport {BsFolderSymlink as IconMoveToFolder} from 'react-icons/bs';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nconst LEVEL_PADDING = 16;\r\nconst MARGIN_MEMBERS = 20;\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        height: 'calc(100% + 4px)',\r\n        backgroundColor: theme.palette.type === 'dark' ? '#000': '#fff',\r\n        overflowX: 'hidden',\r\n    },\r\n    mainToolbar: {\r\n        background: theme.palette.primary.main,\r\n    },\r\n    tabContent: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px)',\r\n        overflow: 'auto'\r\n    },\r\n    textInput: {\r\n        display: 'block',\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n    noGutters: {\r\n        paddingLeft: 0,\r\n        paddingRight: 0,\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    heightMinusToolbar: {\r\n        height: 'calc(100% - 48px)',\r\n    },\r\n    heightMinus2Toolbars: {\r\n        height: 'calc(100% - 96px)',\r\n    },\r\n    heightMinusMargin: {\r\n        height: 'calc(100% - ' + MARGIN_MEMBERS + 'px)',\r\n    },\r\n    folderItem: {\r\n        fontWeight: 'bold',\r\n        cursor: 'pointer',\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    fullWidthContainer: {\r\n        maxWidth: 'inherit',\r\n        paddingTop: 2,\r\n        paddingBottom: 2,\r\n        paddingLeft: 2,\r\n        paddingRight: 2,\r\n        overflow: 'hidden'\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        width: '100%',\r\n    },\r\n    buttonsContainer1: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    list: {\r\n        width: '100%',\r\n        padding: 0,\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    membersCell: {\r\n        backgroundColor: theme.palette.type === 'dark' ? '#566770': '#ADD8E6',\r\n        marginTop: MARGIN_MEMBERS,\r\n        marginRight: theme.spacing(1),\r\n        marginBottom: theme.spacing(2),\r\n        paddingTop: 0,\r\n        paddingLeft: 10,\r\n        paddingRight: 10,\r\n        paddingBottom: 10,\r\n\r\n        borderRadius: 4,\r\n        height: 'calc(100% - ' + theme.spacing(1) + 'px)',\r\n    },\r\n    leftMenuItem: {\r\n        display: 'block',\r\n        borderRadius: 10,\r\n    },\r\n    p: {\r\n        margin: '1em 0',\r\n    },\r\n    changed: {\r\n        position: 'relative',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            width: 6,\r\n            height: 6,\r\n            borderRadius: 6,\r\n            background: '#FF0000',\r\n            position: 'absolute',\r\n            top: 5,\r\n            right: 5,\r\n        },\r\n    },\r\n    sceneTitle: {\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n        flexGrow: 1,\r\n        paddingLeft: theme.spacing(1),\r\n    },\r\n    sceneSubTitle: {\r\n        fontSize: 'small',\r\n        display: 'block'\r\n    },\r\n    toolbarButtons: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    settingsBackground: {\r\n        background: theme.palette.type === 'dark' ? '#3a3a3a': '#eeeeee',\r\n    },\r\n    listItemTitle: {\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    listItemSubTitle: {\r\n        color: theme.palette.type === 'dark' ? '#bababa': '#2a2a2a',\r\n    },\r\n    disabled: {\r\n        opacity: 0.3\r\n    },\r\n    itemIconRoot: {\r\n        minWidth: 24 + theme.spacing(1),\r\n    },\r\n    itemIcon: {\r\n        width: 24,\r\n        height: 24,\r\n    },\r\n    itemIconFolder: {\r\n        color: theme.palette.type === 'dark' ? '#ffca2c' : '#ffca2c'\r\n    },\r\n    noHeight: {\r\n        height: 'inherit',\r\n    },\r\n    drawer: {\r\n        overflow: 'hidden'\r\n    },\r\n});\r\n\r\nfunction getUrlQuery() {\r\n    const parts = (window.location.search || '').replace(/^\\?/, '').split('&');\r\n    const query = {};\r\n    parts.forEach(item => {\r\n        const [name, val] = item.split('=');\r\n        query[decodeURIComponent(name)] = val !== undefined ? decodeURIComponent(val) : true;\r\n    });\r\n    return query;\r\n}\r\n\r\nfunction getFolderPrefix(sceneId) {\r\n    let result = sceneId.split('.');\r\n    result.shift();\r\n    result.shift();\r\n    result.pop();\r\n    result = result.join('.');\r\n    return result;\r\n}\r\n\r\nfunction getFolderList(folder) {\r\n    let result = [];\r\n    result.push(folder);\r\n    Object.values(folder.subFolders).forEach(subFolder =>\r\n        result = result.concat(getFolderList(subFolder)));\r\n\r\n    return result;\r\n}\r\n\r\nconst FORBIDDEN_CHARS = /[.\\][*,;'\"`<>\\\\?]/g;\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        super(props);\r\n        this.translations = {\r\n            'en': require('./i18n/en'),\r\n            'de': require('./i18n/de'),\r\n            'ru': require('./i18n/ru'),\r\n            'pt': require('./i18n/pt'),\r\n            'nl': require('./i18n/nl'),\r\n            'fr': require('./i18n/fr'),\r\n            'it': require('./i18n/it'),\r\n            'es': require('./i18n/es'),\r\n            'pl': require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n\r\n        // init translations\r\n        I18n.setTranslations(this.translations);\r\n        I18n.setLanguage((navigator.language || navigator.userLanguage || 'en').substring(0, 2).toLowerCase());\r\n\r\n        const query = getUrlQuery();\r\n\r\n        this.port = query.port || (window.location.port === '3000' ? 8081 : window.location.port);\r\n        this.host = query.host || window.location.hostname;\r\n\r\n        window.iobForceHost = this.host;\r\n    }\r\n\r\n    onConnectionReady() {\r\n        let opened;\r\n        try {\r\n            opened = JSON.parse(window.localStorage.getItem('Scenes.opened')) || [];\r\n        } catch (e) {\r\n            opened = [];\r\n        }\r\n\r\n        const newState = {\r\n            lang: this.socket.systemLang,\r\n            ready: false,\r\n            selectedSceneId: window.localStorage.getItem('Scenes.selectedSceneId') || '',\r\n            opened,\r\n            scenes: {},\r\n            folders: null,\r\n            search: null,\r\n            addFolderDialog: null,\r\n            addFolderDialogTitle: null,\r\n            editFolderDialog: null,\r\n            editFolderDialogTitle: null,\r\n            changingScene: '',\r\n            showSearch: null,\r\n            instances: [],\r\n            selectedSceneChanged: false,\r\n            deleteDialog: null,\r\n            moveDialog: null,\r\n            newFolder: '',\r\n            selectedSceneData: null,\r\n            exportDialog: false,\r\n            importDialog: false,\r\n            menuOpened: false,\r\n        };\r\n\r\n        this.socket.getSystemConfig()\r\n            .then(systemConfig => {\r\n                newState.systemConfig = systemConfig;\r\n\r\n                return this.socket.getAdapterInstances(window.adapterName)\r\n                    .then(instances => {\r\n                        newState.instances = instances.map(item => item._id);\r\n                        this.setState(newState, () =>\r\n                            this.refreshData());\r\n                    });\r\n            })\r\n            .catch(e => this.showError(e));\r\n    }\r\n\r\n    sceneSwitch = event => {\r\n        const id = event.target.name;\r\n        let scenes = JSON.parse(JSON.stringify(this.state.scenes));\r\n\r\n        if (id === this.state.selectedSceneId) {\r\n            scenes[id] = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n            scenes[id].common.enabled = event.target.checked;\r\n        }\r\n\r\n        scenes[id].common.enabled = event.target.checked;\r\n\r\n        this.socket.setObject(id, scenes[id])\r\n            .then(() => this.refreshData(id))\r\n            .catch(e => this.showError(e));\r\n    };\r\n\r\n    buildTree(scenes) {\r\n        scenes = Object.values(scenes);\r\n\r\n        let folders = {subFolders: {}, scenes: {}, id: '', prefix: ''};\r\n\r\n        // create missing folders\r\n        scenes.forEach((scene) => {\r\n            let id = scene._id;\r\n            const parts = id.split('.');\r\n            parts.shift();\r\n            parts.shift();\r\n            let currentFolder = folders;\r\n            let prefix = '';\r\n            for (let i = 0; i < parts.length - 1; i++) {\r\n                if (prefix) {\r\n                    prefix = prefix + '.';\r\n                }\r\n                prefix = prefix + parts[i];\r\n                if (!currentFolder.subFolders[parts[i]]) {\r\n                    currentFolder.subFolders[parts[i]] = {\r\n                        subFolders: {}, \r\n                        scenes: {}, \r\n                        id: parts[i], \r\n                        prefix,\r\n                    }\r\n                }\r\n                currentFolder = currentFolder.subFolders[parts[i]];\r\n            }\r\n            currentFolder.scenes[id] = scene;\r\n        });\r\n\r\n        return folders;\r\n    }\r\n\r\n    findFolder(parent, folder) {\r\n        if (parent.prefix === folder.prefix) {\r\n            return parent;\r\n        }\r\n        for (let index in parent.subFolders) {\r\n            let result = this.findFolder(parent.subFolders[index], folder);\r\n            if (result) {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    getData() {\r\n        let scenes;\r\n        return this.socket.getObjectView('scene.0.', 'scene.\\u9999', 'state')\r\n            .then(_scenes => {\r\n                scenes = _scenes;\r\n                return {scenes, folders: this.buildTree(scenes)};\r\n            })\r\n            .catch(e => this.showError(e));\r\n    }\r\n\r\n    refreshData(changingScene) {\r\n        const that = this;\r\n        return new Promise(resolve => {\r\n            if (changingScene) {\r\n                this.setState({changingScene}, () => resolve());\r\n            } else {\r\n                this.setState({ready: false}, () => resolve());\r\n            }\r\n        })\r\n            .then(() => this.getData())\r\n            .then(newState => {\r\n                newState.ready = true;\r\n                newState.changingScene = '';\r\n                newState.selectedSceneChanged = false;\r\n\r\n                // Fill missing data\r\n                Object.keys(newState.scenes).forEach(id => {\r\n                    const sceneObj = newState.scenes[id];\r\n                    sceneObj.common = sceneObj.common || {};\r\n                    sceneObj.native = sceneObj.native || {};\r\n\r\n                    // rename attribute\r\n                    if (sceneObj.native.burstIntervall !== undefined) {\r\n                        sceneObj.native.burstInterval = sceneObj.native.burstIntervall;\r\n                        delete sceneObj.native.burstIntervall;\r\n                    }\r\n\r\n                    sceneObj.native.burstInterval = parseInt(sceneObj.native.burstInterval || 0, 10);\r\n                    sceneObj.native.onFalse = sceneObj.native.onFalse || {};\r\n                    sceneObj.native.onTrue  = sceneObj.native.onTrue  || {};\r\n                    sceneObj.native.onFalse.trigger = sceneObj.native.onFalse.trigger || {condition: '=='};\r\n                    sceneObj.native.onTrue.trigger  = sceneObj.native.onTrue.trigger  || {condition: '=='};\r\n                    sceneObj.native.members = sceneObj.native.members || [];\r\n                    const members = sceneObj.native.members;\r\n                    delete sceneObj.native.members;\r\n                    sceneObj.native.members = members; // place it on the last place\r\n\r\n                    delete sceneObj.from;\r\n                    delete sceneObj.user;\r\n                    delete sceneObj.ts;\r\n                    delete sceneObj.acl;\r\n                });\r\n\r\n                if (!newState.scenes[this.state.selectedSceneId]) {\r\n                    newState.selectedSceneId = Object.keys(newState.scenes).shift() || '';\r\n                }\r\n\r\n                if ((newState.selectedSceneId || that.state.selectedSceneId) &&\r\n                    newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]) {\r\n                    newState.selectedSceneData = JSON.parse(JSON.stringify(newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]));\r\n                } else {\r\n                    newState.selectedSceneData = null;\r\n                }\r\n\r\n                that.setState(newState);\r\n            });\r\n    }\r\n\r\n    addFolder(parentFolder, id) {\r\n        let folders = JSON.parse(JSON.stringify(this.state.folders));\r\n        let _parentFolder = this.findFolder(folders, parentFolder);\r\n\r\n        let opened = JSON.parse(JSON.stringify(this.state.opened));\r\n\r\n        _parentFolder.subFolders[id] = {\r\n            scenes: {},\r\n            subFolders: {},\r\n            id,\r\n            prefix: _parentFolder.prefix ? _parentFolder.prefix + '.' + id : id\r\n        };\r\n\r\n        opened.push(id);\r\n\r\n        this.setState({folders, opened});\r\n    }\r\n\r\n    addSceneToFolderPrefix = (scene, folderPrefix, noRefresh) => {\r\n        let oldId = scene._id;\r\n        let sceneId = scene._id.split('.').pop();\r\n        scene._id = 'scene.0.' + folderPrefix + (folderPrefix ? '.' : '') + sceneId;\r\n\r\n        return this.socket.delObject(oldId)\r\n            .then(() => {\r\n                console.log('Deleted ' + oldId);\r\n                return this.socket.setObject(scene._id, scene)\r\n            })\r\n            .then(() => {\r\n                console.log('Set new ID: ' + scene._id);\r\n                return !noRefresh && this.refreshData(sceneId)\r\n                    .then(() => this.changeSelectedScene(scene._id))\r\n            })\r\n            .catch(e => this.showError(e));\r\n    };\r\n\r\n    renameFolder(folder, newName) {\r\n        return new Promise(resolve => this.setState({changingScene: folder}, () => resolve()))\r\n            .then(() => {\r\n                let newSelectedId;\r\n                let pos;\r\n                // if selected folder opened, replace its ID in this.state.opened\r\n                if ((pos = this.state.opened.indexOf(folder.prefix)) !== -1) {\r\n                    const opened = [...this.state.opened];\r\n                    opened.splice(pos, 1);\r\n                    opened.push(newName);\r\n                    opened.sort();\r\n                    this.setState({opened});\r\n                }\r\n\r\n                let prefix = folder.prefix.split('.');\r\n                prefix[prefix.length - 1] = newName;\r\n                prefix = prefix.join('.');\r\n\r\n                if (Object.keys(folder.scenes).find(id => id === this.state.selectedSceneId)) {\r\n                    newSelectedId = 'scene.0.' + prefix + '.' + this.state.selectedSceneId.split('.').pop();\r\n                }\r\n\r\n                const promises = Object.keys(folder.scenes).map(sceneId =>\r\n                    this.addSceneToFolderPrefix(folder.scenes[sceneId], prefix, true));\r\n\r\n                return Promise.all(promises)\r\n                    .then(() => this.refreshData(folder))\r\n                    .then(() => newSelectedId && this.setState({selectedSceneId: newSelectedId}));\r\n            });\r\n    }\r\n\r\n    renderMoveDialog() {\r\n        if (!this.state.moveDialog) {\r\n            return null;\r\n        }\r\n\r\n        const newFolder = this.state.newFolder === '__root__' ? '' : this.state.newFolder;\r\n        const sceneId = this.state.selectedSceneId.split('.').pop();\r\n        const newId = 'scene.0.' + newFolder + (newFolder ? '.' : '') + sceneId;\r\n\r\n        const isIdUnique = !Object.keys(this.state.scenes).find(id => id === newId);\r\n\r\n        return <Dialog\r\n            open={ true }\r\n            key=\"moveDialog\"\r\n            onClose={ () => this.setState({moveDialog: null}) }\r\n        >\r\n            <DialogTitle>{ I18n.t('Move to folder') }</DialogTitle>\r\n            <DialogContent>\r\n                <FormControl classes={ {root: this.props.classes.width100} }>\r\n                    <InputLabel shrink={ true }>{ I18n.t('Folder') }</InputLabel>\r\n                    <Select\r\n                        className={ this.props.classes.width100 }\r\n                        value={ this.state.newFolder || '__root__' }\r\n                        onChange={e => this.setState({newFolder: e.target.value}) }>\r\n                        { getFolderList(this.state.folders).map(folder =>\r\n                            <MenuItem\r\n                                key={ folder.prefix }\r\n                                value={ folder.prefix || '__root__' }\r\n                            >\r\n                                { folder.prefix ? folder.prefix.replace('.', ' > ') : I18n.t('Root') }\r\n                            </MenuItem>)\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n            </DialogContent>\r\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                <Button variant=\"contained\" onClick={ () => this.setState({moveDialog: null}) }>\r\n                    { I18n.t('Cancel') }\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    disabled={ !isIdUnique }\r\n                    color=\"primary\" onClick={ e =>\r\n                        this.setState({moveDialog: null}, () =>\r\n                            this.addSceneToFolderPrefix(this.state.scenes[this.state.selectedSceneId], this.state.newFolder === '__root__' ? '' : this.state.newFolder))\r\n                    }\r\n                >\r\n                    { I18n.t('Move to folder') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n\r\n    /*deleteFolder(folder) {\r\n        if (Object.values(folder.scenes).length) {\r\n            return this.showError(I18n.t('Cannot delete non-empty folder'));\r\n        } else {\r\n            //delete folder;\r\n            this.setState(this.state);\r\n        }\r\n    }*/\r\n\r\n    renderTreeScene = (item, level) => {\r\n        const scene = this.state.scenes[item._id];\r\n        if (!scene || (this.state.search && !item.common.name.includes(this.state.search))) {\r\n            return null;\r\n        }\r\n\r\n        level = level || 0;\r\n\r\n        const changed = this.state.selectedSceneId && this.state.selectedSceneId === scene._id && this.state.selectedSceneChanged;\r\n\r\n        return <ListItem\r\n            style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\r\n            key={ item._id }\r\n            selected={ this.state.selectedSceneId ? this.state.selectedSceneId === scene._id : false }\r\n            button\r\n            className={ clsx(changed && this.props.classes.changed, !scene.common.enabled && this.props.classes.disabled) }\r\n            onClick={ () => this.changeSelectedScene(scene._id) }>\r\n            <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} }><IconScript className={ this.props.classes.itemIcon }/></ListItemIcon>\r\n            <ListItemText\r\n                classes={ {primary: this.props.classes.listItemTitle, secondary: this.props.classes.listItemSubTitle} }\r\n                primary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) }\r\n                secondary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}, true) }\r\n                />\r\n            <ListItemSecondaryAction>\r\n                {this.state.changingScene === scene._id ?\r\n                    <CircularProgress size={ 24 }/>\r\n                    :\r\n                    <Switch\r\n                        checked={ scene.common.enabled }\r\n                        onChange={ this.sceneSwitch }\r\n                        name={ scene._id }\r\n                    />\r\n                }\r\n            </ListItemSecondaryAction>\r\n        </ListItem>;\r\n    };\r\n\r\n    toggleFolder(folder) {\r\n        const opened = [...this.state.opened];\r\n        const pos = opened.indexOf(folder.prefix);\r\n        if (pos === -1) {\r\n            opened.push(folder.prefix);\r\n        } else {\r\n            opened.splice(pos, 1);\r\n\r\n            // If active scene is inside this folder select the first scene\r\n            if (Object.keys(folder.scenes).includes(this.state.selectedSceneId)) {\r\n                // To do ask question\r\n                if (this.state.selectedSceneChanged) {\r\n                    this.confirmCb = () => {\r\n                        this.setState({selectedSceneId: '', selectedSceneData: null, selectedSceneChanged: false, opened});\r\n                        window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\r\n                    };\r\n                    return this.setState({sceneChangeDialog: 'empty'});\r\n                }\r\n\r\n                this.setState({selectedSceneId: '', selectedSceneData: null, selectedSceneChanged: false});\r\n            }\r\n        }\r\n\r\n        window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\r\n\r\n        this.setState({opened});\r\n    }\r\n\r\n    renderTree(parent, level) {\r\n        let result = [];\r\n        level = level || 0;\r\n        let opened = this.state.opened ? this.state.opened.includes(parent.prefix) : false;\r\n\r\n        // Show folder item\r\n        parent && parent.id && result.push(<ListItem\r\n            key={ parent.prefix }\r\n            classes={ {gutters: this.props.classes.noGutters} }\r\n            className={ clsx(this.props.classes.width100, this.props.classes.folderItem) }\r\n            style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\r\n        >\r\n            <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} } onClick={ () => this.toggleFolder(parent) }>{ opened ?\r\n                <IconFolderOpened className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/> :\r\n                <IconFolderClosed className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/>\r\n            }</ListItemIcon>\r\n            <ListItemText>{ parent.id }</ListItemText>\r\n            <ListItemSecondaryAction>\r\n                <IconButton onClick={ () => this.toggleFolder(parent) } title={ opened ? I18n.t('Collapse') : I18n.t('Expand')  }>\r\n                    { opened ? <IconExpand/> : <IconCollapse/> }\r\n                </IconButton>\r\n            </ListItemSecondaryAction>\r\n        </ListItem>);\r\n\r\n        if (parent && (opened || !parent.id)) { // root cannot be closed and have id === ''\r\n            parent.id && result.push(<ListItem key={ 'keys_' + parent.prefix }>\r\n                <ListItemSecondaryAction>\r\n                    <IconButton\r\n                        onClick={() => this.createScene(this.getNewSceneId(), parent.id) }\r\n                        title={ I18n.t('Create new scene') }\r\n                    ><IconAdd/></IconButton>\r\n                    { /* <IconButton\r\n                        onClick={() => this.setState({addFolderDialog: parent, addFolderDialogTitle: ''})}\r\n                        title={ I18n.t('Create new folder') }\r\n                    ><IconFolderAdd/></IconButton> */ }\r\n\r\n                    <IconButton onClick={ () => this.setState({editFolderDialog: parent, editFolderDialogTitle: parent.id, editFolderDialogTitleOrigin: parent.id}) }\r\n                                title={ I18n.t('Edit folder name') }\r\n                    ><IconEdit/></IconButton>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>);\r\n\r\n            const values = Object.values(parent.scenes);\r\n            const subFolders = Object.values(parent.subFolders);\r\n\r\n            // add first sub-folders\r\n            result.push(subFolders.sort((a, b) => a.id > b.id ? 1 : (a.id < b.id ? -1 : 0)).map(subFolder =>\r\n                this.renderTree(subFolder, level + 1)));\r\n\r\n            // Add as second scenes\r\n\r\n            result.push(<ListItem\r\n                key={ 'items_' + parent.prefix }\r\n                classes={ {gutters: this.props.classes.noGutters} }\r\n                className={ this.props.classes.width100 }>\r\n                <List\r\n                    className={ this.props.classes.list }\r\n                    classes={ {root: this.props.classes.leftMenuItem} }\r\n                    style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\r\n                >\r\n                    { values.length ?\r\n                        values.sort((a, b) => a._id > b._id ? 1 : (a._id < b._id ? -1 : 0)).map(scene => this.renderTreeScene(scene, level))\r\n                        :\r\n                        (!subFolders.length ? <ListItem><ListItemText className={ this.props.classes.folderItem}>{ I18n.t('No scenes created yet')}</ListItemText></ListItem> : '')\r\n                    }\r\n                </List>\r\n            </ListItem>);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    createScene(name, parentId) {\r\n        let template = {\r\n            common: {\r\n                name: '',\r\n                type: 'boolean',\r\n                role: 'scene.state',\r\n                desc: '',\r\n                enabled: true,\r\n                read: true,\r\n                write: true,\r\n                def: false,\r\n                engine: 'system.adapter.scenes.0'\r\n            },\r\n            native: {\r\n                onTrue: {\r\n                    trigger: {},\r\n                    cron: null,\r\n                    astro: null\r\n                },\r\n                onFalse: {\r\n                    enabled: false,\r\n                    trigger: {},\r\n                    cron: null,\r\n                    astro: null\r\n                },\r\n                members: []\r\n            },\r\n            type: 'state'\r\n        };\r\n\r\n        template.common.name = name;\r\n        let id = 'scene.0.' + (parentId ? parentId + '.' : '') + template.common.name;\r\n\r\n        this.setState({changingScene: id}, () =>\r\n            this.socket.setObject(id, template)\r\n                .then(() => this.refreshData(id))\r\n                .then(() => this.changeSelectedScene(id)))\r\n                .catch(e => this.showError(e));\r\n    };\r\n\r\n    cloneScene(id) {\r\n        let scene = JSON.parse(JSON.stringify(this.state.scenes[id]));\r\n        scene._id = scene._id.split('.');\r\n        scene._id.pop();\r\n        scene._id.push(this.getNewSceneId());\r\n        scene._id = scene._id.join('.');\r\n        scene.common.name = scene.common.name + ' ' + I18n.t('copy');\r\n\r\n        this.setState({changingScene: scene._id}, () =>\r\n            this.socket.setObject(scene._id, scene)\r\n                .then(() => this.refreshData(scene._id))\r\n                .then(() => this.changeSelectedScene( scene._id)))\r\n                .catch(e => this.showError(e));\r\n    };\r\n\r\n    writeScene() {\r\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        scene._id = this.state.selectedSceneId;\r\n\r\n        const folder = getFolderPrefix(scene._id);\r\n        const newId = 'scene.0.' + (folder ? folder + '.' : '') + scene.common.name.replace(FORBIDDEN_CHARS, '_').replace(/\\s/g, '_');\r\n\r\n        if (scene._id !== newId) {\r\n            // check if the scene name is unique\r\n            if (Object.keys(this.state.scenes).find(id => id === newId)) {\r\n                return this.showError(I18n.t('Name is not unique. Please change name before the save.'));\r\n            }\r\n\r\n            // delete first the old scene\r\n            return this.socket.delObject(scene._id)\r\n                .then(() => {\r\n                    scene._id = newId;\r\n                    return this.socket.setObject(scene._id, scene);\r\n                })\r\n                .then(() => this.refreshData(this.state.selectedSceneId))\r\n                .then(() => this.changeSelectedScene(newId))\r\n                .catch(e => this.showError(e));\r\n        } else {\r\n            return this.socket.setObject(this.state.selectedSceneId, scene)\r\n                .then(() => this.refreshData(this.state.selectedSceneId))\r\n                .catch(e => this.showError(e));\r\n        }\r\n    }\r\n\r\n    updateScene(common, native, cb) {\r\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        if (common) {\r\n            scene.common = JSON.parse(JSON.stringify(common));\r\n        }\r\n        if (native) {\r\n            const members = scene.native.members;\r\n            scene.native = JSON.parse(JSON.stringify(native));\r\n            scene.native.members = members;\r\n        }\r\n\r\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\r\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\r\n    };\r\n\r\n    deleteScene = (id) => {\r\n        return this.socket.delObject(id)\r\n            .then(() => {\r\n                if (this.state.selectedSceneId === id) {\r\n                    return this.refreshData(id)\r\n                        .then(() => {\r\n                            const ids = Object.keys(this.state.scenes);\r\n                            // Find next scene\r\n                            let nextId = ids.find(_id => _id > id) || '';\r\n                            if (!nextId) {\r\n                                // try prev scene\r\n                                for (let i = ids.length - 1; i >= 0; i--) {\r\n                                    if (ids[i] < id) {\r\n                                        nextId = ids[i];\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (!nextId && ids.length) {\r\n                                nextId = ids.shift();\r\n                            }\r\n\r\n                            this.changeSelectedScene(nextId);\r\n                        });\r\n                } else {\r\n                    return this.refreshData(id);\r\n                }\r\n            })\r\n            .catch(e => this.showError(e));\r\n    };\r\n\r\n    getNewSceneId() {\r\n        let newId = 0;\r\n\r\n        for (const id in this.state.scenes) {\r\n            let shortId = id.split('.').pop();\r\n            let matches = shortId.match(/^scene([0-9]+)$/);\r\n            if (matches && parseInt(matches[1], 10) >= newId) {\r\n                newId = parseInt(matches[1]) + 1;\r\n            }\r\n        }\r\n\r\n        return 'scene' + newId;\r\n    };\r\n\r\n    updateSceneMembers(members, cb) {\r\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        scene.native.members = JSON.parse(JSON.stringify(members));\r\n\r\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\r\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\r\n    };\r\n\r\n    changeSelectedScene(newId, ignoreUnsaved, cb) {\r\n        if (this.state.selectedSceneId !== newId) {\r\n            if (this.state.selectedSceneChanged && !ignoreUnsaved) {\r\n                this.confirmCb = cb;\r\n                this.setState({sceneChangeDialog: newId});\r\n            } else {\r\n                window.localStorage.setItem('Scenes.selectedSceneId', newId);\r\n                this.setState({\r\n                    selectedSceneData: this.state.scenes[newId] ? JSON.parse(JSON.stringify(this.state.scenes[newId])) : null,\r\n                    sceneChangeDialog: '',\r\n                    selectedSceneId: newId || '',\r\n                    selectedSceneChanged: false,\r\n                    menuOpened: false,\r\n                }, () => cb && cb());\r\n            }\r\n        } else {\r\n            cb && cb();\r\n        }\r\n    }\r\n\r\n    renderAddFolderDialog() {\r\n        return this.state.addFolderDialog ?\r\n            <Dialog\r\n                open={ !!this.state.addFolderDialog }\r\n                onClose={ () => this.setState({addFolderDialog: null}) }\r\n            >\r\n                <DialogTitle>{I18n.t('Create folder')}</DialogTitle>\r\n                <DialogContent className={this.props.classes.p}>\r\n                    <TextField label={ I18n.t('Title') } value={ this.state.addFolderDialogTitle } onChange={ e =>\r\n                        this.setState({addFolderDialogTitle: e.target.value.replace(FORBIDDEN_CHARS, '_')}) }/>\r\n                </DialogContent>\r\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                    <Button variant=\"contained\" onClick={ () => this.setState({addFolderDialog: null}) }>\r\n                        <IconCancel className={ this.props.classes.buttonIcon }/>\r\n                        { I18n.t('Cancel') }\r\n                    </Button>\r\n                    <Button variant=\"contained\" onClick={() => {\r\n                        this.addFolder(this.state.addFolderDialog, this.state.addFolderDialogTitle);\r\n                        this.setState({addFolderDialog: null});\r\n                    }} color=\"primary\" autoFocus>\r\n                        <IconCheck className={ this.props.classes.buttonIcon }/>\r\n                        {I18n.t('Create')}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog> : null;\r\n    }\r\n\r\n    renderEditFolderDialog() {\r\n        const isUnique = !Object.keys(this.state.folders.subFolders).find(folder => folder.id === this.state.editFolderDialogTitle);\r\n\r\n        return this.state.editFolderDialog ? <Dialog open={ !!this.state.editFolderDialog } onClose={ () => this.setState({editFolderDialog: null}) }>\r\n            <DialogTitle>{ I18n.t('Edit folder') }</DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                    label={ I18n.t('Title') }\r\n                    value={ this.state.editFolderDialogTitle }\r\n                    onChange={ e => this.setState({editFolderDialogTitle: e.target.value.replace(FORBIDDEN_CHARS, '_')}) }/>\r\n            </DialogContent>\r\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                <Button variant=\"contained\" onClick={ () => this.setState({editFolderDialog: null}) }>\r\n                    <IconCancel className={ this.props.classes.buttonIcon }/>\r\n                    { I18n.t('Cancel') }\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    disabled={ !this.state.editFolderDialogTitle || this.state.editFolderDialogTitleOrigin === this.state.editFolderDialogTitle || !isUnique}\r\n                    onClick={ () => {\r\n                        this.renameFolder(this.state.editFolderDialog, this.state.editFolderDialogTitle)\r\n                            .then(() => this.setState({editFolderDialog: null}));\r\n                    }}\r\n                    color=\"primary\"\r\n                    autoFocus\r\n                >\r\n                    <IconCheck className={ this.props.classes.buttonIcon }/>\r\n                    { I18n.t('Apply') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog> : null;\r\n    }\r\n\r\n    renderSceneChangeDialog() {\r\n        const that = this;\r\n        return this.state.sceneChangeDialog ? <Dialog\r\n            open={ true }\r\n            key=\"sceneChangeDialog\"\r\n            onClose={ () => this.setState({sceneChangeDialog: ''}) }>\r\n                <DialogTitle>{ I18n.t('Are you sure for cancel unsaved changes?') }</DialogTitle>\r\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                    <Button variant=\"contained\" onClick={() => {\r\n                        this.confirmCb = null; // cancel callback\r\n                        this.setState({sceneChangeDialog: ''});\r\n                    }}>\r\n                        <IconCancel/> { I18n.t('Cancel') }\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={e =>\r\n                        this.changeSelectedScene(this.state.sceneChangeDialog, true, () => {\r\n                            const cb = this.confirmCb;\r\n                            this.confirmCb = null;\r\n                            cb && cb();\r\n                        }) }>\r\n                        { I18n.t('Discard') }\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={e => {\r\n                        // save scene\r\n                        this.writeScene()\r\n                            .then(() => that.changeSelectedScene(that.state.sceneChangeDialog === 'empty' ? '' : that.state.sceneChangeDialog, true, () => {\r\n                                const cb = this.confirmCb;\r\n                                this.confirmCb = null;\r\n                                cb && cb();\r\n                            }))\r\n                    }}>\r\n                        <IconSave/> { I18n.t('Save changes') }\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog> : null;\r\n    };\r\n\r\n    renderDeleteDialog() {\r\n        return this.state.deleteDialog ? <Dialog\r\n            open={ true }\r\n            key=\"deleteDialog\"\r\n            onClose={ () => this.setState({deleteDialog: false}) }\r\n        >\r\n            <DialogTitle>{ I18n.t('Are you sure for delete this scene?') }</DialogTitle>\r\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: false}) }>\r\n                    {I18n.t('Cancel')}\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={e => {\r\n                    this.deleteScene(this.state.selectedSceneId);\r\n                    this.setState({deleteDialog: false});\r\n                }}>\r\n                    { I18n.t('Delete') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog> : null;\r\n    }\r\n\r\n    renderExportImportDialog() {\r\n        if (!this.state.exportDialog && !this.state.importDialog) {\r\n            return null;\r\n        }\r\n\r\n        return <ExportImportDialog\r\n            isImport={ !!this.state.importDialog }\r\n            themeType={ this.state.themeType }\r\n            onClose={ importedScene => {\r\n                if (this.state.importDialog && importedScene) {\r\n                    const scene = this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId];\r\n                    importedScene.common._id = scene._id;\r\n                    importedScene.common.name = scene.name || importedScene.common.name;\r\n                    this.setState({selectedSceneData: importedScene,  importDialog: false});\r\n                } else {\r\n                    this.setState({exportDialog: false, importDialog: false})\r\n                }\r\n            } }\r\n            sceneObj={ this.state.exportDialog ? this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId] : '' }\r\n        />\r\n    }\r\n\r\n    renderListToolbar() {\r\n        return <Toolbar key=\"toolbar\" variant=\"dense\" className={ this.props.classes.mainToolbar }>\r\n                <IconButton\r\n                    onClick={ () => this.createScene(this.getNewSceneId()) }\r\n                    title={ I18n.t('Create new scene') }\r\n                ><IconAdd/></IconButton>\r\n\r\n                <IconButton\r\n                    onClick={ () => this.setState({addFolderDialog: this.state.folders, addFolderDialogTitle: ''}) }\r\n                    title={ I18n.t('Create new folder') }\r\n                ><IconFolderAdd/></IconButton>\r\n\r\n                <span className={this.props.classes.right}>\r\n                                            <IconButton onClick={() => this.setState({showSearch: !this.state.showSearch}) }>\r\n                                                <SearchIcon/>\r\n                                            </IconButton>\r\n                                        </span>\r\n                {this.state.showSearch ?\r\n                    <TextField\r\n                        value={ this.state.search }\r\n                        className={ this.props.classes.textInput }\r\n                        onChange={ e => this.setState({search: e.target.value}) }/> : null\r\n                }\r\n            </Toolbar>;\r\n    }\r\n\r\n    renderSceneTopToolbar(showDrawer) {\r\n        return <Toolbar variant=\"dense\" key=\"topToolbar\" classes={ {gutters: this.props.classes.noGutters} }>\r\n            { this.props.width !== 'md' && this.props.width !== 'sm' && this.props.width !== 'xs' ? <Typography variant=\"h6\" className={ this.props.classes.sceneTitle }>\r\n                { I18n.t('Scene options') /*Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) */}\r\n                <span className={this.props.classes.sceneSubTitle}>{ Utils.getObjectNameFromObj(this.state.scenes[this.state.selectedSceneId], null, {language: I18n.getLanguage()}, true) }</span>\r\n            </Typography> : null }\r\n\r\n            { showDrawer ? <IconButton aria-label=\"Open list\" title={ I18n.t('Open list') } onClick={ () => this.setState({menuOpened: true}) }><IconMenu/></IconButton> : null }\r\n            <IconButton aria-label=\"Clone\" title={ I18n.t('Clone') } onClick={ () => this.cloneScene(this.state.selectedSceneId) }><IconClone/></IconButton>\r\n\r\n            <IconButton aria-label=\"Delete\" title={ I18n.t('Delete') } onClick={ () => this.setState({deleteDialog: true}) }><IconDelete/></IconButton>\r\n\r\n            <IconButton aria-label=\"Move to folder\" title={ I18n.t('Move to folder') } onClick={ () => this.setState({moveDialog: true, newFolder: getFolderPrefix(this.state.selectedSceneId)}) }><IconMoveToFolder/></IconButton>\r\n\r\n            <IconButton aria-label=\"Export\" title={ I18n.t('Export scene') } onClick={ () => this.setState({exportDialog: true}) }><IconExport/></IconButton>\r\n\r\n            {/*<IconButton aria-label=\"Import\" title={ I18n.t('Import scene') } onClick={ () => this.setState({importDialog: true}) }><IconImport/></IconButton>*/}\r\n        </Toolbar>;\r\n    }\r\n\r\n    renderSceneBottomToolbar() {\r\n        return <Toolbar variant=\"dense\" key=\"bottomToolbar\" classes={ {gutters: this.props.classes.noGutters} }>\r\n            <div style={{flexGrow: 1}}/>\r\n            { this.state.selectedSceneChanged ? <Button\r\n                className={ this.props.classes.toolbarButtons }\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => this.writeScene()}\r\n            >\r\n                { I18n.t('Save') }\r\n            </Button> : null }\r\n\r\n            { this.state.selectedSceneChanged ? <Button\r\n                className={ this.props.classes.toolbarButtons }\r\n                variant=\"contained\"\r\n                onClick={ () => this.refreshData(this.state.selectedSceneId) }\r\n            >\r\n                { I18n.t('Cancel') }\r\n            </Button> : null }\r\n        </Toolbar>;\r\n    }\r\n\r\n    renderDrawerContent() {\r\n        return [\r\n            this.renderListToolbar(),\r\n            <div key=\"list\" className={ this.props.classes.heightMinusToolbar }>\r\n                <List className={ this.props.classes.scroll }>\r\n                    { this.renderTree(this.state.folders) }\r\n                </List>\r\n            </div>\r\n        ];\r\n    }\r\n\r\n    renderSceneMembers(oneColumn) {\r\n        return <SceneMembersForm\r\n            key={ 'selected' + this.state.selectedSceneId }\r\n            oneColumn={ oneColumn }\r\n            showError={ e => this.showError(e) }\r\n            updateSceneMembers={ (members, cb) => this.updateSceneMembers(members, cb) }\r\n            selectedSceneChanged={ this.state.selectedSceneChanged }\r\n            sceneEnabled={ this.state.selectedSceneData.common.enabled }\r\n            members={ this.state.selectedSceneData.native.members }\r\n            socket={ this.socket }\r\n            onFalseEnabled={ this.state.selectedSceneData.native.onFalse.enabled }\r\n            virtualGroup={ this.state.selectedSceneData.native.virtualGroup }\r\n            sceneId={ this.state.selectedSceneId }\r\n            engineId={ this.state.selectedSceneData.common.engine }\r\n            intervalBetweenCommands={ this.state.selectedSceneData.native.burstInterval || 0 }\r\n        />;\r\n    }\r\n\r\n    renderSceneSettings(oneColumn) {\r\n        if (!this.state.selectedSceneData) {\r\n            this.state.selectedSceneData = JSON.parse(JSON.stringify(this.state.scenes[this.state.selectedSceneId]));\r\n        }\r\n\r\n        return <SceneForm\r\n            key={ this.state.selectedSceneId }\r\n            showError={ e => this.showError(e) }\r\n            oneColumn={ oneColumn }\r\n            updateScene={ (common, native, cb) => this.updateScene(common, native, cb) }\r\n            scene={ this.state.selectedSceneData }\r\n            socket={ this.socket }\r\n            instances={ this.state.instances }\r\n        />;\r\n    }\r\n\r\n    renderInOneColumn() {\r\n        return [\r\n            <Drawer\r\n                key=\"drawer\"\r\n                anchor=\"left\"\r\n                open={ this.state.menuOpened }\r\n                onClose={() => this.setState({menuOpened: false}) }\r\n                classes={ {paper: this.props.classes.drawer }}\r\n            >\r\n                { this.renderDrawerContent() }\r\n            </Drawer>,\r\n            this.renderSceneTopToolbar(true),\r\n            this.state.selectedSceneId ? <div\r\n                    key=\"main\"\r\n                    className={ this.props.classes.heightMinus2Toolbars }\r\n                    style={{ overflowY: 'auto', overflowX: 'hidden'}}\r\n                >\r\n                    { this.renderSceneSettings(true) }\r\n                    { this.renderSceneMembers(true) }\r\n                </div> : null,\r\n            this.renderSceneBottomToolbar(),\r\n        ]\r\n    }\r\n\r\n    renderInMoreThanOneColumn() {\r\n        const showDrawer = this.props.width === 'sm' || this.props.width === 'xs';\r\n\r\n        return <Container className={ clsx(this.props.classes.height, this.props.classes.fullWidthContainer) }>\r\n            <Grid container spacing={ 1 } className={ this.props.classes.height }>\r\n                { showDrawer ?\r\n                    <Drawer anchor=\"left\" open={ this.state.menuOpened } onClose={() => this.setState({menuOpened: false}) }>\r\n                        { this.renderDrawerContent() }\r\n                    </Drawer> :\r\n                    <Grid item xs={ 3 } className={ clsx(this.props.classes.columnContainer, this.props.classes.height) }>\r\n                        { this.renderDrawerContent() }\r\n                    </Grid>\r\n                }\r\n                { this.state.selectedSceneId && this.state.scenes[this.state.selectedSceneId] ?\r\n                    <Grid item xs={ showDrawer ? 12 : 9 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\r\n                        <Grid container spacing={ 1 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\r\n                            <Grid item xs={ this.props.width === 'xs' ? 12 : 5 } className={ this.props.classes.heightMinus2Toolbars }>\r\n                                { this.renderSceneTopToolbar(showDrawer) }\r\n                                <div className={this.props.classes.height}>\r\n                                    {this.state.selectedSceneId ? this.renderSceneSettings() : null}\r\n                                </div>\r\n                                { this.renderSceneBottomToolbar() }\r\n                            </Grid>\r\n                            <Grid item xs={ this.props.width === 'xs' ? 12 : 7 } className={ clsx(this.props.classes.height) }>\r\n                                <div className={ clsx(this.props.classes.heightMinusMargin) }>\r\n                                    { this.state.selectedSceneId ?\r\n                                        <div className={ clsx(this.props.classes.membersCell, this.props.classes.height) }>\r\n                                            { this.renderSceneMembers() }\r\n                                        </div>\r\n                                        : null}\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    : null\r\n                }\r\n            </Grid>\r\n        </Container>\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.ready) {\r\n            return <MuiThemeProvider theme={ this.state.theme }>\r\n                <Loader theme={ this.state.themeName }/>\r\n            </MuiThemeProvider>;\r\n        }\r\n\r\n        const oneColumn = this.props.width === 'xs';\r\n\r\n        return (\r\n            <MuiThemeProvider theme={ this.state.theme }>\r\n                <div className={ this.props.classes.root }>\r\n                    { oneColumn ?\r\n                        this.renderInOneColumn() :\r\n                        this.renderInMoreThanOneColumn()\r\n                    }\r\n\r\n                    { this.renderSceneChangeDialog() }\r\n                    { this.renderEditFolderDialog() }\r\n                    { this.renderMoveDialog() }\r\n                    { this.renderDeleteDialog() }\r\n                    { this.renderAddFolderDialog() }\r\n                    { this.renderExportImportDialog() }\r\n                    { this.renderError() }\r\n                </div>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withWidth()(withStyles(styles)(withTheme(App)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Sentry from '@sentry/browser';\nimport * as SentryIntegrations from '@sentry/integrations';\nimport { MuiThemeProvider} from '@material-ui/core/styles';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\nimport { version } from '../package.json';\n\nimport theme from '@iobroker/adapter-react/Theme';\nimport Utils from '@iobroker/adapter-react/Components/Utils';\n\nwindow.adapterName = 'scenes';\n\nconsole.log('iobroker.' + window.adapterName + '@' + version);\nlet themeName = Utils.getThemeName();\n\nfunction build() {\n    return ReactDOM.render(<MuiThemeProvider theme={ theme(themeName) }>\n        <App onThemeChange={_theme => {\n            themeName = _theme;\n            build();\n        }}/>\n    </MuiThemeProvider>, document.getElementById('root'));\n}\n\n// if not local development\nif (window.location.host !== 'localhost:3000') {\n    Sentry.init({\n        dsn: \"https://89fc6260a1af4df68f9db767a603b7e5@sentry.iobroker.net/86\",\n        release: 'iobroker.' + window.adapterName + '@' + version,\n        integrations: [\n            new SentryIntegrations.Dedupe()\n        ]\n    });\n}\n\nbuild();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}