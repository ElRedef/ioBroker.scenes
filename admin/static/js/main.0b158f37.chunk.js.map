{"version":3,"sources":["serviceWorker.js","components/SceneForm.js","components/SceneMembersForm.js","components/ExportImportDialog.js","components/ScenesList.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","SceneForm","React","Component","constructor","props","super","setStateWithParent","newState","cb","this","setState","updateScene","common","native","saveCursorPosition","name","inputs","start","ref","current","selectionStart","end","selectionEnd","sceneObj","scene","JSON","parse","stringify","members","state","showDialog","sceneId","_id","map","createRef","renderSelectIdDialog","key","imagePrefix","socket","dialogName","title","I18n","t","selected","onOk","onClose","renderOnTrueFalse","on","className","classes","editItem","onTrue","onFalse","enabled","right","Switch","checked","trigger","id","onChange","e","target","condition","Grid","container","spacing","item","xs","TextField","inputRef","Trigger","fullWidth","InputLabelProps","shrink","label","value","onFocus","onKeyDown","onClick","FormControl","InputLabel","Select","MenuItem","Value","Cron","cron","componentDidUpdate","Object","keys","forEach","render","Box","clsx","columnContainer","oneColumn","height","scroll","Name","Description","desc","sm","width100","engine","instances","replace","min","burstInterval","helperText","type","parseInt","FormControlLabel","style","paddingTop","control","Checkbox","virtualGroup","easy","withStyles","theme","alignRight","textAlign","buttonsContainer","margin","width","display","flexDirection","float","overflowY","overflowX","paddingRight","marginBottom","color","palette","p","background","SceneMembersForm","memberStateChange","states","val","objectTypes","undefined","parseFloat","createSceneMembers","ids","length","openedMembers","objectNames","Promise","all","getObject","then","obj","template","setIfTrue","setIfFalse","stopAllDelays","disabled","delay","Utils","getObjectNameFromObj","language","getLanguage","onFalseEnabled","push","subscribeState","catch","showError","deleteSceneMember","i","splice","deleteDialog","unsubscribeState","renderMember","member","index","_valStr","toString","setIfTrueTolerance","Math","abs","memberTrueFalse","memberTrue","setIfFalseTolerance","memberFalse","memberUncertain","opened","includes","setIfTrueVisible","varType","setIfFalseVisible","stacked","u","stackNextDelays","intervalBetweenCommands","Paper","memberCard","memberToolbar","IconButton","memberFolder","pos","indexOf","sort","localStorage","setItem","memberTitle","memberDesc","memberButtons","size","marginLeft","aria-label","suppressDeleteConfirm","getItem","Date","now","removeItem","renderSetValue","doNotOverwrite","smallOnTrueFalse","stateValueTrue","stateValueFalse","getItemStyle","isDragging","draggableStyle","userSelect","getListStyle","isDraggingOver","sceneState","selectedSceneChanged","engineId","Toolbar","gutters","guttersZero","Typography","variant","sceneTitle","instanceNotActive","sceneSubTitle","sceneTrue","sceneFalse","sceneUncertain","testButtons","width100WithButton","defaultValue","onKeyUp","keyCode","onWriteScene","writeSceneState","sceneEnabled","Button","btnTestTrue","btnTestFalse","btnCollapseAll","btnExpandAll","onDragEnd","droppableId","provided","snapshot","droppableProps","innerRef","draggableId","draggableProps","dragHandleProps","placeholder","renderDeleteDialog","renderSelectStateIdDialog","showSelectValueIdDialog","showSelectValueIdDialogFor","delButtonRef","bind","componentDidMount","readObjects","componentWillUnmount","changed","result","destination","source","removed","results","resolve","that","updateSceneMembers","multiSelect","prevProps","prevState","setTimeout","focus","Dialog","open","DialogTitle","DialogContent","DialogActions","setValue","m","isTrue","labelSetValue","labelTolerance","setValueTolerance","fromState","root","fromId","Fragment","readOnly","InputProps","endAdornment","setTolerance","borderRadius","padding","fontSize","fontWeight","whiteSpace","maxWidth","overflow","textOverflow","backgroundColor","position","top","left","flexGrow","marginRight","content","fontStyle","minHeight","minWidth","opacity","marginTop","ExportImportDialog","text","error","toast","renderToast","Snackbar","autoHideDuration","Alert","severity","aria-labelledby","fullScreen","aria-describedby","isImport","divWithoutTitle","autoFocus","mode","onLoad","editor","codeEditor","themeType","newValue","editorProps","$blockScrolling","copy","border","Droppable","onDrop","useDrop","accept","drop","isOver","collect","monitor","shallow","isOverAny","children","Draggable","useDrag","drag","transform","ScenesList","renderTreeScene","level","scenes","search","selectedSceneId","listItem","ListItem","paddingLeft","reorder","noPaddings","button","onSceneSelect","ListItemIcon","itemIconRoot","itemIcon","ListItemText","primary","listItemTitle","secondary","listItemSubTitle","ListItemSecondaryAction","changingScene","CircularProgress","event","onSceneEnableDisable","showSearch","addFolderDialog","addFolderDialogTitle","editFolderDialogeditFolderDialog","editFolderDialogTitle","onAddFolder","parent","onCreateFolder","renderAddFolderDialog","FORBIDDEN_CHARS","buttonIcon","folders","subFolders","find","onRenameFolder","folder","newName","prefix","editFolderDialog","renderEditFolderDialog","isUnique","editFolderDialogTitleOrigin","toggleFolder","confirmCb","selectedSceneData","sceneChangeDialog","onDragFinish","console","log","newId","split","pop","onMoveScene","renderTree","reactChildren","values","a","b","subFolder","folderItem","noGutters","itemIconFolder","onCreateScene","r","renderListToolbar","mainToolbar","textInput","toolbarButtons","stopPropagation","heightMinusToolbar","backend","HTML5Backend","List","mainList","main","paddingBottom","leftMenuItem","cursor","list","folderButtons","App","GenericApp","extendedProps","translations","require","addSceneToFolderPrefix","folderPrefix","noRefresh","oldId","delObject","setObject","refreshData","changeSelectedScene","query","parts","decodeURIComponent","getUrlQuery","port","host","iobForceHost","onConnectionReady","lang","systemLang","ready","exportDialog","importDialog","menuOpened","getSystemConfig","systemConfig","getAdapterInstances","adapterName","sceneSwitch","buildTree","shift","currentFolder","findFolder","getData","getObjectView","_scenes","burstIntervall","from","user","ts","acl","addFolder","parentFolder","_parentFolder","moveScript","renameFolder","newSelectedId","join","promises","createScene","parentId","role","read","write","def","astro","cloneScene","getNewSceneId","writeScene","getFolderPrefix","deleteScene","nextId","matches","ignoreUnsaved","renderSceneChangeDialog","renderExportImportDialog","importedScene","renderSceneTopToolbar","showDrawer","renderSceneBottomToolbar","renderDrawerContent","renderSceneMembers","renderSceneSettings","renderInOneColumn","Drawer","anchor","paper","drawer","heightMinus2Toolbars","renderInMoreThanOneColumn","Container","fullWidthContainer","settingsBackground","heightMinusMargin","membersCell","themeName","renderError","withWidth","buttonsContainer1","withTheme","version","getThemeName","Sentry","dsn","release","integrations","SentryIntegrations","build","ReactDOM","onThemeChange","_theme","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.0b158f37.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nconst styles = theme => ({\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    width100: {\r\n        width: '100%'\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    editItem: {\r\n        display: 'block',\r\n        marginBottom: theme.spacing(2),\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    onTrue: {\r\n        background: 'lightgreen',\r\n    },\r\n    onFalse: {\r\n        background: '#ff9999',\r\n    },\r\n});\r\n\r\nclass SceneForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        this.state = {\r\n            common: sceneObj.common,\r\n            native: sceneObj.native,\r\n            showDialog: null,\r\n            sceneId: props.scene._id,\r\n        };\r\n\r\n        const inputs = ['Trigger', 'Value', 'Cron', 'Name', 'Description'];\r\n        this.inputs = {};\r\n        inputs.map(name => this.inputs[name] = {\r\n            ref:   React.createRef(),\r\n            start: 0,\r\n            end:   0,\r\n        });\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        if (JSON.stringify(sceneObj.common) !== JSON.stringify(state.common) || JSON.stringify(sceneObj.native) !== JSON.stringify(state.native)) {\r\n            return {\r\n                common: sceneObj.common,\r\n                native: sceneObj.native,\r\n            };\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    setStateWithParent = (newState, cb) => {\r\n        this.setState(newState, () =>\r\n            this.props.updateScene(newState.common, newState.native, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n                key=\"selectDialog\"\r\n                imagePrefix={'../..'}\r\n                socket={ this.props.socket }\r\n                dialogName=\"memberEdit\"\r\n                title={ I18n.t('Select for ') }\r\n                selected={ null }\r\n                onOk={ this.state.showDialog }\r\n                onClose={ () => this.setState({showDialog: false}) }\r\n            /> : null;\r\n    };\r\n\r\n    renderOnTrueFalse(name) {\r\n        const on = this.state.native[name];\r\n\r\n        return [\r\n            <div key=\"switch\" className={ this.props.classes.editItem }>\r\n                <h4>{ on === this.state.native.onTrue ? (this.state.native.onFalse.enabled ? I18n.t('Trigger for TRUE') : I18n.t('Trigger')) : I18n.t('Trigger for FALSE') }\r\n                    <span className={ this.props.classes.right }>\r\n                        <Switch checked={ !!on.trigger.id }\r\n                                onChange={ e => {\r\n                                    if (e.target.checked) {\r\n                                        this.setState({\r\n                                            showDialog: id => {\r\n                                                const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                native[name].trigger.id = id;\r\n                                                native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                                this.setStateWithParent({native});\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                        native[name].trigger.id = '';\r\n                                        this.setStateWithParent({native});\r\n                                    }\r\n                                } }\r\n                        />\r\n                    </span>\r\n                </h4>\r\n            </div>,\r\n            <div key=\"id\" className={ this.props.classes.editItem }>\r\n                {on.trigger.id ?\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={8}>\r\n                            <TextField\r\n                                inputRef={this.inputs.Trigger.ref}\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Trigger ID') }\r\n                                value={ on.trigger.id }\r\n\r\n                                onFocus={() => this.saveCursorPosition('Trigger')}\r\n                                onKeyDown={() => this.saveCursorPosition('Trigger')}\r\n                                onChange={() => this.saveCursorPosition('Trigger')}\r\n\r\n                                onClick={ () => {\r\n                                    this.setState({\r\n                                        showDialog: id => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.id = id;\r\n                                            native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                            this.setStateWithParent({native});\r\n                                        }\r\n                                    });\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2}>\r\n                            <FormControl>\r\n                                <InputLabel shrink={ true }>{ I18n.t('Condition') }</InputLabel>\r\n                                <Select value={ on.trigger.condition || '==' }\r\n                                        onChange={ e => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.condition = e.target.value;\r\n                                            this.setStateWithParent({native});\r\n                                        } }\r\n                                >\r\n                                    <MenuItem value=\"==\">==</MenuItem>\r\n                                    <MenuItem value=\"!=\">!=</MenuItem>\r\n                                    <MenuItem value=\">\">&gt;</MenuItem>\r\n                                    <MenuItem value=\"<\">&lt;</MenuItem>\r\n                                    <MenuItem value=\">=\">&gt;=</MenuItem>\r\n                                    <MenuItem value=\"<=\">&lt;=</MenuItem>\r\n                                    <MenuItem value=\"update\">{ I18n.t('on update') }</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            <TextField\r\n                                inputRef={this.inputs.Value.ref}\r\n                                fullWidth\r\n                                InputLabelProps= {{shrink: true} } label={ I18n.t('Value') }\r\n                                value={ on.trigger.value || '' }\r\n\r\n                                onFocus={() => this.saveCursorPosition('Value')}\r\n                                onKeyDown={() => this.saveCursorPosition('Value')}\r\n\r\n                                onChange={ e => {\r\n                                    this.saveCursorPosition('Value');\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native[name].trigger.value = e.target.value;\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    : null}\r\n            </div>,\r\n            <div key=\"cron\" className={ this.props.classes.editItem }>\r\n                <TextField\r\n                    inputRef={this.inputs.Cron.ref}\r\n                    fullWidth\r\n                    InputLabelProps={{shrink: true}}\r\n                    label={ name === 'onTrue' ? I18n.t('On time (CRON expression)') : I18n.t('Off time (CRON expression)')}\r\n                    value={ on.cron || '' }\r\n\r\n                    onFocus={() => this.saveCursorPosition('Cron')}\r\n                    onKeyDown={() => this.saveCursorPosition('Cron')}\r\n\r\n                    onChange={e => {\r\n                        this.saveCursorPosition('Cron');\r\n                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                        native[name].cron = e.target.value;\r\n                        this.setStateWithParent({native});\r\n                    }}\r\n                />\r\n            </div>\r\n        ];\r\n    }\r\n\r\n    saveCursorPosition = name => {\r\n        this.inputs[name].start = this.inputs[name].ref.current.selectionStart;\r\n        this.inputs[name].end   = this.inputs[name].ref.current.selectionEnd;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // If there was a request to update the selection via setState...\r\n        // Update the selection.\r\n        Object.keys(this.inputs).forEach(name => {\r\n            if (this.inputs[name].ref.current) {\r\n                if (this.inputs[name].ref.current.selectionStart !== this.inputs[name].start) {\r\n                    this.inputs[name].ref.current.selectionStart = this.inputs[name].start;\r\n                }\r\n                if (this.inputs[name].ref.current.selectionEnd   !== this.inputs[name].end) {\r\n                    this.inputs[name].ref.current.selectionEnd   = this.inputs[name].end;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let result = <Box key=\"sceneForm\" className={ clsx(this.props.classes.columnContainer, !this.props.oneColumn && this.props.classes.height) }>\r\n            <Box className={ this.props.classes.scroll }>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        inputRef={this.inputs.Name.ref}\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene name') }\r\n                        value={ this.state.common.name }\r\n\r\n                        onFocus={() => this.saveCursorPosition('Name')}\r\n                        onKeyDown={() => this.saveCursorPosition('Name')}\r\n\r\n                        onChange={ e => {\r\n                            this.saveCursorPosition('Name');\r\n                            const common = JSON.parse(JSON.stringify(this.state.common));\r\n                            common.name = e.target.value;\r\n                            this.setStateWithParent({common});\r\n                        }}/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        inputRef={this.inputs.Description.ref}\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene description') }\r\n                        value={ this.state.common.desc }\r\n\r\n                        onFocus={() => this.saveCursorPosition('Description')}\r\n                        onKeyDown={() => this.saveCursorPosition('Description')}\r\n\r\n                        onChange={ e => {\r\n                            this.saveCursorPosition('Description');\r\n                            const common = JSON.parse(JSON.stringify(this.state.common));\r\n                            common.desc = e.target.value;\r\n                            this.setStateWithParent({common});\r\n                        }}\r\n                    />\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={ 1 }>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControl className={this.props.classes.width100}>\r\n                                <InputLabel shrink={true}>{ I18n.t('Instance') }</InputLabel>\r\n                                <Select\r\n                                    value={ this.state.common.engine }\r\n                                    onChange={e => {\r\n                                        const common = JSON.parse(JSON.stringify(this.state.common));\r\n                                        common.engine = e.target.value;\r\n                                        this.setStateWithParent({common});\r\n                                    }}\r\n                                >\r\n                                    { this.props.instances.map(id => <MenuItem key={ id } value={ id }>{ id.replace('system.adapter.', '') }</MenuItem>) }\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Interval between commands') }\r\n                                min={ 0 }\r\n                                value={ this.state.native.burstInterval || 0 }\r\n                                helperText=\"ms\"\r\n                                type=\"number\"\r\n                                onChange={e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native.burstInterval = parseInt(e.target.value, 10);\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControlLabel\r\n                                style={{paddingTop: 10}}\r\n                                title={ I18n.t('virtual_group_tooltip') }\r\n                                label={ I18n.t('Virtual group') } control={\r\n                                <Checkbox\r\n                                    checked={this.state.native.virtualGroup}\r\n                                      onChange={e => {\r\n                                          const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                          native.virtualGroup = e.target.checked;\r\n                                          this.setStateWithParent({native});\r\n                                      }}\r\n                                />\r\n                            }/>\r\n                        </Grid>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            { !this.state.native.virtualGroup ?\r\n                                <FormControlLabel\r\n                                    style={{paddingTop: 10}}\r\n                                    label={I18n.t('Set value if false')}\r\n                                    control={\r\n                                          <Checkbox\r\n                                              checked={ this.state.native.onFalse.enabled }\r\n                                                onChange={e => {\r\n                                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                    native.onFalse.enabled = e.target.checked;\r\n                                                    this.setStateWithParent({native});\r\n                                                }}\r\n                                          />}\r\n                                />\r\n                                : null}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControlLabel\r\n                                style={{paddingTop: 10}}\r\n                                label={ I18n.t('Easy mode') } control={\r\n                                <Checkbox\r\n                                    checked={this.state.native.easy}\r\n                                      onChange={e => {\r\n                                          const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                          native.easy = e.target.checked;\r\n                                          this.setStateWithParent({native});\r\n                                      }}\r\n                                />\r\n                            }/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                { !this.state.native.virtualGroup ? this.renderOnTrueFalse('onTrue') : null }\r\n                { !this.state.native.virtualGroup && this.state.native.onFalse.enabled ? this.renderOnTrueFalse('onFalse') : null }\r\n            </Box>\r\n        </Box>;\r\n\r\n        return [\r\n            result,\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateScene: PropTypes.func.isRequired,\r\n    instances: PropTypes.array,\r\n    oneColumn: PropTypes.bool,\r\n    showError: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(SceneForm);","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\n// own components\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\n// icons\r\nimport {AiOutlineClockCircle as IconClock} from 'react-icons/ai';\r\nimport {MdDelete as IconDelete} from 'react-icons/md';\r\nimport {MdAdd as IconAdd} from 'react-icons/md';\r\nimport {MdPlayArrow as IconPlay} from 'react-icons/md';\r\nimport {FaFolder as IconFolderClosed} from 'react-icons/fa';\r\nimport {FaFolderOpen as IconFolderOpened} from 'react-icons/fa';\r\nimport ClearIcon from '@material-ui/icons/Close';\r\nimport IconExpandAll from '@material-ui/icons/ExpandMore';\r\nimport IconCollapseAll from '@material-ui/icons/ExpandLess';\r\nimport ListIcon from '@material-ui/icons/Menu';\r\n\r\nconst TRUE_COLOR       = '#90ee90';\r\nconst FALSE_COLOR      = '#ff9999';\r\nconst TRUE_DARK_COLOR  = '#528952';\r\nconst FALSE_DARK_COLOR = '#774747';\r\nconst UNCERTAIN_COLOR  = '#bfb7be';\r\n\r\nconst styles = theme => ({\r\n    memberTrueFalse: {\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n        fontSize: 'initial',\r\n        fontWeight: 'initial',\r\n        margin: '0 ' + theme.spacing(1) + 'px',\r\n        textAlign: 'right',\r\n        whiteSpace: 'nowrap',\r\n        maxWidth: 300,\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    memberTrue: {\r\n        backgroundColor: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    memberFalse: {\r\n        backgroundColor: 'pink',\r\n    },\r\n    memberUncertain: {\r\n        color: '#FFF',\r\n        backgroundColor: '#808080',\r\n    },\r\n    memberCard: {\r\n        padding: 4,\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    memberFolder: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    guttersZero: {\r\n        padding: 0,\r\n    },\r\n    sceneTitle: {\r\n        flexGrow: 1,\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    sceneSubTitle: {\r\n        fontSize: 'small',\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n    },\r\n    sceneTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    sceneFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n    },\r\n    sceneUncertain: {\r\n        background: UNCERTAIN_COLOR,\r\n    },\r\n    btnTestTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n        marginRight: theme.spacing(1),\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    btnTestFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    btnExpandAll: {\r\n        float: 'right'\r\n    },\r\n    btnCollapseAll: {\r\n        float: 'right'\r\n    },\r\n    smallOnTrueFalse: {\r\n        fontSize: 'small',\r\n        textAlign: 'right',\r\n        width: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    stateValueTrue: {\r\n        color: '#60a060',\r\n        fontWeight: 'bold',\r\n    },\r\n    stateValueFalse: {\r\n        color: '#c15454',\r\n        fontWeight: 'bold',\r\n    },\r\n    changed: {\r\n        position: 'relative',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            width: 6,\r\n            height: 6,\r\n            borderRadius: 6,\r\n            background: '#FF0000',\r\n            position: 'absolute',\r\n            top: 5,\r\n            right: 5,\r\n        },\r\n    },\r\n    memberDesc: {\r\n        display: 'inline-block',\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n        marginLeft: 50,\r\n    },\r\n    memberTitle: {\r\n        fontSize: 14,\r\n        fontWeight: 'bold',\r\n        marginLeft: 50,\r\n    },\r\n    memberToolbar: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        minHeight: 72,\r\n    },\r\n    memberButtons: {\r\n        textAlign: 'right',\r\n        position: 'absolute',\r\n        top: 2,\r\n        right: 2,\r\n    },\r\n    width100WithButton: {\r\n        width: 'calc(100% - 48px)',\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n    testButtons: {\r\n        minHeight: 48,\r\n    },\r\n    setValue: {\r\n        width: 'calc(70% - ' + (70 + theme.spacing(1)) + 'px)',\r\n        minWidth: 100,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    setTolerance: {\r\n        width: 'calc(30% - ' + (70 + theme.spacing(1)) + 'px)',\r\n        minWidth: 100,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    disabled: {\r\n        opacity: 0.3\r\n    },\r\n    instanceNotActive: {\r\n        marginLeft: theme.spacing(1),\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n        color: '#FF0000',\r\n    },\r\n    fromId: {\r\n        marginTop: 8,\r\n    },\r\n});\r\n\r\nclass SceneMembersForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let openedMembers = window.localStorage.getItem('Scenes.openedMembers') || '[]';\r\n        try {\r\n            openedMembers = JSON.parse(openedMembers);\r\n        } catch (e) {\r\n            openedMembers = [];\r\n        }\r\n\r\n        this.state = {\r\n            states: {},\r\n            openedMembers,\r\n            objectTypes: {},\r\n            objectNames: {},\r\n            members: JSON.parse(JSON.stringify(props.members)),\r\n            easy: props.easy,\r\n            writeSceneState: '',\r\n            deleteDialog: null,\r\n            onFalseEnabled: props.onFalseEnabled,\r\n            virtualGroup: props.virtualGroup,\r\n            sceneEnabled: props.sceneEnabled,\r\n            selectedSceneChanged: props.selectedSceneChanged,\r\n            engineId: props.engineId,\r\n            suppressDeleteConfirm: false,\r\n            showSelectValueIdDialog: false,\r\n            showSelectValueIdDialogFor: null,\r\n        };\r\n\r\n        this.delButtonRef = React.createRef();\r\n\r\n        this.engineId = this.state.engineId;\r\n\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.readObjects()\r\n            .then(newState =>\r\n                this.setState(newState, () => {\r\n                    // subscribe on scene state\r\n                    this.props.socket.subscribeState(this.props.sceneId, this.memberStateChange);\r\n                    this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n                    // subscribe on all states\r\n                    this.state.members.forEach(member =>\r\n                        member.id && this.props.socket.subscribeState(member.id, this.memberStateChange))\r\n                }));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.unsubscribeState(this.props.sceneId, this.memberStateChange);\r\n        this.state.engineId && this.props.socket.unsubscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n        this.state.members.forEach(member =>\r\n            this.props.socket.unsubscribeState(member.id, this.memberStateChange));\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const newState = {};\r\n        let changed = false;\r\n\r\n        if (props.onFalseEnabled !== state.onFalseEnabled) {\r\n            newState.onFalseEnabled = props.onFalseEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.virtualGroup !== state.virtualGroup) {\r\n            newState.virtualGroup = props.virtualGroup;\r\n            changed = true;\r\n        }\r\n        if (props.selectedSceneChanged !== state.selectedSceneChanged) {\r\n            newState.selectedSceneChanged = props.selectedSceneChanged;\r\n            changed = true;\r\n        }\r\n        if (props.sceneEnabled !== state.sceneEnabled) {\r\n            newState.sceneEnabled = props.sceneEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.engineId !== state.engineId) {\r\n            newState.engineId = props.engineId;\r\n            changed = true;\r\n        }\r\n        if (props.easy !== state.easy) {\r\n            newState.easy = props.easy;\r\n            changed = true;\r\n        }\r\n\r\n        return changed ? newState : null;\r\n    }\r\n\r\n    onDragEnd(result) {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n        const members = JSON.parse(JSON.stringify(this.state.members));\r\n        const [removed] = members.splice(result.source.index, 1);\r\n        members.splice(result.destination.index, 0, removed);\r\n\r\n        this.setStateWithParent({members});\r\n    }\r\n\r\n    readObjects() {\r\n        if (this.state.members) {\r\n            return Promise.all(\r\n                this.state.members.map(member =>\r\n                    this.props.socket.getObject(member.id)))\r\n                .then(results => {\r\n                    const objectTypes = {};\r\n                    const objectNames = {};\r\n                    results.forEach(obj => {\r\n                        if (obj && obj.common && obj.common.type) {\r\n                            objectTypes[obj._id] = obj.common.type;\r\n                            objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, false);\r\n                        }\r\n                    });\r\n\r\n                    return {objectTypes, objectNames};\r\n                })\r\n                .catch(e => this.props.showError(e));\r\n        } else {\r\n            return Promise.resolve({});\r\n        }\r\n    }\r\n\r\n    memberStateChange = (id, state) => {\r\n        const states = JSON.parse(JSON.stringify(this.state.states));\r\n        states[id] = state ? state.val : null;\r\n        const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n\r\n        if (!objectTypes[id] && states[id] !== null && states[id] !== undefined) {\r\n            objectTypes[id] = typeof states[id];\r\n        }\r\n\r\n        if (objectTypes[id] === 'boolean') {\r\n            if (states[id] === 'true') {\r\n                states[id] = true;\r\n            }\r\n            if (states[id] === 'false') {\r\n                states[id] = false;\r\n            }\r\n        } else if (objectTypes[id] === 'number') {\r\n            states[id] = parseFloat(states[id]);\r\n        }\r\n\r\n        this.setState({states, objectTypes});\r\n    };\r\n\r\n    createSceneMembers = ids => {\r\n        this.setState({showDialog: false}, () => {\r\n            if (ids.length) {\r\n                const openedMembers = [...this.state.openedMembers];\r\n                const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n                const objectNames = JSON.parse(JSON.stringify(this.state.objectNames));\r\n                const members     = JSON.parse(JSON.stringify(this.state.members));\r\n\r\n                Promise.all(ids.map(id =>\r\n                    // Read type of state\r\n                    this.props.socket.getObject(id)\r\n                        .then(obj => {\r\n                            if (!obj) {\r\n                                return;\r\n                            }\r\n\r\n                            const template = {\r\n                                id,\r\n                                setIfTrue: null,\r\n                                setIfFalse: null,\r\n                                stopAllDelays: true,\r\n                                desc: null,\r\n                                disabled: false,\r\n                                delay: 0\r\n                            };\r\n\r\n                            if (obj) {\r\n                                objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, true);\r\n                            }\r\n\r\n\r\n                            if (obj && obj.common && obj.common.type) {\r\n                                objectTypes[id] = obj.common.type;\r\n\r\n                                if (objectTypes[id] === 'boolean') {\r\n                                    template.setIfTrue = true;\r\n                                    if (this.state.onFalseEnabled) {\r\n                                        template.setIfFalse = false;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            members.push(template);\r\n\r\n                            // open added state\r\n                            openedMembers.push(id);\r\n                        })\r\n                        .then(() => this.setStateWithParent({objectTypes, objectNames, members, openedMembers}, () =>\r\n                            // Subscribe on all new members\r\n                            ids.forEach(id => this.props.socket.subscribeState(id, this.memberStateChange)))\r\n                        )\r\n                    )\r\n                )\r\n                    .catch(e => this.props.showError(e));\r\n            } else {\r\n                // Show alert\r\n                this.props.showError(I18n.t('Unknown error!'));\r\n            }\r\n        });\r\n    };\r\n\r\n    deleteSceneMember = id => {\r\n        let members = JSON.parse(JSON.stringify(this.state.members));\r\n\r\n        for (let i = 0; i < members.length; i++) {\r\n            if (members[i].id === id) {\r\n                members.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        this.setStateWithParent({members, deleteDialog: null}, () =>\r\n            this.props.socket.unsubscribeState(id, this.memberStateChange));\r\n    };\r\n\r\n    setStateWithParent(newState, cb) {\r\n        const that = this;\r\n        this.setState(newState, () =>\r\n            this.props.updateSceneMembers(that.state.members, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n            imagePrefix={'../..'}\r\n            key=\"selectDialogMembers\"\r\n            socket={ this.props.socket }\r\n            dialogName=\"memberEdit\"\r\n            multiSelect={ true }\r\n            title={ I18n.t('Select for ') }\r\n            selected={ null }\r\n            onOk={ id => this.createSceneMembers(id) }\r\n            onClose={ () => this.setState({showDialog: false}) }\r\n        /> : null;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        this.state.deleteDialog && setTimeout(() => {\r\n            if (this.delButtonRef.current) {\r\n                this.delButtonRef.current.focus();\r\n            }\r\n        }, 50);\r\n    }\r\n\r\n    renderDeleteDialog() {\r\n        if (this.state.deleteDialog === null) {\r\n            return;\r\n        }\r\n\r\n        return <Dialog\r\n            open={ true }\r\n            key=\"deleteDialog\"\r\n            onClose={ () =>\r\n                this.setState({deleteDialog: null}) }\r\n            >\r\n                <DialogTitle>{ I18n.t('Are you sure for delete this state?') }</DialogTitle>\r\n                <DialogContent>\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={this.state.suppressDeleteConfirm} onChange={() => this.setState({suppressDeleteConfirm: !this.state.suppressDeleteConfirm})} />}\r\n                        label={I18n.t('Suppress confirmation for next 5 minutes')}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: null}) }>\r\n                        {I18n.t('Cancel')}\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" ref={this.delButtonRef} onClick={ e => {\r\n                        if (this.state.suppressDeleteConfirm) {\r\n                            window.localStorage.setItem('scenes.suppressDeleteConfirm', Date.now().toString());\r\n                        }\r\n                        this.deleteSceneMember(this.state.deleteDialog);\r\n                    } }>\r\n                        { I18n.t('Delete') }\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>;\r\n    };\r\n\r\n    renderSelectStateIdDialog() {\r\n        if (!this.state.showSelectValueIdDialog) {\r\n            return null;\r\n        } else {\r\n            let setValue;\r\n            if (this.state.showSelectValueIdDialog === 'true') {\r\n                setValue = this.state.members[this.state.showSelectValueIdDialogFor].setIfTrue;\r\n            } else {\r\n                setValue = this.state.members[this.state.showSelectValueIdDialogFor].setIfFalse;\r\n            }\r\n            const m = typeof setValue === 'string' && setValue.match(/^{{([^}]*)}}$/);\r\n            if (m) {\r\n                setValue = m[1];\r\n            }\r\n\r\n            return <DialogSelectID\r\n                imagePrefix={'../..'}\r\n                key=\"selectDialogMember\"\r\n                socket={ this.props.socket }\r\n                dialogName=\"memberEdit\"\r\n                multiSelect={ false }\r\n                title={ I18n.t('Select for ') + (this.state.showSelectValueIdDialog === 'true' ? 'TRUE' : 'FALSE') }\r\n                selected={ setValue }\r\n                onOk={ id => {\r\n                    if (id) {\r\n                        const index = this.state.showSelectValueIdDialogFor;\r\n                        const members = JSON.parse(JSON.stringify(this.state.members));\r\n                        if (this.state.showSelectValueIdDialog === 'true') {\r\n                            members[index].setIfTrue = '{{' + id + '}}';\r\n                        } else {\r\n                            members[index].setIfFalse = '{{' + id + '}}';\r\n                        }\r\n\r\n                        this.setState({showSelectValueIdDialog: false, showSelectValueIdDialogFor: null}, () =>\r\n                            this.setStateWithParent({members}));\r\n                    }\r\n                }}\r\n                onClose={ () => this.setState({showSelectValueIdDialog: false, showSelectValueIdDialogFor: null}) }\r\n            />;\r\n        }\r\n    }\r\n\r\n    renderSetValue(classes, index, member, onFalseEnabled, isTrue) {\r\n        let labelSetValue;\r\n        let labelTolerance;\r\n        let setValue;\r\n        let setValueTolerance;\r\n        if (isTrue) {\r\n            setValue = member.setIfTrue;\r\n        } else {\r\n            setValue = member.setIfFalse;\r\n        }\r\n\r\n        const m = typeof setValue === 'string' && setValue.match(/^{{([^}]*)}}$/);\r\n        let fromState = false;\r\n        if (m) {\r\n            setValue = m[1];\r\n            fromState = true;\r\n        }\r\n\r\n        if (isTrue) {\r\n            if (fromState) {\r\n                labelSetValue = onFalseEnabled ? I18n.t('From ID by TRUE') : I18n.t('From ID');\r\n            } else {\r\n                labelSetValue = onFalseEnabled ? I18n.t('Setpoint by TRUE') : I18n.t('Setpoint');\r\n            }\r\n            labelTolerance = (onFalseEnabled ? I18n.t('Tolerance by TRUE') : I18n.t('Tolerance'));\r\n            setValueTolerance = member.setIfTrueTolerance;\r\n        } else {\r\n            labelSetValue = fromState ? I18n.t('From ID by FALSE') :I18n.t('Setpoint by FALSE');\r\n            labelTolerance = I18n.t('Tolerance by FALSE');\r\n            setValueTolerance = member.setIfFalseTolerance;\r\n        }\r\n\r\n\r\n        return <Box className={ classes.p }>\r\n            {!this.state.easy || fromState ? <FormControlLabel\r\n                classes={{root: classes.fromId}}\r\n                control={\r\n                    <Switch\r\n                        checked={fromState}\r\n                        onChange={e => {\r\n                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                            if (e.target.checked) {\r\n                                if (isTrue) {\r\n                                    members[index].setIfTrue = '{{}}';\r\n                                } else {\r\n                                    members[index].setIfFalse = '{{}}';\r\n                                }\r\n                            } else {\r\n                                if (isTrue) {\r\n                                    members[index].setIfTrue = null;\r\n                                } else {\r\n                                    members[index].setIfFalse = null;\r\n                                }\r\n                            }\r\n                            this.setStateWithParent({members});\r\n                        }}\r\n                    />\r\n                }\r\n                label=\"From ID\"\r\n            /> : null }\r\n            { !fromState && this.state.objectTypes[member.id] === 'boolean' ?\r\n                <FormControl className={ classes.setValue }>\r\n                    <InputLabel>{ labelSetValue }</InputLabel>\r\n                    <Select\r\n                        value={ setValue === true || setValue === 'true' ? 'true' : (setValue === false || setValue === 'false' ? 'false' : 'null')}\r\n                        onChange={ e => {\r\n                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                            if (isTrue) {\r\n                                members[index].setIfTrue = e.target.value === 'true' ? true : (e.target.value === 'false' ? false : null);\r\n                            } else {\r\n                                members[index].setIfFalse = e.target.value === 'true' ? true : (e.target.value === 'false' ? false : null);\r\n                            }\r\n\r\n                            this.setStateWithParent({members});\r\n                        } }\r\n                    >\r\n                        <MenuItem value=\"false\">FALSE</MenuItem>\r\n                        <MenuItem value=\"true\">TRUE</MenuItem>\r\n                        <MenuItem value=\"null\">{I18n.t('NOT CHANGE')}</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n                :\r\n                <React.Fragment>\r\n                    {fromState ?\r\n                        <TextField\r\n                            fullWidth\r\n                            InputLabelProps={{shrink: true}}\r\n                            label={labelSetValue}\r\n                            value={setValue || ''}\r\n                            readOnly\r\n                            className={classes.setValue}\r\n                            InputProps={{\r\n                                endAdornment:\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => this.setState({showSelectValueIdDialog: isTrue ? 'true' : 'false', showSelectValueIdDialogFor: index})}>\r\n                                        <ListIcon/>\r\n                                    </IconButton>,\r\n                            }}\r\n                        />\r\n                        :\r\n                        <TextField\r\n                            fullWidth\r\n                            InputLabelProps={{shrink: true}}\r\n                            label={labelSetValue}\r\n                            value={setValue === undefined || setValue === null ? '' : setValue}\r\n                            className={classes.setValue}\r\n                            InputProps={{\r\n                                endAdornment: setValue ?\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={() => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            if (isTrue) {\r\n                                                members[index].setIfTrue = null;\r\n                                            } else {\r\n                                                members[index].setIfFalse = null;\r\n                                            }\r\n                                            this.setStateWithParent({members});\r\n                                        }}>\r\n                                        <ClearIcon/>\r\n                                    </IconButton>\r\n                                    : undefined,\r\n                            }}\r\n                            onChange={e => {\r\n                                const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                if (this.state.objectTypes[member.id] === 'number') {\r\n                                    if (isTrue) {\r\n                                        members[index].setIfTrue = parseFloat(e.target.value.replace(',', '.'));\r\n                                    } else {\r\n                                        members[index].setIfFalse = parseFloat(e.target.value.replace(',', '.'));\r\n                                    }\r\n                                } else {\r\n                                    if (isTrue) {\r\n                                        members[index].setIfTrue = e.target.value;\r\n                                    } else {\r\n                                        members[index].setIfFalse = e.target.value;\r\n                                    }\r\n                                }\r\n\r\n                                this.setStateWithParent({members});\r\n                            }}\r\n                        />\r\n                    }\r\n\r\n                    {!this.state.easy && this.state.objectTypes[member.id] !== 'boolean' ? <TextField\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ '± ' + labelTolerance }\r\n                        value={ setValueTolerance === undefined || setValueTolerance === null ? '' : setValueTolerance }\r\n                        title={ I18n.t('Absolute value, not percent') }\r\n                        className={ classes.setTolerance }\r\n                        InputProps={{\r\n                            endAdornment: setValueTolerance ?\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    onClick={() => {\r\n                                        const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                        if (isTrue) {\r\n                                            members[index].setIfTrueTolerance = null;\r\n                                        } else {\r\n                                            members[index].setIfFalseTolerance = null;\r\n                                        }\r\n                                        this.setStateWithParent({members});\r\n                                    }}>\r\n                                    <ClearIcon />\r\n                                </IconButton>\r\n                                : undefined,\r\n                        }}\r\n                        onChange={ e => {\r\n                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                            if (isTrue) {\r\n                                members[index].setIfTrueTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                            } else {\r\n                                members[index].setIfFalseTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                            }\r\n                            this.setStateWithParent({members});\r\n                        } }/> : null}\r\n                </React.Fragment>\r\n            }\r\n        </Box>;\r\n    }\r\n\r\n    renderMember = (member, index) => {\r\n        let value = null;\r\n        const classes = this.props.classes;\r\n        if (this.state.states[member.id] !== undefined && this.state.states[member.id] !== null) {\r\n            let _valStr = this.state.states[member.id].toString();\r\n\r\n            if (_valStr === 'true') {\r\n                _valStr = 'TRUE';\r\n            } else if (_valStr === 'false') {\r\n                _valStr = 'FALSE';\r\n            }\r\n\r\n            if (member.setIfTrueTolerance && Math.abs(this.state.states[member.id] - member.setIfTrue) <= member.setIfTrueTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (this.state.states[member.id] === member.setIfTrue) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && member.setIfFalseTolerance && Math.abs(this.state.states[member.id] - member.setIfFalse) <= member.setIfFalseTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && this.state.states[member.id] === member.setIfFalse) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberUncertain) }>{ _valStr }</div>;\r\n            }\r\n        }\r\n\r\n        const opened = this.state.openedMembers.includes(member.id);\r\n        const onFalseEnabled = !this.state.virtualGroup && this.state.onFalseEnabled;\r\n        let setIfTrueVisible = true;\r\n\r\n        let setIfTrue = member.setIfTrue;\r\n        if (setIfTrue === undefined || setIfTrue === null) {\r\n            setIfTrue = '';\r\n            setIfTrueVisible = false;\r\n        } else {\r\n            if (setIfTrue === true) {\r\n                setIfTrue = 'TRUE';\r\n            } else if (setIfTrue === false) {\r\n                setIfTrue = 'FALSE';\r\n            } else {\r\n                if (member.setIfTrueTolerance) {\r\n                    setIfTrue = setIfTrue + '±' + member.setIfTrueTolerance;\r\n                } else {\r\n                    setIfTrue = setIfTrue.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        const varType =  this.state.objectTypes[member.id];\r\n\r\n        if (onFalseEnabled && setIfTrueVisible && setIfTrue === '' && (varType === 'number' || varType === 'boolean')) {\r\n            setIfTrueVisible = false;\r\n        }\r\n\r\n        let setIfFalse = member.setIfFalse;\r\n        let setIfFalseVisible = onFalseEnabled;\r\n        if (setIfFalse === undefined || setIfFalse === null) {\r\n            setIfFalse = '';\r\n            setIfFalseVisible = false;\r\n        } else {\r\n            if (setIfFalse === true) {\r\n                setIfFalse = 'TRUE';\r\n            } else if (setIfFalse === false) {\r\n                setIfFalse = 'FALSE';\r\n            } else {\r\n                if (member.setIfFalseTolerance) {\r\n                    setIfFalse = setIfFalse + '±' + member.setIfFalseTolerance;\r\n                } else {\r\n                    setIfFalse = setIfFalse.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (setIfFalseVisible && setIfFalse === '' && (varType === 'number' || varType === 'boolean')) {\r\n            setIfFalseVisible = false;\r\n        }\r\n\r\n        // calculate enabled states\r\n        let delay = 0;\r\n        let stacked = false;\r\n        for (let u = 0; u < index; u++) {\r\n            if (!this.state.members[u].disabled) {\r\n                if (this.state.members[u].stackNextDelays) {\r\n                    stacked = true;\r\n                }\r\n                if (stacked) {\r\n                    delay += (this.state.members[u].delay || 0);\r\n                }\r\n                delay += this.props.intervalBetweenCommands;\r\n            }\r\n        }\r\n\r\n        delay += (member.delay || 0);\r\n\r\n        return <Paper key={ member.id + '_' + index } className={ clsx(classes.memberCard, member.disabled && classes.disabled) }>\r\n            <div className={ classes.memberToolbar }>\r\n                <IconButton className={ classes.memberFolder} title={ I18n.t('Edit') } onClick={ () => {\r\n                    const openedMembers = [...this.state.openedMembers];\r\n                    const pos = openedMembers.indexOf(member.id);\r\n                    if (pos !== -1) {\r\n                        openedMembers.splice(pos, 1);\r\n                    } else {\r\n                        openedMembers.push(member.id);\r\n                        openedMembers.sort();\r\n                    }\r\n                    window.localStorage.setItem('Scenes.openedMembers', JSON.stringify(openedMembers));\r\n                    this.setState({openedMembers});\r\n                }}>\r\n                    { opened ? <IconFolderOpened/> : <IconFolderClosed/> }\r\n                </IconButton>\r\n                <div className={ classes.memberTitle }>{ member.id }</div>\r\n                <div className={ classes.memberDesc }>{ member.desc || this.state.objectNames[member.id] || '' }</div>\r\n                <div className={ classes.memberButtons }>\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 5 }} aria-label=\"Delete\" title={I18n.t('Delete')}\r\n                        onClick={ () => {\r\n                            const suppressDeleteConfirm = window.localStorage.getItem('scenes.suppressDeleteConfirm');\r\n                            if (suppressDeleteConfirm) {\r\n                                if (Date.now() - parseInt(suppressDeleteConfirm, 10) < 300000) {\r\n                                    this.deleteSceneMember(member.id);\r\n                                } else {\r\n                                    window.localStorage.removeItem('scenes.suppressDeleteConfirm');\r\n                                    this.setState({deleteDialog: member.id});\r\n                                }\r\n                            } else {\r\n                                this.setState({deleteDialog: member.id, suppressDeleteConfirm: false});\r\n                            }\r\n                        } }>\r\n                        <IconDelete/>\r\n                    </IconButton>\r\n                    <Switch\r\n                        checked={ !member.disabled }\r\n                        onChange={ e => {\r\n                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                            members[index].disabled = !e.target.checked;\r\n                            this.setStateWithParent({members});\r\n                        }}\r\n                        name={ member.id }\r\n                    />\r\n                    { value }\r\n                </div>\r\n            </div>\r\n            <div>{ member.desc } { !member.disabled && (this.props.intervalBetweenCommands || member.delay) ?\r\n                <span> <IconClock/> { delay + I18n.t('ms') + ' ' + I18n.t('from scene start')}</span> : null }\r\n            </div>\r\n            {\r\n                opened ?\r\n                    <div>\r\n                        {/*<Box className={classes.p}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}} label={I18n.t('Description')}\r\n                                value={member.desc || ''}\r\n                                onChange={e => {\r\n                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                    members[index].desc = e.target.value;\r\n                                    this.setStateWithParent({members});\r\n                                }}\r\n                            />\r\n                        </Box>*/ }\r\n                        { !this.state.virtualGroup ? this.renderSetValue(classes, index, member, onFalseEnabled, true) : null }\r\n                        { !this.state.virtualGroup && this.state.onFalseEnabled ? this.renderSetValue(classes, index, member, true, false) : null}\r\n                        {!this.state.easy ?\r\n                            <Box className={classes.p}>\r\n                                <Grid container spacing={4}>\r\n                                    <Grid item xs={12} sm={4}>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            InputLabelProps={{shrink: true}}\r\n                                            label={I18n.t('Delay (ms)')}\r\n                                            title={I18n.t(\r\n                                                'Additionally to the interval between commands. E.g. if the interval %s, this state will be set after %s ms from scene start',\r\n                                                this.props.intervalBetweenCommands,\r\n                                                this.props.intervalBetweenCommands * index + (member.delay || 0)\r\n                                            )}\r\n                                            helperText={stacked ? I18n.t('from previous state') : I18n.t('from start of scene')}\r\n                                            value={member.delay || 0}\r\n                                            min={0}\r\n                                            type=\"number\"\r\n                                            onChange={e => {\r\n                                                const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                members[index].delay = parseInt(e.target.value, 10);\r\n                                                this.setStateWithParent({members});\r\n                                            }}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={4}>\r\n                                        {!stacked ? <FormControlLabel\r\n                                            label={I18n.t('Stack next delays')}\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={!!member.stackNextDelays}\r\n                                                    onChange={e => {\r\n                                                        const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                        members[index].stackNextDelays = e.target.checked;\r\n                                                        this.setStateWithParent({members});\r\n                                                    }}\r\n                                                />\r\n                                            }/> : null}\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={4}>\r\n                                        <FormControlLabel\r\n                                            label={I18n.t('Stop already started commands')}\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    checked={member.stopAllDelays}\r\n                                                    onChange={e => {\r\n                                                        const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                        members[index].stopAllDelays = e.target.checked;\r\n                                                        this.setStateWithParent({members});\r\n                                                    }}\r\n                                                />\r\n                                            }/>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box> : null\r\n                        }\r\n                        {!this.state.easy ?\r\n                            <Box className={classes.p}>\r\n                                <FormControlLabel\r\n                                    label={I18n.t('Do not overwrite state if it has the required value')}\r\n                                    title={\r\n                                        I18n.t('For example, if the value is already at \"%s\" and \"%s\" is the setpoint, then write the value anyway if this checkbox is activated.',\r\n                                            member.setIfTrue === undefined || member.setIfTrue === null ? 'null' : member.setIfTrue.toString(),\r\n                                            member.setIfTrue === undefined || member.setIfTrue === null ? 'null' : member.setIfTrue.toString())\r\n                                    }\r\n                                    control={\r\n                                        <Checkbox\r\n                                            checked={!!member.doNotOverwrite}\r\n                                            onChange={e => {\r\n                                                const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                members[index].doNotOverwrite = e.target.checked;\r\n                                                this.setStateWithParent({members});\r\n                                            }}\r\n                                        />\r\n                                    }/>\r\n                            </Box> : null\r\n                        }\r\n                    </div> :\r\n                    (!this.state.virtualGroup ? <div className={ classes.smallOnTrueFalse }>\r\n                        { setIfTrueVisible ? `${onFalseEnabled ? I18n.t('Set if TRUE') : I18n.t('Setpoint')}: ` : ''}\r\n                        { setIfTrueVisible ? <span className={ classes.stateValueTrue }>{ setIfTrue }</span> : null }\r\n                        { setIfFalseVisible && onFalseEnabled ? `${setIfTrueVisible ? ' / ' : ''}${I18n.t('Set if FALSE')}: ` : null}\r\n                        { setIfFalseVisible && onFalseEnabled ? <span className={ classes.stateValueFalse }>{ setIfFalse }</span> : null}\r\n                    </div> : <div style={ {height: 8} }/>)\r\n            }\r\n        </Paper>\r\n    };\r\n\r\n    onWriteScene(val) {\r\n        if (val === 'true') {\r\n            val = true;\r\n        } else if (val === 'false') {\r\n            val = false;\r\n        } else if (typeof val === 'string' && parseFloat(val.replace(',', '.')).toString() === val) {\r\n            val = parseFloat(val.replace(',', '.'));\r\n        }\r\n\r\n        this.props.socket.setState(this.props.sceneId, val)\r\n            .catch(e => this.props.showError(e));\r\n    }\r\n\r\n    getItemStyle = (isDragging, draggableStyle) => ({\r\n        // some basic styles to make the items look a bit nicer\r\n        userSelect: 'none',\r\n        background: isDragging ? 'lightgreen' : 'inherit',\r\n\r\n        // styles we need to apply on draggables\r\n        ...draggableStyle\r\n    });\r\n\r\n    getListStyle = isDraggingOver => ({background: isDraggingOver ? 'lightblue' : 'inherit'});\r\n\r\n    render = () => {\r\n        let sceneState = this.state.states[this.props.sceneId];\r\n        if (this.state.selectedSceneChanged) {\r\n            sceneState = I18n.t('Save scene before test');\r\n        } else if (sceneState === undefined || sceneState === null) {\r\n            sceneState = '';\r\n        }\r\n\r\n        if (this.engineId !== this.state.engineId) {\r\n            this.engineId && this.props.socket.unsubscribeState(this.engineId + '.alive', this.memberStateChange);\r\n            this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n            this.engineId = this.state.engineId;\r\n        }\r\n\r\n        const onFalseEnabled =!this.state.virtualGroup && this.state.onFalseEnabled;\r\n\r\n        let result = <div key=\"SceneMembersForm\" className={ clsx(!this.props.oneColumn && this.props.classes.height, this.props.classes.columnContainer) }>\r\n            <Toolbar classes={{ gutters: this.props.classes.guttersZero }}>\r\n                <Typography variant=\"h6\" className={ clsx(this.props.classes.sceneTitle) } >\r\n                    { I18n.t('Scene states') }{ !this.state.states[this.state.engineId + '.alive'] ? <span className={ this.props.classes.instanceNotActive }>{ I18n.t('Instance not active') }</span> : ''}\r\n                    <br/>\r\n                    <span className={ clsx(\r\n                        this.props.classes.sceneSubTitle,\r\n                        !this.state.virtualGroup && sceneState === true && this.props.classes.sceneTrue,\r\n                        !this.state.virtualGroup && sceneState === false && this.props.classes.sceneFalse,\r\n                        !this.state.virtualGroup && sceneState === 'uncertain' && this.props.classes.sceneUncertain,\r\n                    ) }>{ I18n.t('Scene state:') } { sceneState === true ? 'TRUE' : (sceneState === false ? 'FALSE' : sceneState.toString()) }</span>\r\n                </Typography>\r\n                <IconButton title={I18n.t('Add new state')} onClick={() => this.setState({showDialog: true})}>\r\n                    <IconAdd/>\r\n                </IconButton>\r\n            </Toolbar>\r\n            <div className={ clsx(this.props.classes.testButtons, this.props.classes.width100) }>\r\n                {  !this.state.selectedSceneChanged && this.state.virtualGroup ? <TextField\r\n                    className={ this.props.classes.width100WithButton }\r\n                    label={ I18n.t('Write to virtual group') }\r\n                    defaultValue={ sceneState }\r\n                    onKeyUp={e => e.keyCode === 13 && this.onWriteScene(this.state.writeSceneState)}\r\n                    onChange={e => this.setState({writeSceneState: e.target.value}) }\r\n                /> : null}\r\n                { !this.state.selectedSceneChanged && this.state.virtualGroup && this.state.members.length ? <IconButton\r\n                    onClick={e => this.onWriteScene(this.state.writeSceneState) }\r\n                ><IconPlay/></IconButton> : null}\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && !this.state.virtualGroup ? <Button\r\n                    className={ this.props.classes.btnTestTrue }\r\n                    onClick={ () => this.onWriteScene(true) }\r\n                ><IconPlay/>{ !onFalseEnabled ? I18n.t('Test') : I18n.t('Test TRUE') }</Button> : null }\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && onFalseEnabled && this.state.members.length ? <Button\r\n                    className={ this.props.classes.btnTestFalse }\r\n                    onClick={ () => this.onWriteScene(false) }\r\n                ><IconPlay/>{ I18n.t('Test FALSE') }</Button> : null }\r\n                {this.state.members.length > 1 && this.state.openedMembers.length ? <IconButton\r\n                    title={I18n.t('Collapse all')}\r\n                    className={ this.props.classes.btnCollapseAll }\r\n                    onClick={ () => {\r\n                        window.localStorage.setItem('Scenes.openedMembers', '[]');\r\n                        this.setState({openedMembers: []});\r\n                    } }\r\n                ><IconCollapseAll/></IconButton> : null }\r\n                {this.state.members.length > 1 && this.state.openedMembers.length !== this.state.members.length ? <IconButton\r\n                    title={I18n.t('Expand all')}\r\n                    className={ this.props.classes.btnExpandAll }\r\n                    onClick={ () => {\r\n                        const openedMembers = this.state.members.map(member => member.id);\r\n                        window.localStorage.setItem('Scenes.openedMembers', JSON.stringify(openedMembers));\r\n                        this.setState({openedMembers});\r\n                    } }\r\n                ><IconExpandAll/></IconButton> : null }\r\n            </div>\r\n            <DragDropContext onDragEnd={ this.onDragEnd }>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div className={ this.props.classes.scroll }\r\n                             {...provided.droppableProps}\r\n                             ref={ provided.innerRef }\r\n                             style={ this.getListStyle(snapshot.isDraggingOver) }\r\n                        >\r\n                            { this.state.members.map((member, i) =>\r\n                                <Draggable key={ member.id + '_' + i } draggableId={ member.id + '_' + i } index={ i }>\r\n                                    {(provided, snapshot) =>\r\n                                        <div\r\n                                            ref={ provided.innerRef }\r\n                                            {...provided.draggableProps }\r\n                                            {...provided.dragHandleProps }\r\n                                            style={ this.getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            ) }\r\n                                        >{ this.renderMember(member, i) }</div>}\r\n                                </Draggable>\r\n                            )}\r\n                            { provided.placeholder }\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>;\r\n\r\n        return [\r\n            result,\r\n            this.renderDeleteDialog(),\r\n            this.renderSelectIdDialog(),\r\n            this.renderSelectStateIdDialog(),\r\n        ];\r\n    }\r\n}\r\n\r\nSceneMembersForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateSceneMembers: PropTypes.func,\r\n    sceneId: PropTypes.string,\r\n    onFalseEnabled: PropTypes.bool,\r\n    virtualGroup: PropTypes.bool,\r\n    members: PropTypes.array,\r\n    easy: PropTypes.bool,\r\n    sceneEnabled: PropTypes.bool,\r\n    selectedSceneChanged: PropTypes.bool,\r\n    intervalBetweenCommands: PropTypes.number,\r\n    engineId: PropTypes.string,\r\n    oneColumn: PropTypes.bool,\r\n    showError: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(SceneMembersForm);","// Common\nimport React from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Alert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-noconflict/mode-json';\nimport 'ace-builds/src-noconflict/theme-clouds_midnight';\nimport 'ace-builds/src-noconflict/theme-chrome';\nimport 'ace-builds/src-noconflict/ext-language_tools'\n\n// Own\nimport I18n from '@iobroker/adapter-react/i18n';\nimport copy from '@iobroker/adapter-react/Components/copy-to-clipboard';\n\nconst styles = theme => ({\n    divWithoutTitle: {\n        width: '100%',\n        height: '100%',\n        border: '2px solid #00000000',\n    },\n    error: {\n        border: '2px solid #FF0000',\n    },\n});\n\nclass ExportImportDialog extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: props.sceneObj ? JSON.stringify(props.sceneObj, null, 2) : '',\n            error: false,\n            toast: '',\n        };\n    }\n\n    onChange(value) {\n        const newState = {text: value};\n        try {\n            JSON.parse(value);\n            if (this.state.error) {\n                newState.error = false;\n            }\n\n            this.setState(newState);\n        } catch (e) {\n            newState.error = true;\n            this.setState(newState);\n        }\n    }\n\n    renderToast() {\n        return <Snackbar open={ !!this.state.toast } autoHideDuration={ 3000 } onClick={ () => this.setState({ toast: '' }) } onClose={ () => this.setState({ toast: '' }) }>\n            <Alert color=\"info\" severity=\"success\" >{ this.state.toast }</Alert>\n        </Snackbar>;\n    }\n\n    render() {\n        return <Dialog\n            open={ true }\n            onClose={ () => this.props.onClose() }\n            aria-labelledby=\"export-dialog-title\"\n            fullWidth\n            maxWidth=\"lg\"\n            fullScreen={ true }\n            aria-describedby=\"export-dialog-description\"\n        >\n            <DialogTitle id=\"export-dialog-title\">{ this.props.isImport ? I18n.t('Import scene') : I18n.t('Export scene') }</DialogTitle>\n            <DialogContent>\n                <div className={ clsx(this.props.classes.divWithoutTitle, this.state.error && this.props.classes.error) }>\n                    <AceEditor\n                        autoFocus\n                        mode=\"json\"\n                        width=\"100%\"\n                        height=\"100%\"\n                        onLoad={editor => {\n                            this.codeEditor = editor;\n                            this.codeEditor.focus();\n                        }}\n                        theme={ this.props.themeType === 'dark' ? 'clouds_midnight' : 'chrome' }\n                        onChange={ newValue => this.onChange(newValue) }\n                        value={ this.state.text || '' }\n                        name=\"UNIQUE_ID_OF_DIV\"\n                        fontSize={ 14 }\n                        readOnly={ !this.props.isImport }\n                        editorProps={{ $blockScrolling: true }}\n                    />\n                </div>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={ () => this.props.onClose() } autoFocus={ !this.props.isImport }>\n                    { I18n.t('Close') }\n                </Button>\n                { this.props.isImport ?\n                    <Button\n                        disabled={ !this.state.text || this.state.error }\n                        onClick={ () => this.props.onClose(JSON.parse(this.state.text)) }\n                        color=\"primary\"\n                    >\n                        { I18n.t('Import') }\n                    </Button>\n                    :\n                    <Button onClick={ () => {\n                        copy(this.state.text);\n                        this.setState({ toast: I18n.t('Copied') });\n                        setTimeout(() => this.props.onClose(), 500);\n                    } } color=\"primary\" autoFocus>\n                        { I18n.t('Copy to clipboard') }\n                    </Button>}\n                { this.renderToast() }\n            </DialogActions>\n        </Dialog>;\n    }\n}\n\nExportImportDialog.propTypes = {\n    classes: PropTypes.object,\n    sceneObj: PropTypes.object,\n    themeType: PropTypes.string,\n    onClose: PropTypes.func,\n    isImport: PropTypes.bool,\n};\n\nexport default withStyles(styles)(ExportImportDialog);","import React from 'react'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\nimport { useDrag, useDrop, DndProvider as DragDropContext } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend'\n\nimport List from '@material-ui/core/List';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport I18n from '@iobroker/adapter-react/i18n';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport {FaFolder as IconFolderClosed, FaFolderOpen as IconFolderOpened, FaScroll as IconScript} from 'react-icons/fa';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Switch from '@material-ui/core/Switch';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\n// icons\nimport {MdExpandLess as IconCollapse} from 'react-icons/md';\nimport {MdExpandMore as IconExpand} from 'react-icons/md';\nimport {MdModeEdit as IconEdit} from 'react-icons/md';\nimport {MdClose as IconCancel} from 'react-icons/md';\nimport {MdCheck as IconCheck} from 'react-icons/md';\nimport {MdAdd as IconAdd} from 'react-icons/md';\nimport {MdCreateNewFolder as IconFolderAdd} from 'react-icons/md';\nimport {MdSwapVert as IconReorder} from 'react-icons/md';\n\nimport Utils from '@iobroker/adapter-react/Components/Utils';\n\nconst LEVEL_PADDING = 16;\n\nexport const Droppable = (props) => {\n    const { onDrop} = props;\n\n    const [{ isOver, isOverAny}, drop] = useDrop({\n        accept: ['item'],\n        drop: e => isOver ? onDrop(e) : undefined,\n        collect: monitor => ({\n            isOver: monitor.isOver({ shallow: true }),\n            isOverAny: monitor.isOver(),\n        }),\n    });\n\n    return <div ref={drop} className={clsx(isOver && 'js-folder-dragover', isOverAny && 'js-folder-dragging')}>\n        {props.children}\n    </div>;\n};\n\nexport const Draggable = (props) => {\n    const { name } = props;\n    const [{ opacity }, drag] = useDrag({\n        item: {\n            name,\n            type: 'item'\n        },\n        collect: (monitor) => ({\n            opacity: monitor.isDragging() ? 0.3 : 1,\n        }),\n    });\n\n    // About transform: https://github.com/react-dnd/react-dnd/issues/832#issuecomment-442071628\n    return <div ref={drag} style={{ opacity, transform: 'translate3d(0, 0, 0)' }}>\n        {props.children}\n    </div>;\n};\n\nconst styles = theme => ({\n    scroll: {\n        overflowY: 'auto',\n        overflowX: 'hidden',\n        height: '100%',\n        width: '100%',\n    },\n    right: {\n        float: 'right',\n    },\n    heightMinusToolbar: {\n        height: 'calc(100% - 48px)',\n    },\n    mainToolbar: {\n        background: theme.palette.primary.main,\n    },\n    textInput: {\n        display: 'block',\n    },\n    noGutters: {\n        paddingLeft: 0,\n        paddingRight: 0,\n    },\n    noPaddings: {\n        paddingTop: 0,\n        paddingBottom: 0,\n    },\n    itemIcon: {\n        width: 24,\n        height: 24,\n    },\n    itemIconRoot: {\n        minWidth: 24 + theme.spacing(1),\n    },\n    width100: {\n        width: '100%',\n    },\n    leftMenuItem: {\n        display: 'block',\n        borderRadius: 10,\n    },\n    alignRight: {\n        textAlign: 'right',\n    },\n    itemIconFolder: {\n        color: theme.palette.type === 'dark' ? '#ffca2c' : '#ffca2c'\n    },\n    changed: {\n        position: 'relative',\n        '&:after': {\n            content: '\"\"',\n            width: 6,\n            height: 6,\n            borderRadius: 6,\n            background: '#FF0000',\n            position: 'absolute',\n            top: 5,\n            right: 5,\n        },\n    },\n    disabled: {\n        opacity: 0.3\n    },\n    folderItem: {\n        fontWeight: 'bold',\n        cursor: 'pointer',\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\n    },\n    listItemTitle: {\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\n    },\n    listItemSubTitle: {\n        color: theme.palette.type === 'dark' ? '#bababa': '#2a2a2a',\n    },\n    list: {\n        width: '100%',\n        padding: 0,\n    },\n    p: {\n        margin: '1em 0',\n    },\n    folderButtons:  {\n        height: 32,\n    },\n    mainList: {\n        width: 'calc(100% - ' + theme.spacing(1) + 'px)',\n        marginLeft: theme.spacing(1),\n        '& .js-folder-dragover>li.folder-reorder': {\n            background: '#40adff'\n        },\n        '& .js-folder-dragging .folder-reorder': {\n            opacity: 1,\n        },\n        '& .js-folder-dragging .item-reorder': {\n            opacity: 0.3,\n        }\n    }\n});\n\nclass ScenesList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let opened;\n        try {\n            opened = JSON.parse(window.localStorage.getItem('Scenes.opened')) || [];\n        } catch (e) {\n            opened = [];\n        }\n\n        this.state = {\n            opened,\n            search: '',\n            reorder: false,\n            showSearch: false,\n            addFolderDialog: null,\n            addFolderDialogTitle: null,\n            editFolderDialogeditFolderDialog: null,\n            editFolderDialogTitle: null,\n        };\n    }\n\n    onAddFolder(parent, id) {\n        let opened = JSON.parse(JSON.stringify(this.state.opened));\n        opened.push(id);\n        this.setState({addFolderDialog: null, opened}, () =>\n            this.props.onCreateFolder(parent, id));\n    }\n\n    renderAddFolderDialog() {\n        return this.state.addFolderDialog ?\n            <Dialog\n                key=\"addDialog\"\n                open={ !!this.state.addFolderDialog }\n                onClose={ () => this.setState({addFolderDialog: null}) }\n            >\n                <DialogTitle>{I18n.t('Create folder')}</DialogTitle>\n                <DialogContent className={ this.props.classes.p }>\n                    <TextField\n                        autoFocus={true}\n                        label={ I18n.t('Title') }\n                        value={ this.state.addFolderDialogTitle }\n                        onChange={ e =>\n                            this.setState({addFolderDialogTitle: e.target.value.replace(Utils.FORBIDDEN_CHARS, '_').replace(/\\./g, '_')}) }\n                        onKeyUp={e => e.keyCode === 13 && this.onAddFolder(this.state.addFolderDialog, this.state.addFolderDialogTitle) }\n                    />\n                </DialogContent>\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                    <Button variant=\"contained\" onClick={ () => this.setState({addFolderDialog: null}) }>\n                        <IconCancel className={ this.props.classes.buttonIcon }/>\n                        { I18n.t('Cancel') }\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        disabled={!this.state.addFolderDialogTitle || Object.keys(this.props.folders.subFolders).find(name => name === this.state.addFolderDialogTitle)}\n                        onClick={() => this.onAddFolder(this.state.addFolderDialog, this.state.addFolderDialogTitle)}\n                        color=\"primary\" autoFocus\n                    >\n                        <IconCheck className={ this.props.classes.buttonIcon }/>\n                        {I18n.t('Create')}\n                    </Button>\n                </DialogActions>\n            </Dialog> : null;\n    }\n\n    onRenameFolder(folder, newName) {\n        let pos;\n\n        // if selected folder opened, replace its ID in this.state.opened\n        if ((pos = this.state.opened.indexOf(folder.prefix)) !== -1) {\n            const opened = [...this.state.opened];\n            opened.splice(pos, 1);\n            opened.push(newName);\n            opened.sort();\n            this.setState({opened});\n        }\n\n        return this.props.onRenameFolder(this.state.editFolderDialog, this.state.editFolderDialogTitle)\n            .then(() => this.setState({editFolderDialog: null}));\n    }\n\n    renderEditFolderDialog() {\n        if (!this.state.editFolderDialog) {\n            return;\n        }\n\n        const isUnique = !Object.keys(this.props.folders.subFolders).find(folder => folder.id === this.state.editFolderDialogTitle);\n\n        return <Dialog\n            key=\"dialogEdit\"\n            open={ !!this.state.editFolderDialog }\n            onClose={ () => this.setState({editFolderDialog: null}) }\n        >\n            <DialogTitle>{ I18n.t('Edit folder') }</DialogTitle>\n            <DialogContent>\n                <TextField\n                    autoFocus={true}\n                    label={ I18n.t('Title') }\n                    value={ this.state.editFolderDialogTitle }\n                    onChange={ e => this.setState({editFolderDialogTitle: e.target.value.replace(Utils.FORBIDDEN_CHARS, '_').replace(/\\./g, '_')}) }\n                    onKeyUp={e => e.keyCode === 13 && this.onRenameFolder(this.state.editFolderDialog, this.state.editFolderDialogTitle) }\n                />\n            </DialogContent>\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                <Button variant=\"contained\" onClick={ () => this.setState({editFolderDialog: null}) }>\n                    <IconCancel className={ this.props.classes.buttonIcon }/>\n                    { I18n.t('Cancel') }\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    disabled={ !this.state.editFolderDialogTitle || this.state.editFolderDialogTitleOrigin === this.state.editFolderDialogTitle || !isUnique}\n                    onClick={() => this.onRenameFolder(this.state.editFolderDialog, this.state.editFolderDialogTitle)}\n                    color=\"primary\"\n                    autoFocus\n                >\n                    <IconCheck className={ this.props.classes.buttonIcon }/>\n                    { I18n.t('Apply') }\n                </Button>\n            </DialogActions>\n        </Dialog>;\n    }\n\n    toggleFolder(folder) {\n        const opened = [...this.state.opened];\n        const pos = opened.indexOf(folder.prefix);\n        if (pos === -1) {\n            opened.push(folder.prefix);\n        } else {\n            opened.splice(pos, 1);\n\n            // If active scene is inside this folder select the first scene\n            if (Object.keys(folder.scenes).includes(this.props.selectedSceneId)) {\n                // To do ask question\n                if (this.props.selectedSceneChanged) {\n                    this.confirmCb = () => {\n                        this.setState({selectedSceneId: '', selectedSceneData: null, selectedSceneChanged: false, opened});\n                        window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\n                    };\n                    return this.setState({sceneChangeDialog: 'empty'});\n                }\n\n                this.setState({selectedSceneId: '', selectedSceneData: null, selectedSceneChanged: false});\n            }\n        }\n\n        window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\n\n        this.setState({opened});\n    }\n\n    renderTreeScene = (item, level) => {\n        const scene = this.props.scenes[item._id];\n        if (!scene || (this.state.search && !item.common.name.includes(this.state.search))) {\n            return null;\n        }\n\n        level = level || 0;\n\n        const changed = this.props.selectedSceneId && this.props.selectedSceneId === scene._id && this.props.selectedSceneChanged;\n\n        const listItem = <ListItem\n            style={ {paddingLeft: (this.state.reorder ? level : (level - 1)) * LEVEL_PADDING} }\n            key={ item._id }\n            classes={{root: this.props.classes.noPaddings}}\n            selected={ this.props.selectedSceneId ? this.props.selectedSceneId === scene._id : false }\n            button\n            className={ clsx(\n                changed && this.props.classes.changed,\n                !scene.common.enabled && this.props.classes.disabled,\n                this.state.reorder && 'item-reorder'\n            ) }\n            onClick={ () => this.props.onSceneSelect(scene._id) }>\n            <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} }><IconScript className={ this.props.classes.itemIcon }/></ListItemIcon>\n            <ListItemText\n                classes={ {primary: this.props.classes.listItemTitle, secondary: this.props.classes.listItemSubTitle} }\n                primary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) }\n                secondary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}, true) }\n            />\n            {!this.state.reorder ? <ListItemSecondaryAction>\n                {this.state.changingScene === scene._id ?\n                    <CircularProgress size={ 24 }/>\n                    :\n                    <Switch\n                        checked={ scene.common.enabled }\n                        onChange={event => this.props.onSceneEnableDisable(event.target.name) }\n                        name={ scene._id }\n                    />\n                }\n            </ListItemSecondaryAction> : null}\n        </ListItem>;\n\n        if (this.state.reorder) {\n            return <Draggable key={'draggable_' + item._id} name={item._id}>{listItem}</Draggable>;\n        } else {\n            return  listItem;\n        }\n    };\n\n    onDragFinish(source, target) {\n        console.log('Rename ' + source + ' => ' + target);\n        let newId = target + '.' + source.split('.').pop();\n        if (source !== newId) {\n            if (this.props.scenes[newId]) {\n                newId += '_' + I18n.t('copy');\n            }\n            this.props.onMoveScene(source, newId);\n        }\n    }\n\n    renderTree(parent, level) {\n        let result = [];\n        level = level || 0;\n        let opened = this.state.reorder ||(this.state.opened ? this.state.opened.includes(parent.prefix) : false);\n\n        const reactChildren = [];\n        if (parent && (opened || !parent.id)) { // root cannot be closed and have id === ''\n            const values     = Object.values(parent.scenes);\n            const subFolders = Object.values(parent.subFolders);\n\n            // add first sub-folders\n            subFolders\n                .sort((a, b) => a.id > b.id ? 1 : (a.id < b.id ? -1 : 0))\n                .forEach(subFolder =>\n                    reactChildren.push(this.renderTree(subFolder, level + 1)));\n\n            // Add as second scenes\n            if (values.length || subFolders.length) {\n                values\n                    .sort((a, b) => a._id > b._id ? 1 : (a._id < b._id ? -1 : 0))\n                    .forEach(scene =>\n                        reactChildren.push(this.renderTreeScene(scene, level + 1)));\n            } else {\n                reactChildren.push(<ListItem><ListItemText className={ this.props.classes.folderItem}>{ I18n.t('No scenes created yet')}</ListItemText></ListItem>);\n            }\n        }\n\n        // Show folder item\n        if (parent && (parent.id || this.state.reorder)) {\n            const folder = <ListItem\n                key={ parent.prefix }\n                classes={ {gutters: this.props.classes.noGutters, root: this.props.classes.noPaddings} }\n                className={ clsx(this.props.classes.width100, this.props.classes.folderItem, this.state.reorder && 'folder-reorder') }\n                style={ {paddingLeft: (this.state.reorder ? level : (level - 1)) * LEVEL_PADDING} }\n            >\n                <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} } onClick={ () => this.toggleFolder(parent) }>{ opened ?\n                    <IconFolderOpened className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/> :\n                    <IconFolderClosed className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/>\n                }</ListItemIcon>\n                <ListItemText>{ parent.id || I18n.t('Root') }</ListItemText>\n                {!this.state.reorder ? <ListItemSecondaryAction>\n                    {opened ? <IconButton\n                        onClick={() => this.props.onCreateScene(parent.id) }\n                        title={ I18n.t('Create new scene') }\n                    ><IconAdd/></IconButton> : null}\n                    <IconButton\n                        onClick={ () =>\n                            this.setState({\n                                editFolderDialog: parent,\n                                editFolderDialogTitle: parent.id,\n                                editFolderDialogTitleOrigin: parent.id\n                            })\n                        }\n                        title={ I18n.t('Edit folder name') }\n                    ><IconEdit/></IconButton>\n                    <IconButton onClick={ () => this.toggleFolder(parent) } title={ opened ? I18n.t('Collapse') : I18n.t('Expand')  }>\n                        { opened ? <IconExpand/> : <IconCollapse/> }\n                    </IconButton>\n                </ListItemSecondaryAction> : null}\n            </ListItem>;\n\n            if (!this.state.reorder) {\n                result.push(folder);\n            } else {\n                result.push(<Droppable\n                    key={'droppable_' + parent.prefix}\n                    name={parent.prefix}\n                    onDrop={e => this.onDragFinish(e.name, 'scene.0' + (parent.prefix ? '.' : '') + parent.prefix)}\n                >\n                    {folder}\n                </Droppable>);\n            }\n        }\n\n        reactChildren && reactChildren.forEach(r => result.push(r));\n\n        return result;\n    }\n\n    renderListToolbar() {\n        return <Toolbar key=\"toolbar\" variant=\"dense\" className={ this.props.classes.mainToolbar }>\n            {!this.state.reorder ? <IconButton\n                onClick={ () => this.props.onCreateScene() }\n                title={ I18n.t('Create new scene') }\n            ><IconAdd/></IconButton> : null}\n\n                {!this.state.reorder ? <IconButton\n                onClick={ () => this.setState({addFolderDialog: this.props.folders, addFolderDialogTitle: ''}) }\n                title={ I18n.t('Create new folder') }\n            ><IconFolderAdd/></IconButton> : null}\n\n            {!this.state.reorder ? <span className={this.props.classes.right}>\n                <IconButton onClick={() => this.setState({showSearch: !this.state.showSearch}) }>\n                    <SearchIcon/>\n                </IconButton>\n            </span> : null}\n            {this.state.showSearch ?\n                <TextField\n                    value={ this.state.search }\n                    className={ this.props.classes.textInput }\n                    onChange={ e => this.setState({search: e.target.value}) }/>\n                : null\n            }\n            <div style={{flexGrow: 1}}/>\n            {!this.state.showSearch ? <IconButton\n                key=\"reorder\"\n                title={I18n.t('Reorder scenes in folders')}\n                className={this.props.classes.toolbarButtons}\n                style={{color: this.state.reorder ? 'red' : undefined, float: 'right'}}\n                onClick={e => {\n                    e.stopPropagation();\n                    this.setState({reorder: !this.state.reorder});\n                }}\n            ><IconReorder/></IconButton> : null }\n        </Toolbar>;\n    }\n\n    render() {\n        return [\n            this.renderListToolbar(),\n            <div key=\"list\" className={ this.props.classes.heightMinusToolbar }>\n                <DragDropContext backend={HTML5Backend}>\n                    <List className={ clsx(this.props.classes.scroll, this.props.classes.mainList) }>\n                        { this.renderTree(this.props.folders) }\n                    </List>\n                </DragDropContext>\n            </div>,\n            this.renderAddFolderDialog(),\n            this.renderEditFolderDialog()\n        ];\n    }\n}\n\nScenesList.propTypes = {\n    onRenameFolder: PropTypes.func,\n    onCreateScene: PropTypes.func,\n    onCreateFolder: PropTypes.func,\n    onSceneSelect: PropTypes.func,\n    onMoveScene: PropTypes.func,\n    onSceneEnableDisable: PropTypes.func,\n    classes: PropTypes.object,\n    scenes: PropTypes.object,\n    selectedSceneId: PropTypes.string,\n    selectedSceneChanged: PropTypes.bool,\n    theme: PropTypes.object,\n    folders: PropTypes.object,\n};\n\nexport default withStyles(styles)(ScenesList);","// Common\nimport React from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport { withTheme } from '@material-ui/core/styles';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport withWidth from \"@material-ui/core/withWidth\";\n\n// MaterialUi\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Drawer from '@material-ui/core/Drawer';\n\n// Own\nimport Utils from '@iobroker/adapter-react/Components/Utils';\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\nimport Loader from '@iobroker/adapter-react/Components/Loader'\nimport I18n from '@iobroker/adapter-react/i18n';\n\nimport SceneForm from './components/SceneForm';\nimport SceneMembersForm from './components/SceneMembersForm';\nimport ExportImportDialog from './components/ExportImportDialog';\nimport ScenesList from './components/ScenesList';\n\n// icons\nimport {MdClose as IconCancel} from 'react-icons/md';\nimport {MdSave as IconSave} from 'react-icons/md';\nimport {MdDelete as IconDelete} from 'react-icons/md';\nimport {MdFileDownload as IconExport} from 'react-icons/md';\n// import {MdFileUpload as IconImport} from 'react-icons/md';\nimport {FaClone as IconClone} from 'react-icons/fa';\nimport {FaBars as IconMenu} from 'react-icons/fa';\n\nconst MARGIN_MEMBERS = 20;\n\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        height: 'calc(100% + 4px)',\n        backgroundColor: theme.palette.type === 'dark' ? '#000': '#fff',\n        overflowX: 'hidden',\n    },\n    width100: {\n        width: '100%',\n    },\n    noGutters: {\n        paddingLeft: 0,\n        paddingRight: 0,\n    },\n    height: {\n        height: '100%',\n    },\n    heightMinus2Toolbars: {\n        height: 'calc(100% - 96px)',\n    },\n    heightMinusMargin: {\n        height: 'calc(100% - ' + MARGIN_MEMBERS + 'px)',\n    },\n    fullWidthContainer: {\n        maxWidth: 'inherit',\n        paddingTop: 2,\n        paddingBottom: 2,\n        paddingLeft: 2,\n        paddingRight: 2,\n        overflow: 'hidden'\n    },\n    columnContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    buttonsContainer1: {\n        '& button': {\n            margin: '0 ' + theme.spacing(1) + 'px',\n        },\n    },\n    alignRight: {\n        textAlign: 'right',\n    },\n    membersCell: {\n        backgroundColor: theme.palette.type === 'dark' ? '#566770': '#ADD8E6',\n        marginTop: MARGIN_MEMBERS,\n        marginRight: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n        paddingTop: 0,\n        paddingLeft: 10,\n        paddingRight: 10,\n        paddingBottom: 10,\n\n        borderRadius: 4,\n        height: 'calc(100% - ' + theme.spacing(1) + 'px)',\n    },\n    sceneTitle: {\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\n        flexGrow: 1,\n        paddingLeft: theme.spacing(1),\n    },\n    sceneSubTitle: {\n        fontSize: 'small',\n        display: 'block'\n    },\n    toolbarButtons: {\n        marginRight: theme.spacing(1),\n    },\n    settingsBackground: {\n        background: theme.palette.type === 'dark' ? '#3a3a3a': '#eeeeee',\n    },\n    drawer: {\n        overflow: 'hidden'\n    },\n});\n\nfunction getUrlQuery() {\n    const parts = (window.location.search || '').replace(/^\\?/, '').split('&');\n    const query = {};\n    parts.forEach(item => {\n        const [name, val] = item.split('=');\n        query[decodeURIComponent(name)] = val !== undefined ? decodeURIComponent(val) : true;\n    });\n    return query;\n}\n\nfunction getFolderPrefix(sceneId) {\n    let result = sceneId.split('.');\n    result.shift();\n    result.shift();\n    result.pop();\n    result = result.join('.');\n    return result;\n}\n\nclass App extends GenericApp {\n    constructor(props) {\n        const extendedProps = {...props};\n        extendedProps.translations = {\n            'en': require('./i18n/en'),\n            'de': require('./i18n/de'),\n            'ru': require('./i18n/ru'),\n            'pt': require('./i18n/pt'),\n            'nl': require('./i18n/nl'),\n            'fr': require('./i18n/fr'),\n            'it': require('./i18n/it'),\n            'es': require('./i18n/es'),\n            'pl': require('./i18n/pl'),\n            'zh-cn': require('./i18n/zh-cn'),\n        };\n\n        super(props, extendedProps);\n\n        const query = getUrlQuery();\n\n        this.port = query.port || (window.location.port === '3000' ? 8081 : window.location.port);\n        this.host = query.host || window.location.hostname;\n\n        window.iobForceHost = this.host;\n    }\n\n    onConnectionReady() {\n        const newState = {\n            lang: this.socket.systemLang,\n            ready: false,\n            selectedSceneId: window.localStorage.getItem('Scenes.selectedSceneId') || '',\n            scenes: {},\n            folders: null,\n            changingScene: '',\n            instances: [],\n            selectedSceneChanged: false,\n            deleteDialog: null,\n            selectedSceneData: null,\n            exportDialog: false,\n            importDialog: false,\n            menuOpened: false,\n        };\n\n        this.socket.getSystemConfig()\n            .then(systemConfig => {\n                newState.systemConfig = systemConfig;\n\n                return this.socket.getAdapterInstances(window.adapterName)\n                    .then(instances => {\n                        newState.instances = instances.map(item => item._id);\n                        this.setState(newState, () =>\n                            this.refreshData());\n                    });\n            })\n            .catch(e => this.showError(e));\n    }\n\n    sceneSwitch(id) {\n        let scenes = JSON.parse(JSON.stringify(this.state.scenes));\n\n        if (id === this.state.selectedSceneId) {\n            scenes[id] = JSON.parse(JSON.stringify(this.state.selectedSceneData));\n        }\n\n        scenes[id].common.enabled = !scenes[id].common.enabled;\n\n        return this.socket.setObject(id, scenes[id])\n            .then(() => this.refreshData(id))\n            .catch(e => this.showError(e));\n    }\n\n    buildTree(scenes) {\n        scenes = Object.values(scenes);\n\n        let folders = {subFolders: {}, scenes: {}, id: '', prefix: ''};\n\n        // create missing folders\n        scenes.forEach((scene) => {\n            let id = scene._id;\n            const parts = id.split('.');\n            parts.shift();\n            parts.shift();\n            let currentFolder = folders;\n            let prefix = '';\n            for (let i = 0; i < parts.length - 1; i++) {\n                if (prefix) {\n                    prefix = prefix + '.';\n                }\n                prefix = prefix + parts[i];\n                if (!currentFolder.subFolders[parts[i]]) {\n                    currentFolder.subFolders[parts[i]] = {\n                        subFolders: {},\n                        scenes: {},\n                        id: parts[i],\n                        prefix,\n                    }\n                }\n                currentFolder = currentFolder.subFolders[parts[i]];\n            }\n            currentFolder.scenes[id] = scene;\n        });\n\n        return folders;\n    }\n\n    findFolder(parent, folder) {\n        if (parent.prefix === folder.prefix) {\n            return parent;\n        }\n        for (let index in parent.subFolders) {\n            let result = this.findFolder(parent.subFolders[index], folder);\n            if (result) {\n                return result;\n            }\n        }\n    }\n\n    getData() {\n        let scenes;\n        return this.socket.getObjectView('scene.0.', 'scene.\\u9999', 'state')\n            .then(_scenes => {\n                scenes = _scenes;\n                return {scenes, folders: this.buildTree(scenes)};\n            })\n            .catch(e => this.showError(e));\n    }\n\n    refreshData(changingScene) {\n        const that = this;\n        return new Promise(resolve => {\n            if (changingScene) {\n                this.setState({changingScene}, () => resolve());\n            } else {\n                this.setState({ready: false}, () => resolve());\n            }\n        })\n            .then(() => this.getData())\n            .then(newState => {\n                newState.ready = true;\n                newState.changingScene = '';\n                newState.selectedSceneChanged = false;\n\n                // Fill missing data\n                Object.keys(newState.scenes).forEach(id => {\n                    const sceneObj = newState.scenes[id];\n                    sceneObj.common = sceneObj.common || {};\n                    sceneObj.native = sceneObj.native || {};\n\n                    // rename attribute\n                    if (sceneObj.native.burstIntervall !== undefined) {\n                        sceneObj.native.burstInterval = sceneObj.native.burstIntervall;\n                        delete sceneObj.native.burstIntervall;\n                    }\n\n                    sceneObj.native.burstInterval = parseInt(sceneObj.native.burstInterval || 0, 10);\n                    sceneObj.native.onFalse = sceneObj.native.onFalse || {};\n                    sceneObj.native.onTrue  = sceneObj.native.onTrue  || {};\n                    sceneObj.native.onFalse.trigger = sceneObj.native.onFalse.trigger || {condition: '=='};\n                    sceneObj.native.onTrue.trigger  = sceneObj.native.onTrue.trigger  || {condition: '=='};\n                    sceneObj.native.members = sceneObj.native.members || [];\n                    const members = sceneObj.native.members;\n                    delete sceneObj.native.members;\n                    sceneObj.native.members = members; // place it on the last place\n\n                    delete sceneObj.from;\n                    delete sceneObj.user;\n                    delete sceneObj.ts;\n                    delete sceneObj.acl;\n                });\n\n                if (!newState.scenes[this.state.selectedSceneId]) {\n                    newState.selectedSceneId = Object.keys(newState.scenes).shift() || '';\n                }\n\n                if ((newState.selectedSceneId || that.state.selectedSceneId) &&\n                    newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]) {\n                    newState.selectedSceneData = JSON.parse(JSON.stringify(newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]));\n                } else {\n                    newState.selectedSceneData = null;\n                }\n\n                that.setState(newState);\n            });\n    }\n\n    addFolder(parentFolder, id) {\n        let folders = JSON.parse(JSON.stringify(this.state.folders));\n        let _parentFolder = this.findFolder(folders, parentFolder);\n\n        _parentFolder.subFolders[id] = {\n            scenes: {},\n            subFolders: {},\n            id,\n            prefix: _parentFolder.prefix ? _parentFolder.prefix + '.' + id : id\n        };\n\n        this.setState({folders});\n    }\n\n    addSceneToFolderPrefix = (scene, folderPrefix, noRefresh) => {\n        let oldId = scene._id;\n        let sceneId = scene._id.split('.').pop();\n        scene._id = 'scene.0.' + folderPrefix + (folderPrefix ? '.' : '') + sceneId;\n\n        return this.socket.delObject(oldId)\n            .then(() => {\n                console.log('Deleted ' + oldId);\n                return this.socket.setObject(scene._id, scene)\n            })\n            .catch(e => this.showError(e))\n            .then(() => {\n                console.log('Set new ID: ' + scene._id);\n                return !noRefresh && this.refreshData(sceneId)\n                    .then(() => this.changeSelectedScene(scene._id))\n                    .catch(e => this.showError(e));\n            });\n    };\n\n    moveScript(oldId, newId) {\n        const scene = this.state.scenes[oldId];\n        if (this.state.selectedSceneId === oldId) {\n            return this.setState({selectedSceneId: newId}, () => this.moveScript(oldId, newId));\n        }\n\n        scene._id = newId;\n\n        return this.socket.delObject(oldId)\n            .then(() => {\n                console.log('Deleted ' + oldId);\n                return this.socket.setObject(scene._id, scene)\n            })\n            .catch(e => this.showError(e))\n            .then(() => {\n                console.log('Set new ID: ' + scene._id);\n                return this.refreshData(newId)\n                    .then(() => this.changeSelectedScene(scene._id))\n                    .catch(e => this.showError(e));\n            });\n    };\n\n    renameFolder(folder, newName) {\n        return new Promise(resolve => this.setState({changingScene: folder}, () => resolve()))\n            .then(() => {\n                let newSelectedId;\n\n                let prefix = folder.prefix.split('.');\n                prefix[prefix.length - 1] = newName;\n                prefix = prefix.join('.');\n\n                if (Object.keys(folder.scenes).find(id => id === this.state.selectedSceneId)) {\n                    newSelectedId = 'scene.0.' + prefix + '.' + this.state.selectedSceneId.split('.').pop();\n                }\n\n                const promises = Object.keys(folder.scenes).map(sceneId =>\n                    this.addSceneToFolderPrefix(folder.scenes[sceneId], prefix, true));\n\n                return Promise.all(promises)\n                    .then(() => this.refreshData(folder))\n                    .then(() => newSelectedId && this.setState({selectedSceneId: newSelectedId}));\n            });\n    }\n\n    createScene(name, parentId) {\n        let template = {\n            common: {\n                name: '',\n                type: 'boolean',\n                role: 'scene.state',\n                desc: '',\n                enabled: true,\n                read: true,\n                write: true,\n                def: false,\n                engine: 'system.adapter.scenes.0'\n            },\n            native: {\n                onTrue: {\n                    trigger: {},\n                    cron: null,\n                    astro: null\n                },\n                onFalse: {\n                    enabled: false,\n                    trigger: {},\n                    cron: null,\n                    astro: null\n                },\n                easy: true,\n                members: []\n            },\n            type: 'state'\n        };\n\n        template.common.name = name;\n        let id = 'scene.0.' + (parentId ? parentId + '.' : '') + template.common.name;\n\n        this.setState({changingScene: id}, () =>\n            this.socket.setObject(id, template)\n                .then(() => this.refreshData(id))\n                .then(() => this.changeSelectedScene(id))\n                .catch(e => this.showError(e))\n        );\n    };\n\n    cloneScene(id) {\n        let scene = JSON.parse(JSON.stringify(this.state.scenes[id]));\n        scene._id = scene._id.split('.');\n        scene._id.pop();\n        scene._id.push(this.getNewSceneId());\n        scene._id = scene._id.join('.');\n        scene.common.name = scene.common.name + ' ' + I18n.t('copy');\n\n        this.setState({changingScene: scene._id}, () =>\n            this.socket.setObject(scene._id, scene)\n                .then(() => this.refreshData(scene._id))\n                .then(() => this.changeSelectedScene(scene._id))\n                .catch(e => this.showError(e))\n        );\n    };\n\n    writeScene() {\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\n        scene._id = this.state.selectedSceneId;\n\n        const folder = getFolderPrefix(scene._id);\n        const newId = 'scene.0.' + (folder ? folder + '.' : '') + scene.common.name.replace(Utils.FORBIDDEN_CHARS, '_').replace(/\\./g, '_').replace(/\\s/g, '_');\n\n        if (scene._id !== newId) {\n            // check if the scene name is unique\n            if (Object.keys(this.state.scenes).find(id => id === newId)) {\n                return this.showError(I18n.t('Name is not unique. Please change name before the save.'));\n            }\n\n            // delete first the old scene\n            return this.socket.delObject(scene._id)\n                .then(() => {\n                    scene._id = newId;\n                    return this.socket.setObject(scene._id, scene);\n                })\n                .then(() => this.refreshData(this.state.selectedSceneId))\n                .then(() => this.changeSelectedScene(newId))\n                .catch(e => this.showError(e));\n        } else {\n            return this.socket.setObject(this.state.selectedSceneId, scene)\n                .then(() => this.refreshData(this.state.selectedSceneId))\n                .catch(e => this.showError(e));\n        }\n    }\n\n    updateScene(common, native, cb) {\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\n        if (common) {\n            scene.common = JSON.parse(JSON.stringify(common));\n        }\n        if (native) {\n            const members = scene.native.members;\n            scene.native = JSON.parse(JSON.stringify(native));\n            scene.native.members = members;\n        }\n\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\n    };\n\n    deleteScene(id) {\n        return this.socket.delObject(id)\n            .then(() => {\n                if (this.state.selectedSceneId === id) {\n                    return this.refreshData(id)\n                        .then(() => {\n                            const ids = Object.keys(this.state.scenes);\n                            // Find next scene\n                            let nextId = ids.find(_id => _id > id) || '';\n                            if (!nextId) {\n                                // try prev scene\n                                for (let i = ids.length - 1; i >= 0; i--) {\n                                    if (ids[i] < id) {\n                                        nextId = ids[i];\n                                        break;\n                                    }\n                                }\n                            }\n                            if (!nextId && ids.length) {\n                                nextId = ids.shift();\n                            }\n\n                            return this.changeSelectedScene(nextId);\n                        });\n                } else {\n                    return this.refreshData(id);\n                }\n            })\n            .catch(e => this.showError(e));\n    };\n\n    getNewSceneId() {\n        let newId = 0;\n\n        for (const id in this.state.scenes) {\n            let shortId = id.split('.').pop();\n            let matches = shortId.match(/^scene([0-9]+)$/);\n            if (matches && parseInt(matches[1], 10) >= newId) {\n                newId = parseInt(matches[1]) + 1;\n            }\n        }\n\n        return 'scene' + newId;\n    };\n\n    updateSceneMembers(members, cb) {\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\n        scene.native.members = JSON.parse(JSON.stringify(members));\n\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\n    };\n\n    changeSelectedScene(newId, ignoreUnsaved, cb) {\n        return new Promise(resolve => {\n            if (this.state.selectedSceneId !== newId) {\n                if (this.state.selectedSceneChanged && !ignoreUnsaved) {\n                    this.confirmCb = cb;\n                    this.setState({sceneChangeDialog: newId}, () => resolve());\n                } else {\n                    window.localStorage.setItem('Scenes.selectedSceneId', newId);\n                    this.setState({\n                        selectedSceneData: this.state.scenes[newId] ? JSON.parse(JSON.stringify(this.state.scenes[newId])) : null,\n                        sceneChangeDialog: '',\n                        selectedSceneId: newId || '',\n                        selectedSceneChanged: false,\n                        menuOpened: false,\n                    }, () => {\n                        resolve();\n                        cb && cb();\n                    });\n                }\n            } else {\n                resolve();\n                cb && cb();\n            }\n        });\n    }\n\n    renderSceneChangeDialog() {\n        const that = this;\n        return this.state.sceneChangeDialog ? <Dialog\n            open={ true }\n            key=\"sceneChangeDialog\"\n            onClose={ () => this.setState({sceneChangeDialog: ''}) }>\n                <DialogTitle>{ I18n.t('Are you sure for cancel unsaved changes?') }</DialogTitle>\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                    <Button variant=\"contained\" onClick={() => {\n                        this.confirmCb = null; // cancel callback\n                        this.setState({sceneChangeDialog: ''});\n                    }}>\n                        <IconCancel/> { I18n.t('Cancel') }\n                    </Button>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={ () =>\n                        this.changeSelectedScene(this.state.sceneChangeDialog, true, () => {\n                            const cb = this.confirmCb;\n                            this.confirmCb = null;\n                            cb && cb();\n                        })\n                            .catch(() => console.log('ignore')) }>\n                        { I18n.t('Discard') }\n                    </Button>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={e => {\n                        // save scene\n                        this.writeScene()\n                            .then(() => that.changeSelectedScene(that.state.sceneChangeDialog === 'empty' ? '' : that.state.sceneChangeDialog, true, () => {\n                                const cb = this.confirmCb;\n                                this.confirmCb = null;\n                                cb && cb();\n                            }))\n                            .catch(() => console.log('ignore'))\n                    }}>\n                        <IconSave/> { I18n.t('Save changes') }\n                    </Button>\n                </DialogActions>\n            </Dialog> : null;\n    };\n\n    renderDeleteDialog() {\n        return this.state.deleteDialog ? <Dialog\n            open={ true }\n            key=\"deleteDialog\"\n            onClose={ () => this.setState({deleteDialog: false}) }\n        >\n            <DialogTitle>{ I18n.t('Are you sure for delete this scene?') }</DialogTitle>\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: false}) }>\n                    {I18n.t('Cancel')}\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={e =>\n                        this.setState({deleteDialog: false}, () =>\n                            this.deleteScene(this.state.selectedSceneId))\n                    }\n                >\n                    { I18n.t('Delete') }\n                </Button>\n            </DialogActions>\n        </Dialog> : null;\n    }\n\n    renderExportImportDialog() {\n        if (!this.state.exportDialog && !this.state.importDialog) {\n            return null;\n        }\n\n        return <ExportImportDialog\n            isImport={ !!this.state.importDialog }\n            themeType={ this.state.themeType }\n            onClose={ importedScene => {\n                if (this.state.importDialog && importedScene) {\n                    const scene = this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId];\n                    importedScene.common._id = scene._id;\n                    importedScene.common.name = scene.name || importedScene.common.name;\n                    this.setState({selectedSceneData: importedScene,  importDialog: false});\n                } else {\n                    this.setState({exportDialog: false, importDialog: false})\n                }\n            } }\n            sceneObj={ this.state.exportDialog ? this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId] : '' }\n        />\n    }\n\n    renderSceneTopToolbar(showDrawer) {\n        return <Toolbar variant=\"dense\" key=\"topToolbar\" classes={ {gutters: this.props.classes.noGutters} }>\n            { this.props.width !== 'md' && this.props.width !== 'sm' && this.props.width !== 'xs' ? <Typography variant=\"h6\" className={ this.props.classes.sceneTitle }>\n                { I18n.t('Scene options') /*Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) */}\n                <span className={this.props.classes.sceneSubTitle}>{ Utils.getObjectNameFromObj(this.state.scenes[this.state.selectedSceneId], null, {language: I18n.getLanguage()}, true) }</span>\n            </Typography> : null }\n\n            { showDrawer ? <IconButton aria-label=\"Open list\" title={ I18n.t('Open list') } onClick={ () => this.setState({menuOpened: true}) }><IconMenu/></IconButton> : null }\n            <IconButton aria-label=\"Clone\" title={ I18n.t('Clone') } onClick={ () => this.cloneScene(this.state.selectedSceneId) }><IconClone/></IconButton>\n\n            <IconButton aria-label=\"Delete\" title={ I18n.t('Delete') } onClick={ () => this.setState({deleteDialog: true}) }><IconDelete/></IconButton>\n\n            <IconButton aria-label=\"Export\" title={ I18n.t('Export scene') } onClick={ () => this.setState({exportDialog: true}) }><IconExport/></IconButton>\n\n            {/*<IconButton aria-label=\"Import\" title={ I18n.t('Import scene') } onClick={ () => this.setState({importDialog: true}) }><IconImport/></IconButton>*/}\n        </Toolbar>;\n    }\n\n    renderSceneBottomToolbar() {\n        return <Toolbar variant=\"dense\" key=\"bottomToolbar\" classes={ {gutters: this.props.classes.noGutters} }>\n            <div style={{flexGrow: 1}}/>\n            { this.state.selectedSceneChanged ? <Button\n                className={ this.props.classes.toolbarButtons }\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => this.writeScene()}\n            >\n                { I18n.t('Save') }\n            </Button> : null }\n\n            { this.state.selectedSceneChanged ? <Button\n                className={ this.props.classes.toolbarButtons }\n                variant=\"contained\"\n                onClick={ () => this.refreshData(this.state.selectedSceneId) }\n            >\n                { I18n.t('Cancel') }\n            </Button> : null }\n        </Toolbar>;\n    }\n\n    renderDrawerContent() {\n        return <ScenesList\n            scenes={this.state.scenes}\n            folders={this.state.folders}\n            selectedSceneId={this.state.selectedSceneId}\n            selectedSceneChanged={this.state.selectedSceneChanged}\n            theme={this.state.theme}\n            onSceneSelect={id =>\n                this.changeSelectedScene(id)\n                    .catch(() => console.log('ignore'))}\n            onSceneEnableDisable={id => this.sceneSwitch(id)}\n            onCreateFolder={(parent, id) => this.addFolder(parent, id)}\n            onCreateScene={parentId => this.createScene(this.getNewSceneId(), parentId)}\n            onRenameFolder={(folder, newId) => this.renameFolder(folder, newId)}\n            onMoveScene={(oldId, newId) => this.moveScript(oldId, newId)}\n            />;\n    }\n\n    renderSceneMembers(oneColumn) {\n        return <SceneMembersForm\n            key={ 'selected' + this.state.selectedSceneId }\n            oneColumn={ oneColumn }\n            showError={ e => this.showError(e) }\n            updateSceneMembers={ (members, cb) => this.updateSceneMembers(members, cb) }\n            selectedSceneChanged={ this.state.selectedSceneChanged }\n            sceneEnabled={ this.state.selectedSceneData.common.enabled }\n            members={ this.state.selectedSceneData.native.members }\n            easy={ !!this.state.selectedSceneData.native.easy }\n            socket={ this.socket }\n            onFalseEnabled={ this.state.selectedSceneData.native.onFalse.enabled }\n            virtualGroup={ this.state.selectedSceneData.native.virtualGroup }\n            sceneId={ this.state.selectedSceneId }\n            engineId={ this.state.selectedSceneData.common.engine }\n            intervalBetweenCommands={ this.state.selectedSceneData.native.burstInterval || 0 }\n        />;\n    }\n\n    renderSceneSettings(oneColumn) {\n        if (!this.state.selectedSceneData) {\n            this.state.selectedSceneData = JSON.parse(JSON.stringify(this.state.scenes[this.state.selectedSceneId]));\n        }\n\n        return <SceneForm\n            key={ this.state.selectedSceneId }\n            showError={ e => this.showError(e) }\n            oneColumn={ oneColumn }\n            updateScene={ (common, native, cb) => this.updateScene(common, native, cb) }\n            scene={ this.state.selectedSceneData }\n            socket={ this.socket }\n            instances={ this.state.instances }\n        />;\n    }\n\n    renderInOneColumn() {\n        return [\n            <Drawer\n                key=\"drawer\"\n                anchor=\"left\"\n                open={ this.state.menuOpened }\n                onClose={() => this.setState({menuOpened: false}) }\n                classes={ {paper: this.props.classes.drawer }}\n            >\n                { this.renderDrawerContent() }\n            </Drawer>,\n            this.renderSceneTopToolbar(true),\n            this.state.selectedSceneId ? <div\n                    key=\"main\"\n                    className={ this.props.classes.heightMinus2Toolbars }\n                    style={{ overflowY: 'auto', overflowX: 'hidden'}}\n                >\n                    { this.renderSceneSettings(true) }\n                    { this.renderSceneMembers(true) }\n                </div> : null,\n            this.renderSceneBottomToolbar(),\n        ]\n    }\n\n    renderInMoreThanOneColumn() {\n        const showDrawer = this.props.width === 'sm' || this.props.width === 'xs';\n\n        return <Container className={ clsx(this.props.classes.height, this.props.classes.fullWidthContainer) }>\n            <Grid container spacing={ 1 } className={ this.props.classes.height }>\n                { showDrawer ?\n                    <Drawer anchor=\"left\" open={ this.state.menuOpened } onClose={() => this.setState({menuOpened: false}) }>\n                        { this.renderDrawerContent() }\n                    </Drawer> :\n                    <Grid item xs={ 3 } className={ clsx(this.props.classes.columnContainer, this.props.classes.height) }>\n                        { this.renderDrawerContent() }\n                    </Grid>\n                }\n                { this.state.selectedSceneId && this.state.scenes[this.state.selectedSceneId] ?\n                    <Grid item xs={ showDrawer ? 12 : 9 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\n                        <Grid container spacing={ 1 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\n                            <Grid item xs={ this.props.width === 'xs' ? 12 : 5 } className={ this.props.classes.heightMinus2Toolbars }>\n                                { this.renderSceneTopToolbar(showDrawer) }\n                                <div className={this.props.classes.height}>\n                                    {this.state.selectedSceneId ? this.renderSceneSettings() : null}\n                                </div>\n                                { this.renderSceneBottomToolbar() }\n                            </Grid>\n                            <Grid item xs={ this.props.width === 'xs' ? 12 : 7 } className={ clsx(this.props.classes.height) }>\n                                <div className={ clsx(this.props.classes.heightMinusMargin) }>\n                                    { this.state.selectedSceneId ?\n                                        <div className={ clsx(this.props.classes.membersCell, this.props.classes.height) }>\n                                            { this.renderSceneMembers() }\n                                        </div>\n                                        : null}\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    : null\n                }\n            </Grid>\n        </Container>\n    }\n\n    render() {\n        if (!this.state.ready) {\n            return <MuiThemeProvider theme={ this.state.theme }>\n                <Loader theme={ this.state.themeName }/>\n            </MuiThemeProvider>;\n        }\n\n        const oneColumn = this.props.width === 'xs';\n\n        return (\n            <MuiThemeProvider theme={ this.state.theme }>\n                <div className={ this.props.classes.root }>\n                    { oneColumn ?\n                        this.renderInOneColumn() :\n                        this.renderInMoreThanOneColumn()\n                    }\n\n                    { this.renderSceneChangeDialog() }\n                    { this.renderDeleteDialog() }\n                    { this.renderExportImportDialog() }\n                    { this.renderError() }\n                </div>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default withWidth()(withStyles(styles)(withTheme(App)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Sentry from '@sentry/browser';\nimport * as SentryIntegrations from '@sentry/integrations';\nimport { MuiThemeProvider} from '@material-ui/core/styles';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\nimport { version } from '../package.json';\n\nimport theme from '@iobroker/adapter-react/Theme';\nimport Utils from '@iobroker/adapter-react/Components/Utils';\n\nwindow.adapterName = 'scenes';\n\nconsole.log('iobroker.' + window.adapterName + '@' + version);\nlet themeName = Utils.getThemeName();\n\nfunction build() {\n    return ReactDOM.render(<MuiThemeProvider theme={ theme(themeName) }>\n        <App onThemeChange={_theme => {\n            themeName = _theme;\n            build();\n        }}/>\n    </MuiThemeProvider>, document.getElementById('root'));\n}\n\n// if not local development\nif (window.location.host !== 'localhost:3000') {\n    Sentry.init({\n        dsn: 'https://89fc6260a1af4df68f9db767a603b7e5@sentry.iobroker.net/86',\n        release: 'iobroker.' + window.adapterName + '@' + version,\n        integrations: [\n            new SentryIntegrations.Dedupe()\n        ]\n    });\n}\n\nbuild();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n// Service worker works only with HTTPS and valid certificates, so do not enable it\nserviceWorker.unregister();\n\n"],"sourceRoot":""}