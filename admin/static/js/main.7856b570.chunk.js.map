{"version":3,"sources":["serviceWorker.js","components/SceneForm.js","components/SceneMembersForm.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","SceneForm","props","setStateWithParent","newState","cb","setState","updateScene","common","native","sceneObj","scene","JSON","parse","stringify","members","state","showDialog","sceneId","_id","this","key","socket","dialogName","title","I18n","t","selected","onOk","onClose","name","on","className","classes","editItem","onTrue","right","Switch","checked","trigger","id","onChange","e","target","Grid","container","spacing","item","xs","TextField","fullWidth","InputLabelProps","shrink","label","value","onClick","FormControl","InputLabel","Select","condition","MenuItem","cron","Box","clsx","columnContainer","height","scroll","Utils","getObjectNameFromObj","language","getLanguage","desc","width100","engine","instances","map","replace","min","burstIntervall","helperText","type","parseInt","FormControlLabel","style","paddingTop","control","Checkbox","virtualGroup","onFalse","enabled","renderOnTrueFalse","renderSelectIdDialog","React","Component","withStyles","theme","alignRight","textAlign","buttonsContainer","margin","width","display","flexDirection","float","overflowY","overflowX","paddingRight","marginBottom","color","palette","p","background","SceneMembersForm","memberStateChange","result","states","val","objectTypes","undefined","parseFloat","createSceneMembers","ids","filter","find","length","openedMembers","objectNames","Promise","all","getObject","then","obj","template","setIfTrue","setIfFalse","stopAllDelays","disabled","delay","onFalseEnabled","push","forEach","subscribeState","deleteSceneMember","index","splice","deleteDialog","unsubscribeState","renderMember","member","_valStr","toString","memberTrueFalse","memberTrue","memberFalse","memberUncertain","opened","includes","Paper","memberCard","memberToolbar","memberTitle","memberDesc","memberButtons","IconButton","pos","indexOf","sort","localStorage","setItem","size","marginLeft","aria-label","smallOnTrueFalse","stateValueTrue","stateValueFalse","getItemStyle","isDragging","draggableStyle","userSelect","getListStyle","isDraggingOver","render","sceneState","selectedSceneChanged","Toolbar","gutters","guttersZero","Typography","variant","sceneTitle","sceneSubTitle","sceneTrue","sceneFalse","sceneUncertain","testButtons","width100WithButton","defaultValue","onKeyUp","keyCode","onWriteScene","writeSceneState","Button","btnTestTrue","btnTestFalse","onDragEnd","droppableId","provided","snapshot","droppableProps","ref","innerRef","i","draggableId","draggableProps","dragHandleProps","placeholder","renderDeleteDialog","getItem","bind","readObjects","destination","source","removed","results","resolve","that","updateSceneMembers","multiSelect","Dialog","open","DialogTitle","changed","borderRadius","padding","fontSize","fontWeight","backgroundColor","flexGrow","marginRight","position","content","top","fontStyle","minHeight","getFolderPrefix","split","shift","pop","join","App","sceneSwitch","event","scenes","selectedSceneId","selectedSceneData","setObject","refreshData","addSceneToFolderPrefix","folderPrefix","noRefresh","a","oldId","instance","delObject","changeSelectedScene","renameFolder","folder","newName","changingScene","k","hasOwnProperty","prefix","renderTreeScene","level","search","ListItem","paddingLeft","button","ListItemText","primary","listItemTitle","secondary","listItemSubTitle","ListItemSecondaryAction","CircularProgress","deleteScene","Object","keys","nextId","translations","require","setTranslations","setLanguage","navigator","userLanguage","substring","toLowerCase","query","parts","decodeURIComponent","getUrlQuery","port","host","iobForceHost","lang","systemLang","ready","folders","addFolderDialog","addFolderDialogTitle","editFolderDialog","editFolderDialogTitle","showSearch","moveDialog","newFolder","getSystemConfig","systemConfig","getAdapterInstances","adapterName","catch","showError","values","subFolders","currentFolder","parent","findFolder","getObjectView","_scenes","console","log","buildTree","getData","parentFolder","_parentFolder","DialogContent","root","getFolderList","subFolder","concat","DialogActions","noGutters","folderItem","createScene","getNewSceneId","List","list","leftMenuItem","b","renderTree","parentId","role","read","write","def","astro","newId","matches","ignoreUnsaved","confirmCb","sceneChangeDialog","addFolder","autoFocus","writeScene","component","Container","fullWidthContainer","textInput","heightMinusToolbar","settingsBackground","toolbarButtons","cloneScene","membersCell","renderSceneChangeDialog","renderEditFolderDialog","renderMoveDialog","renderAddDialog","renderError","themeName","GenericApp","tabContent","overflow","maxWidth","buttonsContainer1","paddingBottom","withTheme","version","build","ReactDOM","onThemeChange","_theme","document","getElementById","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.7856b570.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nconst styles = theme => ({\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    width100: {\r\n        width: '100%'\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    editItem: {\r\n        display: 'block',\r\n        marginBottom: theme.spacing(2),\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    onTrue: {\r\n        background: 'lightgreen',\r\n    },\r\n    onFalse: {\r\n        background: '#ff9999',\r\n    },\r\n});\r\n\r\nclass SceneForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        this.state = {\r\n            common: sceneObj.common,\r\n            native: sceneObj.native,\r\n            showDialog: null,\r\n            sceneId: props.scene._id,\r\n        };\r\n    }\r\n\r\n    setStateWithParent = (newState, cb) => {\r\n        this.setState(newState, () =>\r\n            this.props.updateScene(newState.common, newState.native, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n                key=\"selectDialog\"\r\n                socket={ this.props.socket }\r\n                dialogName=\"memberEdit\"\r\n                title={ I18n.t('Select for ') }\r\n                selected={ null }\r\n                onOk={ this.state.showDialog }\r\n                onClose={ () => this.setState({showDialog: false}) }\r\n            /> : null;\r\n    };\r\n\r\n    renderOnTrueFalse(name) {\r\n        const on = this.state.native[name];\r\n\r\n        return [\r\n            <div key=\"switch\" className={ this.props.classes.editItem }>\r\n                <h4>{ on === this.state.native.onTrue ? I18n.t('Trigger for TRUE') : I18n.t('Trigger for FALSE') }\r\n                    <span className={ this.props.classes.right }>\r\n                        <Switch checked={ !!on.trigger.id }\r\n                                onChange={e => {\r\n                                    if (e.target.checked) {\r\n                                        this.setState({\r\n                                            showDialog: id => {\r\n                                                const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                native[name].trigger.id = id;\r\n                                                this.setStateWithParent({native});\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                        native[name].trigger.id = '';\r\n                                        this.setStateWithParent({native});\r\n                                    }\r\n                                }}\r\n                        />\r\n                    </span>\r\n                </h4>\r\n            </div>,\r\n            <div key=\"id\" className={ this.props.classes.editItem }>\r\n                {on.trigger.id ?\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={8}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}}\r\n                                label={ I18n.t('Trigger ID') }\r\n                                value={ on.trigger.id }\r\n                                onClick={() => {\r\n                                    this.setState({\r\n                                        showDialog: id => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.id = id;\r\n                                            this.setStateWithParent({native});\r\n                                        }\r\n                                    });\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2}>\r\n                            <FormControl>\r\n                                <InputLabel shrink={true}>{I18n.t('Condition')}</InputLabel>\r\n                                <Select value={on.trigger.condition || '=='}\r\n                                        onChange={e => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.condition = e.target.value;\r\n                                            this.setStateWithParent({native});\r\n                                        }}\r\n                                >\r\n                                    <MenuItem value=\"==\">==</MenuItem>\r\n                                    <MenuItem value=\"!=\">!=</MenuItem>\r\n                                    <MenuItem value=\">\">&gt;</MenuItem>\r\n                                    <MenuItem value=\"<\">&lt;</MenuItem>\r\n                                    <MenuItem value=\">=\">&gt;=</MenuItem>\r\n                                    <MenuItem value=\"<=\">&lt;=</MenuItem>\r\n                                    <MenuItem value=\"update\">{ I18n.t('on update') }</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}} label={ I18n.t('Value') }\r\n                                value={ on.trigger.value || '' }\r\n                                onChange={ e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native[name].trigger.value = e.target.value;\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    : null}\r\n            </div>,\r\n            <div key=\"cron\" className={ this.props.classes.editItem }>\r\n                <TextField\r\n                    fullWidth\r\n                    InputLabelProps={{shrink: true}}\r\n                    label={ name === 'onTrue' ? I18n.t('On time (CRON expression)') : I18n.t('Off time (CRON expression)')}\r\n                    value={ on.cron || '' }\r\n                    onChange={e => {\r\n                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                        native[name].cron = e.target.value;\r\n                        this.setStateWithParent({native});\r\n                    }}\r\n                />\r\n            </div>\r\n        ];\r\n    }\r\n\r\n    render() {\r\n        let result = <Box key=\"sceneForm\" className={ clsx(this.props.classes.columnContainer, this.props.classes.height) }>\r\n            <Box className={ this.props.classes.scroll }>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene name') }\r\n                        value={ Utils.getObjectNameFromObj({common: this.state.common, _id: this.state.sceneId}, null, {language: I18n.getLanguage()}) }\r\n                        onChange={e => {\r\n                           const common = JSON.parse(JSON.stringify(this.state.common));\r\n                           common.name = e.target.value;\r\n                           this.setStateWithParent({common});\r\n                       }}/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        fullWidth\r\n                        InputLabelProps={{shrink: true}}\r\n                        label={I18n.t('Scene description')}\r\n                        value={\r\n                            Utils.getObjectNameFromObj({common: this.state.common, _id: this.state.sceneId}, null, {language: I18n.getLanguage()}, true) }\r\n                        onChange={ e => {\r\n                               const common = JSON.parse(JSON.stringify(this.state.common));\r\n                               common.desc = e.target.value;\r\n                               this.setStateWithParent({common});\r\n                           }\r\n                        }/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={6}>\r\n                            <FormControl className={this.props.classes.width100}>\r\n                                <InputLabel shrink={true}>{ I18n.t('Instance') }</InputLabel>\r\n                                <Select\r\n                                    value={ this.state.common.engine }\r\n                                    onChange={e => {\r\n                                        const common = JSON.parse(JSON.stringify(this.state.common));\r\n                                        common.engine = e.target.value;\r\n                                        this.setStateWithParent({common});\r\n                                    }}\r\n                                >\r\n                                    { this.props.instances.map(id => <MenuItem key={ id } value={ id }>{ id.replace('system.adapter.', '') }</MenuItem>) }\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Interval between commands') }\r\n                                min={ 0 }\r\n                                value={ this.state.native.burstIntervall || 0 }\r\n                                helperText=\"ms\"\r\n                                type=\"number\"\r\n                                onChange={e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native.burstIntervall = parseInt(e.target.value, 10);\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={6}>\r\n                            <FormControlLabel style={{paddingTop: 10}} label={I18n.t('Virtual group')} control={\r\n                                <Checkbox checked={this.state.native.virtualGroup}\r\n                                          onChange={e => {\r\n                                              const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                              native.virtualGroup = e.target.checked;\r\n                                              this.setStateWithParent({native});\r\n                                          }}/>\r\n                            }/>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            { !this.state.native.virtualGroup ?\r\n                                <FormControlLabel\r\n                                    style={{paddingTop: 10}}\r\n                                    label={I18n.t('Set value if false')}\r\n                                    control={\r\n                                          <Checkbox\r\n                                              checked={ this.state.native.onFalse.enabled }\r\n                                                    onChange={e => {\r\n                                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                        native.onFalse.enabled = e.target.checked;\r\n                                                        this.setStateWithParent({native});\r\n                                                    }}/>}\r\n                                />\r\n                                : null}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                { !this.state.native.virtualGroup ? this.renderOnTrueFalse('onTrue') : null }\r\n                { !this.state.native.virtualGroup && this.state.native.onFalse.enabled ? this.renderOnTrueFalse('onFalse') : null }\r\n            </Box>\r\n        </Box>;\r\n\r\n        return [\r\n            result,\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateScene: PropTypes.func.isRequired,\r\n    instances: PropTypes.array,\r\n};\r\n\r\nexport default withStyles(styles)(SceneForm);","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n// own components\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\n// icons\r\nimport {AiOutlineClockCircle as IconClock} from 'react-icons/ai';\r\nimport {MdDelete as IconDelete} from 'react-icons/md';\r\nimport {MdModeEdit as IconEdit} from 'react-icons/md';\r\nimport {IoMdClose as IconClose} from 'react-icons/io';\r\nimport {MdAdd as IconAdd} from 'react-icons/md';\r\nimport {MdPlayArrow as IconPlay} from 'react-icons/md';\r\n\r\nconst TRUE_COLOR      = '#90ee90';\r\nconst FALSE_COLOR     = '#ff9999';\r\nconst TRUE_DARK_COLOR      = '#528952';\r\nconst FALSE_DARK_COLOR     = '#774747';\r\nconst UNCERTAIN_COLOR = '#bfb7be';\r\n\r\nconst styles = theme => ({\r\n    memberTrueFalse: {\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n        fontSize: 'initial',\r\n        fontWeight: 'initial',\r\n        margin: '0 ' + theme.spacing(1) + 'px',\r\n        textAlign: 'right',\r\n        //float: 'right'\r\n    },\r\n    memberTrue: {\r\n        backgroundColor: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    memberFalse: {\r\n        backgroundColor: 'pink',\r\n    },\r\n    memberUncertain: {\r\n        color: '#FFF',\r\n        backgroundColor: '#808080',\r\n    },\r\n    memberCard: {\r\n        padding: 4,\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    guttersZero: {\r\n        padding: 0,\r\n    },\r\n    sceneTitle: {\r\n        flexGrow: 1,\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    sceneSubTitle: {\r\n        fontSize: 'small',\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n    },\r\n    sceneTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    sceneFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n    },\r\n    sceneUncertain: {\r\n        background: UNCERTAIN_COLOR,\r\n    },\r\n    btnTestTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n        marginRight: theme.spacing(1),\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    btnTestFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    smallOnTrueFalse: {\r\n        fontSize: 'small',\r\n        textAlign: 'right',\r\n        width: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    stateValueTrue: {\r\n        color: '#60a060',\r\n        fontWeight: 'bold',\r\n    },\r\n    stateValueFalse: {\r\n        color: '#c15454',\r\n        fontWeight: 'bold',\r\n    },\r\n    changed: {\r\n        position: 'relative',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            width: 6,\r\n            height: 6,\r\n            borderRadius: 6,\r\n            background: '#FF0000',\r\n            position: 'absolute',\r\n            top: 5,\r\n            right: 5,\r\n        },\r\n    },\r\n    memberDesc: {\r\n        display: 'inline-block',\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n    },\r\n    memberTitle: {\r\n        fontSize: 14,\r\n        fontWeight: 'bold',\r\n    },\r\n    memberToolbar: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        minHeight: 72,\r\n    },\r\n    memberButtons: {\r\n        textAlign: 'right',\r\n        position: 'absolute',\r\n        top: 2,\r\n        right: 2,\r\n    },\r\n    width100WithButton: {\r\n        width: 'calc(100% - 48px)',\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n    testButtons: {\r\n        minHeight: 48,\r\n    },\r\n});\r\n\r\nclass SceneMembersForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let openedMembers = window.localStorage.getItem('Scenes.openedMembers') || '[]';\r\n        try {\r\n            openedMembers = JSON.parse(openedMembers);\r\n        } catch (e) {\r\n            openedMembers = [];\r\n        }\r\n\r\n        this.state = {\r\n            states: {},\r\n            openedMembers,\r\n            objectTypes: {},\r\n            objectNames: {},\r\n            members: JSON.parse(JSON.stringify(props.members)),\r\n            writeSceneState: '',\r\n            deleteDialog: null,\r\n            onFalseEnabled: props.onFalseEnabled,\r\n            virtualGroup: props.virtualGroup,\r\n            selectedSceneChanged: props.selectedSceneChanged,\r\n        };\r\n\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.readObjects()\r\n            .then(newState =>\r\n                this.setState(newState, () => {\r\n                    // subscribe on scene state\r\n                    this.props.socket.subscribeState(this.props.sceneId, this.memberStateChange);\r\n                    // subscribe on all states\r\n                    this.state.members.forEach(member =>\r\n                        this.props.socket.subscribeState(member.id, this.memberStateChange))\r\n                }));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.unsubscribeState(this.props.sceneId, this.memberStateChange);\r\n\r\n        this.state.members.forEach(member =>\r\n            this.props.socket.unsubscribeState(member.id, this.memberStateChange));\r\n    }\r\n    \r\n    static getDerivedStateFromProps(props, state) {\r\n        const newState = {};\r\n        let changed = false;\r\n\r\n        if (props.onFalseEnabled !== state.onFalseEnabled) {\r\n            newState.onFalseEnabled = props.onFalseEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.virtualGroup !== state.virtualGroup) {\r\n            newState.virtualGroup = props.virtualGroup;\r\n            changed = true;\r\n        }\r\n        if (props.selectedSceneChanged !== state.selectedSceneChanged) {\r\n            newState.selectedSceneChanged = props.selectedSceneChanged;\r\n            changed = true;\r\n        }\r\n\r\n        return changed ? newState : null;\r\n    }\r\n\r\n    onDragEnd(result) {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n        const members = JSON.parse(JSON.stringify(this.state.members));\r\n        const [removed] = members.splice(result.source.index, 1);\r\n        members.splice(result.destination.index, 0, removed);\r\n\r\n        this.setStateWithParent({members});\r\n    }\r\n\r\n    readObjects() {\r\n        if (this.state.members) {\r\n            return Promise.all(\r\n                this.state.members.map(member =>\r\n                    this.props.socket.getObject(member.id)))\r\n                .then(results => {\r\n                    const objectTypes = {};\r\n                    const objectNames = {};\r\n                    results.forEach(obj => {\r\n                        if (obj && obj.common && obj.common.type) {\r\n                            objectTypes[obj._id] = obj.common.type;\r\n                            objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, true);\r\n                        }\r\n                    });\r\n\r\n                    return {objectTypes, objectNames};\r\n                });\r\n        } else {\r\n            return Promise.resolve({});\r\n        }\r\n    }\r\n\r\n    memberStateChange = (id, result) => {\r\n        const states = JSON.parse(JSON.stringify(this.state.states));\r\n        states[id] = result ? result.val : null;\r\n        const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n\r\n        if (!objectTypes[id] && states[id] !== null && states[id] !== undefined) {\r\n            objectTypes[id] = typeof states[id];\r\n        }\r\n\r\n        if (objectTypes[id] === 'boolean') {\r\n            if (states[id] === 'true') {\r\n                states[id] = true;\r\n            }\r\n            if (states[id] === 'false') {\r\n                states[id] = false;\r\n            }\r\n        } else if (objectTypes[id] === 'number') {\r\n            states[id] = parseFloat(states[id]);\r\n        }\r\n\r\n        this.setState({states, objectTypes});\r\n    };\r\n    \r\n    createSceneMembers = ids => {\r\n        this.setState({showDialog: false}, () => {\r\n            // filter out yet existing IDs\r\n            ids = ids.filter(id => !this.state.members.find(item => item.id === id));\r\n            if (ids.length) {\r\n                const openedMembers = [...this.state.openedMembers];\r\n                const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n                const objectNames = JSON.parse(JSON.stringify(this.state.objectNames));\r\n                const members     = JSON.parse(JSON.stringify(this.state.members));\r\n\r\n                Promise.all(ids.map(id =>\r\n                    // Read type of state\r\n                    this.props.socket.getObject(id)\r\n                        .then(obj => {\r\n                            const template = {\r\n                                id,\r\n                                setIfTrue: null,\r\n                                setIfFalse: null,\r\n                                stopAllDelays: true,\r\n                                desc: null,\r\n                                disabled: false,\r\n                                delay: 0\r\n                            };\r\n\r\n                            objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, true);\r\n\r\n                            if (obj && obj.common && obj.common.type) {\r\n                                objectTypes[id] = obj.common.type;\r\n\r\n                                if (objectTypes[id] === 'boolean') {\r\n                                    template.setIfTrue = true;\r\n                                    if (this.state.onFalseEnabled) {\r\n                                        template.setIfFalse = false;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            members.push(template);\r\n\r\n                            // open added state\r\n                            openedMembers.push(id);\r\n                        })\r\n                        .then(() => this.setStateWithParent({objectTypes, objectNames, members, openedMembers}, () =>\r\n                            // Subscribe on all new members\r\n                            ids.forEach(id => this.props.socket.subscribeState(id, this.memberStateChange)))\r\n                        )\r\n                    )\r\n                );\r\n            } else {\r\n                // Show alert\r\n            }\r\n        });\r\n    };\r\n\r\n    deleteSceneMember = index => {\r\n        let members = JSON.parse(JSON.stringify(this.state.members));\r\n        const id = members[index].id;\r\n        members.splice(index, 1);\r\n        \r\n        this.setStateWithParent({members, deleteDialog: null}, () =>\r\n            this.props.socket.unsubscribeState(id, this.memberStateChange));\r\n    };\r\n\r\n    setStateWithParent(newState, cb) {\r\n        const that = this;\r\n        this.setState(newState, () =>\r\n            this.props.updateSceneMembers(that.state.members, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n            key=\"selectDialogMembers\"\r\n            socket={ this.props.socket }\r\n            dialogName=\"memberEdit\"\r\n            multiSelect={ true }\r\n            title={ I18n.t('Select for ') }\r\n            selected={ null }\r\n            onOk={ id => this.createSceneMembers(id) }\r\n            onClose={ () => this.setState({showDialog: false}) }\r\n        /> : null;\r\n    }\r\n    \r\n    renderDeleteDialog() {\r\n        if (this.state.deleteDialog === null) {\r\n            return;\r\n        }\r\n\r\n        return <Dialog\r\n            open={ true }\r\n            key=\"deleteDialog\"\r\n            onClose={ () =>\r\n                this.setState({deleteDialog: null}) }\r\n            >\r\n                <DialogTitle>{ I18n.t('Are you sure for delete this state?') }</DialogTitle>\r\n                <div className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                    <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: null}) }>\r\n                        {I18n.t('Cancel')}\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={ e => this.deleteSceneMember(this.state.deleteDialog) }>\r\n                        { I18n.t('Delete') }\r\n                    </Button>\r\n                </div>\r\n            </Dialog>;\r\n    };\r\n\r\n    renderMember = (member, index) => {\r\n        let value = null;\r\n        if (this.state.states[member.id] !== undefined && this.state.states[member.id] !== null) {\r\n            let _valStr = this.state.states[member.id].toString();\r\n\r\n            if (_valStr === 'true') {\r\n                _valStr = 'TRUE';\r\n            } else if (_valStr === 'false') {\r\n                _valStr = 'FALSE';\r\n            }\r\n\r\n            if (this.state.states[member.id] === member.setIfTrue) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(this.props.classes.memberTrueFalse, this.props.classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && this.state.states[member.id] === member.setIfFalse) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(this.props.classes.memberTrueFalse, this.props.classes.memberFalse) }>{ _valStr }</div>;\r\n            } else {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(this.props.classes.memberTrueFalse, this.props.classes.memberUncertain) }>{ _valStr }</div>;\r\n            }\r\n        }\r\n\r\n        let setIfTrue = member.setIfTrue;\r\n        if (setIfTrue === undefined || setIfTrue === null) {\r\n            setIfTrue = '';\r\n        } else {\r\n            if (setIfTrue === true) {\r\n                setIfTrue = 'TRUE';\r\n            } else if (setIfTrue === false) {\r\n                setIfTrue = 'FALSE';\r\n            } else {\r\n                setIfTrue = setIfTrue.toString();\r\n            }\r\n        }\r\n\r\n        let setIfFalse = member.setIfFalse;\r\n        if (setIfFalse === undefined || setIfFalse === null) {\r\n            setIfFalse = '';\r\n        } else {\r\n            if (setIfFalse === true) {\r\n                setIfFalse = 'TRUE';\r\n            } else if (setIfFalse === false) {\r\n                setIfFalse = 'FALSE';\r\n            } else {\r\n                setIfFalse = setIfFalse.toString();\r\n            }\r\n        }\r\n\r\n        const opened = this.state.openedMembers.includes(member.id);\r\n\r\n        return <Paper key={ member.id } className={ this.props.classes.memberCard }>\r\n            <div className={ this.props.classes.memberToolbar }>\r\n                <div className={ this.props.classes.memberTitle }>{ member.id }</div>\r\n                <div className={ this.props.classes.memberDesc }>{ member.desc || this.state.objectNames[member.id] || '' }</div>\r\n                <div className={ this.props.classes.memberButtons }>\r\n                    <IconButton title={ I18n.t('Edit') } onClick={ () => {\r\n                        const openedMembers = [...this.state.openedMembers];\r\n                        const pos = openedMembers.indexOf(member.id);\r\n                        if (pos !== -1) {\r\n                            openedMembers.splice(pos, 1);\r\n                        } else {\r\n                            openedMembers.push(member.id);\r\n                            openedMembers.sort();\r\n                        }\r\n                        window.localStorage.setItem('Scenes.openedMembers', JSON.stringify(openedMembers));\r\n                        this.setState({openedMembers});\r\n                    }}>\r\n                        { opened ? <IconClose/> : <IconEdit/> }\r\n                    </IconButton>\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 5 }} aria-label=\"Delete\" title={I18n.t('Delete')}\r\n                        onClick={ () => this.setState({deleteDialog: index}) }>\r\n                        <IconDelete/>\r\n                    </IconButton>\r\n                    <Switch\r\n                        checked={ !member.disabled }\r\n                        onChange={ e => {\r\n                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                            members[index].disabled = !e.target.checked;\r\n                            this.setStateWithParent({members});\r\n                        }}\r\n                        name={ member.id }\r\n                    />\r\n                    { value }\r\n                </div>\r\n            </div>\r\n            <div>{ member.desc } { !opened && member.delay ?\r\n                <span> <IconClock/> {member.delay + I18n.t('ms')}</span> : null }</div>\r\n            {\r\n                opened ?\r\n                    <div>\r\n                        {/*<Box className={this.props.classes.p}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}} label={I18n.t('Description')}\r\n                                value={member.desc || ''}\r\n                                onChange={e => {\r\n                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                    members[index].desc = e.target.value;\r\n                                    this.setStateWithParent({members});\r\n                                }}\r\n                            />\r\n                        </Box>*/ }\r\n                        <Box className={this.props.classes.p}>\r\n                            {this.state.objectTypes[member.id] === 'boolean' ?\r\n                                <FormControlLabel\r\n                                    control={<Checkbox\r\n                                        checked={ member.setIfTrue }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].setIfTrue = e.target.checked;\r\n                                            this.setStateWithParent({members});\r\n                                        } }/>\r\n                                    }\r\n                                    label={ I18n.t('Set if TRUE') }\r\n                                />\r\n                                :\r\n                                <TextField\r\n                                    InputLabelProps={ {shrink: true} }\r\n                                    label={ I18n.t('Set if TRUE') }\r\n                                    value={ member.setIfTrue || '' }\r\n                                    fullWidth\r\n                                    onChange={ e => {\r\n                                        const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                        if (this.state.objectTypes[member.id] === 'number') {\r\n                                            members[index].setIfTrue = parseFloat(e.target.value);\r\n                                        } else {\r\n                                            members[index].setIfTrue = e.target.value;\r\n                                        }\r\n\r\n                                        this.setStateWithParent({members});\r\n                                     } }/>\r\n                            }\r\n                        </Box>\r\n                        { this.state.onFalseEnabled ?\r\n                            <Box className={this.props.classes.p}>\r\n                                {\r\n                                    this.state.objectTypes[member.id] === 'boolean' ?\r\n                                        <FormControlLabel\r\n                                            control={<Checkbox checked={ member.setIfFalse } onChange={ e => {\r\n                                                const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                members[index].setIfFalse = e.target.checked;\r\n                                                this.setStateWithParent({members});\r\n                                            } }/>}\r\n                                            label={ I18n.t('Set if FALSE') }\r\n                                        />\r\n                                        :\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            InputLabelProps={{shrink: true}} label={I18n.t('Set if FALSE')}\r\n                                            value={ member.setIfFalse || ''}\r\n                                            onChange={ e => {\r\n                                                const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                if (this.state.objectTypes[member.id] === 'number') {\r\n                                                    members[index].setIfFalse = parseFloat(e.target.value);\r\n                                                } else {\r\n                                                    members[index].setIfFalse = e.target.value;\r\n                                                }\r\n                                                this.setStateWithParent({members});\r\n                                            } }\r\n                                        />\r\n                                }\r\n                            </Box>\r\n                            : null}\r\n                        <Box className={this.props.classes.p}>\r\n                            <Grid container spacing={4}>\r\n                                <Grid item xs={4}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        InputLabelProps={{shrink: true}}\r\n                                        label={I18n.t('Delay (ms)')}\r\n                                        value={ member.delay || 0}\r\n                                        min={ 0 }\r\n                                        type=\"number\"\r\n                                        onChange={e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].delay = parseInt(e.target.value, 10);\r\n                                            this.setStateWithParent({members});\r\n                                        }}/>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <FormControlLabel\r\n                                        label={ I18n.t('Stop already started commands') }\r\n                                        control={\r\n                                            <Checkbox\r\n                                                checked={ member.stopAllDelays }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].stopAllDelays = e.target.checked;\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                    }/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </div> :\r\n                    <div className={ this.props.classes.smallOnTrueFalse}>\r\n                        { I18n.t('Set if TRUE') + ': ' } <span className={ this.props.classes.stateValueTrue }>{ setIfTrue }</span>\r\n                        { this.state.onFalseEnabled ? ' / ' + I18n.t('Set if FALSE') + ': ' : null}\r\n                        { this.state.onFalseEnabled ? <span className={ this.props.classes.stateValueFalse }>{ setIfFalse }</span> : null}\r\n                    </div>\r\n            }\r\n        </Paper>\r\n    };\r\n\r\n    onWriteScene(val) {\r\n        this.props.socket.setState(this.props.sceneId, val);\r\n    }\r\n\r\n    getItemStyle = (isDragging, draggableStyle) => ({\r\n        // some basic styles to make the items look a bit nicer\r\n        userSelect: 'none',\r\n        background: isDragging ? 'lightgreen' : 'inherit',\r\n\r\n        // styles we need to apply on draggables\r\n        ...draggableStyle\r\n    });\r\n\r\n    getListStyle = isDraggingOver => ({\r\n        background: isDraggingOver ? 'lightblue' : 'inherit',\r\n    });\r\n\r\n    render = () => {\r\n        let sceneState = this.state.states[this.props.sceneId];\r\n        if (this.state.selectedSceneChanged) {\r\n            sceneState = I18n.t('Save scene before test')\r\n        } else if (sceneState === undefined || sceneState === null) {\r\n            sceneState = '';\r\n        }\r\n\r\n        let result = <div key=\"SceneMembersForm\" className={ clsx(this.props.classes.height, this.props.classes.columnContainer) }>\r\n            <Toolbar classes={{ gutters: this.props.classes.guttersZero}}>\r\n                <Typography variant=\"h6\" className={ clsx(this.props.classes.sceneTitle) } >\r\n                    {I18n.t('Scene states')}\r\n                    <br/>\r\n                    <span className={ clsx(\r\n                        this.props.classes.sceneSubTitle,\r\n                        !this.state.virtualGroup && sceneState === true && this.props.classes.sceneTrue,\r\n                        !this.state.virtualGroup && sceneState === false && this.props.classes.sceneFalse,\r\n                        !this.state.virtualGroup && sceneState === 'uncertain' && this.props.classes.sceneUncertain,\r\n                    ) }>{ I18n.t('Scene state:') } { sceneState.toString() }</span>\r\n                </Typography>\r\n                <IconButton title={I18n.t('Add new state')} onClick={() => this.setState({showDialog: true})}>\r\n                    <IconAdd/>\r\n                </IconButton>\r\n            </Toolbar>\r\n            <div className={ clsx(this.props.classes.testButtons, this.props.classes.width100) }>\r\n                {  !this.state.selectedSceneChanged && this.state.virtualGroup ? <TextField\r\n                    className={ this.props.classes.width100WithButton }\r\n                    label={ I18n.t('Write to virtual group') }\r\n                    defaultValue={ sceneState }\r\n                    onKeyUp={e => e.keyCode === 13 && this.onWriteScene(this.state.writeSceneState)}\r\n                    onChange={e => this.setState({writeSceneState: e.target.value}) }\r\n                /> : null}\r\n                { !this.state.selectedSceneChanged && this.state.virtualGroup ? <IconButton\r\n                    onClick={e => this.onWriteScene(this.state.writeSceneState) }\r\n                ><IconPlay/></IconButton> : null}\r\n                { !this.state.selectedSceneChanged && !this.state.virtualGroup ? <Button\r\n                    className={ this.props.classes.btnTestTrue }\r\n                    onClick={ () => this.onWriteScene(true) }\r\n                ><IconPlay/>{ I18n.t('Test TRUE') }</Button> : null }\r\n                { !this.state.selectedSceneChanged && !this.state.virtualGroup && this.state.onFalseEnabled ? <Button\r\n                    className={ this.props.classes.btnTestFalse }\r\n                    onClick={ () => this.onWriteScene(false) }\r\n                ><IconPlay/>{ I18n.t('Test FALSE') }</Button> : null }\r\n            </div>\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div className={ this.props.classes.scroll }\r\n                             {...provided.droppableProps}\r\n                             ref={ provided.innerRef }\r\n                             style={ this.getListStyle(snapshot.isDraggingOver) }\r\n                        >\r\n                            { this.state.members.map((member, i) =>\r\n                                <Draggable key={ member.id } draggableId={ member.id } index={ i }>\r\n                                    {(provided, snapshot) =>\r\n                                        <div\r\n                                            ref={ provided.innerRef }\r\n                                            {...provided.draggableProps }\r\n                                            {...provided.dragHandleProps }\r\n                                            style={ this.getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            ) }\r\n                                        >{ this.renderMember(member, i) }</div>}\r\n                                </Draggable>\r\n                            )}\r\n                            { provided.placeholder }\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>;\r\n\r\n        return [\r\n            result,\r\n            this.renderDeleteDialog(),\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneMembersForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateSceneMembers: PropTypes.func,\r\n    sceneId: PropTypes.string,\r\n    onFalseEnabled: PropTypes.bool,\r\n    virtualGroup: PropTypes.bool,\r\n    selectedSceneChanged: PropTypes.bool,\r\n};\r\n\r\nexport default withStyles(styles)(SceneMembersForm);","// Common\r\nimport React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport { withTheme } from '@material-ui/core/styles';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\n\r\n// MaterialUi\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Container from '@material-ui/core/Container';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\n// Own\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Loader from '@iobroker/adapter-react/Components/Loader'\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport SceneForm from './components/SceneForm';\r\nimport SceneMembersForm from './components/SceneMembersForm';\r\n\r\n// icons\r\nimport {MdExpandLess as IconCollapse} from 'react-icons/md';\r\nimport {MdExpandMore as IconExpand} from 'react-icons/md';\r\nimport {MdAdd as IconAdd} from 'react-icons/md';\r\nimport {MdModeEdit as IconEdit} from 'react-icons/md';\r\nimport {RiFolderAddLine as IconFolderAdd} from 'react-icons/ri';\r\nimport {MdClose as IconCancel} from 'react-icons/md';\r\nimport {MdSave as IconSave} from 'react-icons/md';\r\nimport {MdDelete as IconDelete} from 'react-icons/md';\r\nimport {FaClone as IconClone} from 'react-icons/fa';\r\nimport {BsFolderSymlink as IconMoveToFolder} from 'react-icons/bs';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nconst LEVEL_PADDING = 16;\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        height: 'calc(100% + 4px)',\r\n        backgroundColor: theme.palette.type === 'dark' ? '#000': '#fff',\r\n    },\r\n    tabContent: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px)',\r\n        overflow: 'auto'\r\n    },\r\n    textInput: {\r\n        display: 'block',\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n    noGutters: {\r\n        paddingLeft: 0,\r\n        paddingRight: 0,\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    heightMinusToolbar: {\r\n        height: 'calc(100% - 48px)',\r\n    },\r\n    folderItem: {\r\n        fontWeight: 'bold',\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    fullWidthContainer: {\r\n        maxWidth: 'inherit',\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        width: '100%',\r\n    },\r\n    buttonsContainer1: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    list: {\r\n        width: '100%',\r\n        padding: 0,\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    membersCell: {\r\n        backgroundColor: theme.palette.type === 'dark' ? '#566770': '#ADD8E6',\r\n        padding: '0px 10px',\r\n        borderRadius: '4px',\r\n        paddingBottom: '10px',\r\n        minHeight: 'calc(100% - 40px)',\r\n        marginBottom: '10px',\r\n    },\r\n    leftMenuItem: {\r\n        display: 'block',\r\n        borderRadius: 10,\r\n    },\r\n    p: {\r\n        margin: '1em 0',\r\n    },\r\n    changed: {\r\n        position: 'relative',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            width: 6,\r\n            height: 6,\r\n            borderRadius: 6,\r\n            background: '#FF0000',\r\n            position: 'absolute',\r\n            top: 5,\r\n            right: 5,\r\n        },\r\n    },\r\n    sceneTitle: {\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n        flexGrow: 1,\r\n        paddingLeft: theme.spacing(1),\r\n    },\r\n    sceneSubTitle: {\r\n        fontSize: 'small',\r\n        display: 'block'\r\n    },\r\n    toolbarButtons: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    settingsBackground: {\r\n        background: theme.palette.type === 'dark' ? '#3a3a3a': '#eeeeee',\r\n    },\r\n    listItemTitle: {\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    listItemSubTitle: {\r\n        color: theme.palette.type === 'dark' ? '#bababa': '#2a2a2a',\r\n    }\r\n});\r\n\r\nfunction getUrlQuery() {\r\n    const parts = (window.location.search || '').replace(/^\\?/, '').split('&');\r\n    const query = {};\r\n    parts.forEach(item => {\r\n        const [name, val] = item.split('=');\r\n        query[decodeURIComponent(name)] = val !== undefined ? decodeURIComponent(val) : true;\r\n    });\r\n    return query;\r\n}\r\n\r\nfunction getFolderPrefix(sceneId) {\r\n    let result = sceneId.split('.');\r\n    result.shift();\r\n    result.shift();\r\n    result.pop();\r\n    result = result.join('.');\r\n    return result;\r\n}\r\n\r\nfunction getFolderList(folder) {\r\n    let result = [];\r\n    result.push(folder);\r\n    Object.values(folder.subFolders).forEach(subFolder =>\r\n        result = result.concat(getFolderList(subFolder)));\r\n\r\n    return result;\r\n}\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        super(props);\r\n        this.translations = {\r\n            'en': require('./i18n/en'),\r\n            'de': require('./i18n/de'),\r\n            'ru': require('./i18n/ru'),\r\n            'pt': require('./i18n/pt'),\r\n            'nl': require('./i18n/nl'),\r\n            'fr': require('./i18n/fr'),\r\n            'it': require('./i18n/it'),\r\n            'es': require('./i18n/es'),\r\n            'pl': require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n\r\n        // init translations\r\n        I18n.setTranslations(this.translations);\r\n        I18n.setLanguage((navigator.language || navigator.userLanguage || 'en').substring(0, 2).toLowerCase());\r\n\r\n        const query = getUrlQuery();\r\n\r\n        this.port = query.port || (window.location.port === '3000' ? 8081 : window.location.port);\r\n        this.host = query.host || window.location.hostname;\r\n\r\n        window.iobForceHost = this.host;\r\n    }\r\n\r\n    onConnectionReady() {\r\n        let opened;\r\n        try {\r\n            opened = JSON.parse(window.localStorage.getItem('Scenes.opened')) || [];\r\n        } catch (e) {\r\n            opened = [];\r\n        }\r\n\r\n        const newState = {\r\n            lang: this.socket.systemLang,\r\n            ready: false,\r\n            selectedSceneId: window.localStorage.getItem('Scenes.selectedSceneId') || '',\r\n            opened,\r\n            scenes: {},\r\n            folders: null,\r\n            search: null,\r\n            addFolderDialog: null,\r\n            addFolderDialogTitle: null,\r\n            editFolderDialog: null,\r\n            editFolderDialogTitle: null,\r\n            changingScene: '',\r\n            showSearch: null,\r\n            instances: [],\r\n            selectedSceneChanged: false,\r\n            deleteDialog: null,\r\n            moveDialog: null,\r\n            newFolder: '',\r\n            selectedSceneData: null,\r\n        };\r\n\r\n        this.socket.getSystemConfig()\r\n            .then(systemConfig => {\r\n                newState.systemConfig = systemConfig;\r\n\r\n                return this.socket.getAdapterInstances(window.adapterName)\r\n                    .then(instances => {\r\n                        newState.instances = instances.map(item => item._id);\r\n                        this.setState(newState, () =>\r\n                            this.refreshData());\r\n                    });\r\n            })\r\n            .catch(e => this.showError(e));\r\n    }\r\n\r\n    sceneSwitch = event => {\r\n        const id = event.target.name;\r\n        let scenes = JSON.parse(JSON.stringify(this.state.scenes));\r\n\r\n        if (id === this.state.selectedSceneId) {\r\n            scenes[id] = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n            scenes[id].common.enabled = event.target.checked;\r\n        }\r\n\r\n        scenes[id].common.enabled = event.target.checked;\r\n\r\n        this.socket.setObject(id, scenes[id])\r\n            .then(() => this.refreshData(id));\r\n    };\r\n\r\n    buildTree(scenes) {\r\n        scenes = Object.values(scenes);\r\n\r\n        let folders = {subFolders: {}, scenes: {}, id: '', prefix: ''};\r\n\r\n        // create missing folders\r\n        scenes.forEach((scene) => {\r\n            let id = scene._id;\r\n            const parts = id.split('.');\r\n            parts.shift();\r\n            parts.shift();\r\n            let currentFolder = folders;\r\n            let prefix = '';\r\n            for (let i = 0; i < parts.length - 1; i++) {\r\n                if (prefix) {\r\n                    prefix = prefix + '.';\r\n                }\r\n                prefix = prefix + parts[i];\r\n                if (!currentFolder.subFolders[parts[i]]) {\r\n                    currentFolder.subFolders[parts[i]] = {\r\n                        subFolders: {}, \r\n                        scenes: {}, \r\n                        id: parts[i], \r\n                        prefix,\r\n                    }\r\n                }\r\n                currentFolder = currentFolder.subFolders[parts[i]];\r\n            }\r\n            currentFolder.scenes[id] = scene;\r\n        });\r\n\r\n        return folders;\r\n    }\r\n\r\n    findFolder(parent, folder) {\r\n        if (parent.prefix === folder.prefix) {\r\n            return parent;\r\n        }\r\n        for (let index in parent.subFolders) {\r\n            let result = this.findFolder(parent.subFolders[index], folder);\r\n            if (result) {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    getData() {\r\n        let scenes;\r\n        return this.socket.getObjectView('scene.' + this.instance + '.', 'scene.' + this.instance + '.\\u9999', 'state')\r\n            .then(_scenes => {\r\n                console.log(_scenes);\r\n                scenes = _scenes;\r\n                return {scenes, folders: this.buildTree(scenes)};\r\n            });\r\n    }\r\n\r\n    refreshData(changingScene) {\r\n        const that = this;\r\n        return new Promise(resolve => {\r\n            if (changingScene) {\r\n                this.setState({changingScene}, () => resolve());\r\n            } else {\r\n                this.setState({ready: false}, () => resolve());\r\n            }\r\n        })\r\n            .then(() => this.getData())\r\n            .then(newState => {\r\n                newState.ready = true;\r\n                newState.changingScene = '';\r\n                newState.selectedSceneChanged = false;\r\n\r\n                // Fill missing data\r\n                Object.keys(newState.scenes).forEach(id => {\r\n                    const sceneObj = newState.scenes[id];\r\n                    sceneObj.common = sceneObj.common || {};\r\n                    sceneObj.native = sceneObj.native || {};\r\n                    sceneObj.native.burstIntervall = parseInt(sceneObj.native.burstIntervall || 0, 10);\r\n                    sceneObj.native.onFalse = sceneObj.native.onFalse || {};\r\n                    sceneObj.native.onTrue  = sceneObj.native.onTrue  || {};\r\n                    sceneObj.native.onFalse.trigger = sceneObj.native.onFalse.trigger || {};\r\n                    sceneObj.native.onTrue.trigger  = sceneObj.native.onTrue.trigger  || {};\r\n                    sceneObj.native.members = sceneObj.native.members || [];\r\n                    const members = sceneObj.native.members;\r\n                    delete sceneObj.native.members;\r\n                    sceneObj.native.members = members; // place it on the last place\r\n                });\r\n\r\n                if (!newState.scenes[this.state.selectedSceneId]) {\r\n                    newState.selectedSceneId = Object.keys(newState.scenes).shift() || '';\r\n                }\r\n                newState.selectedSceneData = JSON.parse(JSON.stringify(newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]));\r\n                that.setState(newState);\r\n            });\r\n    }\r\n\r\n    addFolder(parentFolder, id) {\r\n        let folders = JSON.parse(JSON.stringify(this.state.folders));\r\n        let _parentFolder = this.findFolder(folders, parentFolder);\r\n\r\n        let opened = JSON.parse(JSON.stringify(this.state.opened));\r\n\r\n        _parentFolder.subFolders[id] = {\r\n            scenes: {},\r\n            subFolders: {},\r\n            id,\r\n            prefix: _parentFolder.prefix ? _parentFolder.prefix + '.' + id : id\r\n        };\r\n\r\n        opened.push(id);\r\n\r\n        this.setState({folders, opened});\r\n    }\r\n\r\n    addSceneToFolderPrefix = async (scene, folderPrefix, noRefresh) => {\r\n        let oldId = scene._id;\r\n        let sceneId = scene._id.split('.').pop();\r\n        scene._id = 'scene.' + this.instance + '.' + folderPrefix + (folderPrefix ? '.' : '') + sceneId;\r\n\r\n        await this.socket.delObject(oldId);\r\n        await this.socket.setObject(scene._id, scene);\r\n\r\n        if (!noRefresh) {\r\n            await this.refreshData(sceneId);\r\n            this.changeSelectedScene(scene._id);\r\n        }\r\n    };\r\n\r\n    renameFolder = async (folder, newName) => {\r\n        this.changeSelectedScene('');\r\n        this.setState({changingScene: folder});\r\n\r\n        for (const k in folder.scenes) {\r\n            if (folder.scenes.hasOwnProperty(k)) {\r\n                let prefix = folder.prefix.split('.');\r\n                prefix[prefix.length - 1] = newName;\r\n                prefix.join('.');\r\n                await this.addSceneToFolderPrefix(folder.scenes[k], prefix, true);\r\n            }\r\n        }\r\n\r\n        await this.refreshData(folder);\r\n    };\r\n\r\n    renderMoveDialog() {\r\n        if (!this.state.moveDialog) {\r\n            return null;\r\n        }\r\n\r\n        return <Dialog\r\n            open={ true }\r\n            key=\"moveDialog\"\r\n            onClose={ () => this.setState({moveDialog: null}) }\r\n        >\r\n            <DialogTitle>{ I18n.t('Move to folder') }</DialogTitle>\r\n            <DialogContent>\r\n                <FormControl classes={ {root: this.props.classes.width100} }>\r\n                    <InputLabel shrink={ true }>{ I18n.t('Folder') }</InputLabel>\r\n                    <Select\r\n                        className={ this.props.classes.width100 }\r\n                        value={ this.state.newFolder || '__root__' }\r\n                        onChange={e => this.setState({newFolder: e.target.value}) }>\r\n                        { getFolderList(this.state.folders).map(folder =>\r\n                            <MenuItem\r\n                                key={ folder.prefix }\r\n                                value={ folder.prefix || '__root__' }\r\n                            >\r\n                                { folder.prefix ? folder.prefix.replace('.', ' > ') : I18n.t('Root') }\r\n                            </MenuItem>)\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n            </DialogContent>\r\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                <Button variant=\"contained\" onClick={ () => this.setState({moveDialog: null}) }>\r\n                    { I18n.t('Cancel') }\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={ e =>\r\n                    this.setState({moveDialog: null}, () =>\r\n                        this.addSceneToFolderPrefix(this.state.scenes[this.state.selectedSceneId], this.state.newFolder === '__root__' ? '' : this.state.newFolder)) }\r\n                >\r\n                    { I18n.t('Move to folder') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n\r\n    /*deleteFolder(folder) {\r\n        if (Object.values(folder.scenes).length) {\r\n            return this.showError(I18n.t('Cannot delete non-empty folder'));\r\n        } else {\r\n            //delete folder;\r\n            this.setState(this.state);\r\n        }\r\n    }*/\r\n\r\n    renderTreeScene = (item, level) => {\r\n        const scene = this.state.scenes[item._id];\r\n        if (!scene || (this.state.search && !item.common.name.includes(this.state.search))) {\r\n            return null;\r\n        }\r\n\r\n        level = level || 0;\r\n\r\n        const changed = this.state.selectedSceneId && this.state.selectedSceneId === scene._id && this.state.selectedSceneChanged;\r\n\r\n        return <ListItem\r\n            style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\r\n            key={ item._id }\r\n            selected={ this.state.selectedSceneId ? this.state.selectedSceneId === scene._id : false }\r\n            button\r\n            className={ changed ? this.props.classes.changed : ''}\r\n            onClick={ () => this.changeSelectedScene(scene._id) }>\r\n            <ListItemText\r\n                classes={ {primary: this.props.classes.listItemTitle, secondary: this.props.classes.listItemSubTitle} }\r\n                primary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) }\r\n                secondary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}, true) }\r\n                />\r\n            <ListItemSecondaryAction>\r\n                {this.state.changingScene === scene._id ?\r\n                    <CircularProgress size={ 24 }/>\r\n                    :\r\n                    <Switch\r\n                        checked={scene.common.enabled}\r\n                        onChange={this.sceneSwitch}\r\n                        name={scene._id}\r\n                    />\r\n                }\r\n            </ListItemSecondaryAction>\r\n        </ListItem>;\r\n    };\r\n\r\n    renderTree(parent, level) {\r\n        let result = [];\r\n        level = level || 0;\r\n        let opened = this.state.opened ? this.state.opened.includes(parent.prefix) : false;\r\n\r\n        // Show folder item\r\n        parent && parent.id && result.push(<ListItem\r\n            key={ parent.prefix }\r\n            classes={ {gutters: this.props.classes.noGutters} }\r\n            className={ clsx(this.props.classes.width100, this.props.classes.folderItem) }\r\n            style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\r\n        >\r\n            { parent.id }\r\n            <ListItemSecondaryAction>\r\n                <IconButton onClick={() => {\r\n                    const opened = [...this.state.opened];\r\n                    const pos = opened.indexOf(parent.prefix);\r\n                    if (pos === -1) {\r\n                        opened.push(parent.prefix);\r\n                    } else {\r\n                        opened.splice(pos, 1);\r\n                    }\r\n\r\n                    window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\r\n\r\n                    this.setState({opened});\r\n                }} title={ opened ? I18n.t('Collapse') : I18n.t('Expand')  }>\r\n                    { opened ? <IconExpand/> : <IconCollapse/> }\r\n                </IconButton>\r\n            </ListItemSecondaryAction>\r\n        </ListItem>);\r\n\r\n        if (parent && (opened || !parent.id)) { // root cannot be closed and have id === ''\r\n            parent.id && result.push(<ListItem key={ 'keys_' + parent.prefix }>\r\n                <ListItemSecondaryAction>\r\n                    <IconButton\r\n                        onClick={() => this.createScene(this.getNewSceneId(), parent.id) }\r\n                        title={ I18n.t('Create new scene') }\r\n                    ><IconAdd/></IconButton>\r\n                    <IconButton\r\n                        onClick={() => this.setState({addFolderDialog: parent, addFolderDialogTitle: ''})}\r\n                        title={ I18n.t('Create new folder') }\r\n                    ><IconFolderAdd/></IconButton>\r\n\r\n                    <IconButton onClick={ () => this.setState({editFolderDialog: parent, editFolderDialogTitle: parent.id}) }\r\n                                title={ I18n.t('Edit folder') }\r\n                    ><IconEdit/></IconButton>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>);\r\n            // Add first scenes\r\n            result.push(<ListItem\r\n                key={ 'items_' + parent.prefix }\r\n                classes={ {gutters: this.props.classes.noGutters} }\r\n                className={ this.props.classes.width100 }>\r\n                    <List\r\n                        className={ this.props.classes.list }\r\n                        classes={ {root: this.props.classes.leftMenuItem} }\r\n                        style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\r\n                    >\r\n                        { Object.values(parent.scenes).sort((a, b) => a._id > b._id ? 1 : (a._id < b._id ? -1 : 0)).map(scene => this.renderTreeScene(scene, level)) }\r\n                    </List>\r\n                </ListItem>);\r\n\r\n            // add sub-folders\r\n            result.push(Object.values(parent.subFolders).sort((a, b) => a.id > b.id ? 1 : (a.id < b.id ? -1 : 0)).map(subFolder =>\r\n                this.renderTree(subFolder, level + 1)));\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    createScene(name, parentId) {\r\n        let template = {\r\n            common: {\r\n                name: '',\r\n                type: 'boolean',\r\n                role: 'scene.state',\r\n                desc: '',\r\n                enabled: true,\r\n                read: true,\r\n                write: true,\r\n                def: false,\r\n                engine: 'system.adapter.scenes.' + this.instance\r\n            },\r\n            native: {\r\n                onTrue: {\r\n                    trigger: {},\r\n                    cron: null,\r\n                    astro: null\r\n                },\r\n                onFalse: {\r\n                    enabled: false,\r\n                    trigger: {},\r\n                    cron: null,\r\n                    astro: null\r\n                },\r\n                members: []\r\n            },\r\n            type: 'state'\r\n        };\r\n\r\n        template.common.name = name;\r\n        let id = 'scene.' + this.instance + '.' + (parentId ? parentId + '.' : '') + template.common.name;\r\n\r\n        this.setState({changingScene: id}, () =>\r\n            this.socket.setObject(id, template)\r\n                .then(() => this.refreshData(id))\r\n                .then(() => this.changeSelectedScene(id)));\r\n    };\r\n\r\n    cloneScene(id) {\r\n        let scene = JSON.parse(JSON.stringify(this.state.scenes[id]));\r\n        scene._id = scene._id.split('.');\r\n        scene._id.pop();\r\n        scene._id.push(this.getNewSceneId());\r\n        scene._id = scene._id.join('.');\r\n        scene.common.name = scene.common.name + ' ' + I18n.t('copy');\r\n\r\n        this.setState({changingScene: scene._id}, () =>\r\n            this.socket.setObject(scene._id, scene)\r\n                .then(() => this.refreshData(scene._id))\r\n                .then(() => this.changeSelectedScene( scene._id)));\r\n    };\r\n\r\n    writeScene() {\r\n        return this.socket.setObject(this.state.selectedSceneId, this.state.selectedSceneData)\r\n            .then(() => this.refreshData(this.state.selectedSceneId));\r\n    }\r\n\r\n    updateScene(common, native, cb) {\r\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        if (common) {\r\n            scene.common = JSON.parse(JSON.stringify(common));\r\n        }\r\n        if (native) {\r\n            const members = scene.native.members;\r\n            scene.native = JSON.parse(JSON.stringify(native));\r\n            scene.native.members = members;\r\n        }\r\n\r\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\r\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\r\n    };\r\n\r\n    deleteScene = (id) => {\r\n        return this.socket.delObject(id)\r\n            .then(() => {\r\n                if (this.state.selectedSceneId === id) {\r\n                    return this.refreshData(id)\r\n                        .then(() => {\r\n                            const ids = Object.keys(this.state.scenes);\r\n                            // Find next scene\r\n                            let nextId = ids.find(_id => _id > id) || '';\r\n                            if (!nextId) {\r\n                                // try prev scene\r\n                                for (let i = ids.length - 1; i >= 0; i--) {\r\n                                    if (ids[i] < id) {\r\n                                        nextId = ids[i];\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (!nextId && ids.length) {\r\n                                nextId = ids.shift();\r\n                            }\r\n\r\n                            this.changeSelectedScene(nextId);\r\n                        });\r\n                } else {\r\n                    return this.refreshData(id);\r\n                }\r\n            });\r\n    };\r\n\r\n    getNewSceneId() {\r\n        let newId = 0;\r\n\r\n        for (const id in this.state.scenes) {\r\n            let shortId = id.split('.').pop();\r\n            let matches = shortId.match(/^scene([0-9]+)$/);\r\n            if (matches && parseInt(matches[1], 10) >= newId) {\r\n                newId = parseInt(matches[1]) + 1;\r\n            }\r\n        }\r\n\r\n        return 'scene' + newId;\r\n    };\r\n\r\n    updateSceneMembers(members, cb) {\r\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\r\n        scene.native.members = JSON.parse(JSON.stringify(members));\r\n\r\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\r\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\r\n    };\r\n\r\n    changeSelectedScene(newId, ignoreUnsaved, cb) {\r\n        if (this.state.selectedSceneId !== newId) {\r\n            if (this.state.selectedSceneChanged && !ignoreUnsaved) {\r\n                this.confirmCb = cb;\r\n                this.setState({sceneChangeDialog: newId});\r\n            } else {\r\n                window.localStorage.setItem('Scenes.selectedSceneId', newId);\r\n                this.setState({\r\n                    selectedSceneData: JSON.parse(JSON.stringify(this.state.scenes[newId])),\r\n                    sceneChangeDialog: '',\r\n                    selectedSceneId: newId,\r\n                    selectedSceneChanged: false,\r\n                }, () => cb && cb());\r\n            }\r\n        } else {\r\n            cb && cb();\r\n        }\r\n    }\r\n\r\n    renderAddDialog() {\r\n        return this.state.addFolderDialog ?\r\n            <Dialog\r\n                open={ !!this.state.addFolderDialog }\r\n                onClose={ () => this.setState({addFolderDialog: null}) }\r\n            >\r\n                <DialogTitle>{I18n.t('Create folder')}</DialogTitle>\r\n                <DialogContent className={this.props.classes.p}>\r\n                    <TextField label={I18n.t('Title')} value={this.state.addFolderDialogTitle} onChange={ e =>\r\n                        this.setState({addFolderDialogTitle: e.target.value.replace(/[\\][*,.;'\"`<>\\\\?]/g, '')}) }/>\r\n                </DialogContent>\r\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                    <Button variant=\"contained\" onClick={ () => this.setState({addFolderDialog: null}) }>\r\n                        {I18n.t('Cancel')}\r\n                    </Button>\r\n                    <Button variant=\"contained\" onClick={() => {\r\n                        this.addFolder(this.state.addFolderDialog, this.state.addFolderDialogTitle);\r\n                        this.setState({addFolderDialog: null});\r\n                    }} color=\"primary\" autoFocus>\r\n                        {I18n.t('Create')}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog> : null;\r\n    }\r\n\r\n    renderEditFolderDialog() {\r\n        return this.state.editFolderDialog ? <Dialog open={ !!this.state.editFolderDialog } onClose={ () => this.setState({editFolderDialog: null}) }>\r\n            <DialogTitle>{ I18n.t('Edit folder') }</DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                    label={ I18n.t('Title') }\r\n                    value={ this.state.editFolderDialogTitle }\r\n                    onChange={ e => this.setState({editFolderDialogTitle: e.target.value.replace(/[\\][*,.;'\"`<>\\\\?]/g, '')}) }/>\r\n            </DialogContent>\r\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                <Button variant=\"contained\" onClick={ () => this.setState({editFolderDialog: null}) }>\r\n                    { I18n.t('Cancel') }\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={ () => {\r\n                        this.renameFolder(this.state.editFolderDialog, this.state.editFolderDialogTitle)\r\n                            .then(() => this.setState({editFolderDialog: null}));\r\n                    }}\r\n                    color=\"primary\"\r\n                    autoFocus\r\n                >\r\n                    { I18n.t('edit') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog> : null;\r\n    }\r\n\r\n    renderSceneChangeDialog() {\r\n        const that = this;\r\n        return this.state.sceneChangeDialog ? <Dialog\r\n            open={ true }\r\n            key=\"sceneChangeDialog\"\r\n            onClose={ () => this.setState({sceneChangeDialog: ''}) }>\r\n                <DialogTitle>{ I18n.t('Are you sure for cancel unsaved changes?') }</DialogTitle>\r\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                    <Button variant=\"contained\" onClick={() => {\r\n                        this.confirmCb = null; // cancel callback\r\n                        this.setState({sceneChangeDialog: ''});\r\n                    }}>\r\n                        <IconCancel/> { I18n.t('Cancel') }\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={e =>\r\n                        this.changeSelectedScene(this.state.sceneChangeDialog, true, () => {\r\n                            const cb = this.confirmCb;\r\n                            this.confirmCb = null;\r\n                            cb && cb();\r\n                        }) }>\r\n                        { I18n.t('Discard') }\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={e => {\r\n                        // save scene\r\n                        this.writeScene()\r\n                            .then(() => that.changeSelectedScene(that.state.sceneChangeDialog, true, () => {\r\n                                const cb = this.confirmCb;\r\n                                this.confirmCb = null;\r\n                                cb && cb();\r\n                            }))\r\n                    }}>\r\n                        <IconSave/> { I18n.t('Save changes') }\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog> : null;\r\n    };\r\n\r\n    renderDeleteDialog() {\r\n        return this.state.deleteDialog ? <Dialog\r\n            open={ true }\r\n            key=\"deleteDialog\"\r\n            onClose={ () => this.setState({deleteDialog: false}) }\r\n        >\r\n            <DialogTitle>{ I18n.t('Are you sure for delete this scene?') }</DialogTitle>\r\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\r\n                <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: false}) }>\r\n                    {I18n.t('Cancel')}\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={e => {\r\n                    this.deleteScene(this.state.selectedSceneId);\r\n                    this.setState({deleteDialog: false});\r\n                }}>\r\n                    { I18n.t('Delete') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog> : null;\r\n    }\r\n\r\n    render() {\r\n        const component = this;\r\n        if (!this.state.ready) {\r\n            return <MuiThemeProvider theme={ this.state.theme }>\r\n                <Loader theme={ this.state.themeName }/>\r\n            </MuiThemeProvider>;\r\n        }\r\n\r\n        return (\r\n            <MuiThemeProvider theme={ this.state.theme }>\r\n                <div className={ this.props.classes.root }>\r\n                    <Container className={ clsx(this.props.classes.height, this.props.classes.fullWidthContainer) }>\r\n                        <Grid container spacing={ 1 } className={ this.props.classes.height }>\r\n                            <Grid item xs={ 3 } className={ clsx(this.props.classes.columnContainer, this.props.classes.height) }>\r\n                                <Toolbar variant=\"dense\">\r\n                                    <IconButton\r\n                                        onClick={ () => this.createScene(this.getNewSceneId()) }\r\n                                        title={ I18n.t('Create new scene') }\r\n                                    ><IconAdd/></IconButton>\r\n\r\n                                    <IconButton\r\n                                        onClick={ () => this.setState({addFolderDialog: this.state.folders, addFolderDialogTitle: ''}) }\r\n                                        title={ I18n.t('Create new folder') }\r\n                                    ><IconFolderAdd/></IconButton>\r\n\r\n                                    <span className={this.props.classes.right}>\r\n                                        <IconButton onClick={() => this.setState({showSearch: !this.state.showSearch}) }>\r\n                                            <SearchIcon/>\r\n                                        </IconButton>\r\n                                    </span>\r\n                                    {this.state.showSearch ?\r\n                                        <TextField\r\n                                            value={ this.state.search }\r\n                                            className={ this.props.classes.textInput }\r\n                                            onChange={ e => this.setState({search: e.target.value}) }/> : null\r\n                                    }\r\n                                </Toolbar>\r\n                                <div className={ this.props.classes.heightMinusToolbar }>\r\n                                    <List className={ this.props.classes.scroll }>\r\n                                        { this.renderTree(this.state.folders) }\r\n                                    </List>\r\n                                </div>\r\n                            </Grid>\r\n                            { this.state.selectedSceneId && this.state.scenes[this.state.selectedSceneId] ?\r\n                                <Grid item xs={ 9 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\r\n                                    <Toolbar variant=\"dense\" classes={ {gutters: this.props.classes.noGutters} }>\r\n                                        <Typography variant=\"h6\" className={ this.props.classes.sceneTitle }>\r\n                                            { I18n.t('Scene options') /*Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) */}\r\n                                            <span className={this.props.classes.sceneSubTitle}>{ Utils.getObjectNameFromObj(this.state.scenes[this.state.selectedSceneId], null, {language: I18n.getLanguage()}, true) }</span>\r\n                                        </Typography>\r\n\r\n                                        { this.state.selectedSceneChanged ? <Button\r\n                                                className={ this.props.classes.toolbarButtons }\r\n                                                variant=\"contained\"\r\n                                                color=\"secondary\"\r\n                                                onClick={() => this.writeScene()}\r\n                                            >\r\n                                                { I18n.t('Save') }\r\n                                            </Button> : null }\r\n\r\n                                        { this.state.selectedSceneChanged ? <Button\r\n                                                className={ this.props.classes.toolbarButtons }\r\n                                                variant=\"contained\"\r\n                                                onClick={() => this.refreshData(this.state.selectedSceneId)}\r\n                                            >\r\n                                                { I18n.t('Cancel') }\r\n                                            </Button> : null }\r\n                                        <IconButton aria-label=\"Clone\" title={I18n.t('Clone')} onClick={() => {\r\n                                            component.cloneScene(this.state.selectedSceneId);\r\n                                        }}><IconClone/></IconButton>\r\n\r\n                                        <IconButton aria-label=\"Delete\" title={I18n.t('Delete')} onClick={() => {\r\n                                            component.setState({deleteDialog: true})\r\n                                        }}><IconDelete/></IconButton>\r\n\r\n                                        <IconButton aria-label=\"Move to folder\" title={I18n.t('Move to folder')} onClick={() => {\r\n                                            component.setState({moveDialog: true, newFolder: getFolderPrefix(this.state.selectedSceneId)})\r\n                                        }}><IconMoveToFolder/></IconButton>\r\n                                    </Toolbar>\r\n                                    <Grid container spacing={ 1 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\r\n                                        <Grid item xs={5} className={ this.props.classes.heightMinusToolbar }>\r\n                                            <div className={this.props.classes.height}>\r\n                                                {this.state.selectedSceneId ?\r\n                                                    <SceneForm\r\n                                                        key={ this.state.selectedSceneId }\r\n                                                        updateScene={ (common, native, cb) => component.updateScene(common, native, cb) }\r\n                                                        scene={ this.state.scenes[this.state.selectedSceneId] }\r\n                                                        socket={ this.socket }\r\n                                                        instances={ this.state.instances }\r\n                                                    />\r\n                                                    : ''}\r\n                                            </div>\r\n                                        </Grid>\r\n                                        <Grid item xs={7} className={ this.props.classes.heightMinusToolbar }>\r\n                                            <div className={this.props.classes.height}>\r\n                                                { this.state.selectedSceneId ?\r\n                                                    <div className={ clsx(this.props.classes.membersCell, this.props.classes.height) }>\r\n                                                        <SceneMembersForm\r\n                                                            key={ 'selected' + this.state.selectedSceneId }\r\n                                                            updateSceneMembers={ (members, cb) => component.updateSceneMembers(members, cb) }\r\n                                                            selectedSceneChanged={ this.state.selectedSceneChanged }\r\n                                                            members={ this.state.selectedSceneData.native.members }\r\n                                                            socket={ this.socket }\r\n                                                            onFalseEnabled={ this.state.selectedSceneData.native.onFalse.enabled }\r\n                                                            virtualGroup={ this.state.selectedSceneData.native.virtualGroup }\r\n                                                            sceneId={ this.state.selectedSceneId }\r\n                                                        />\r\n                                                    </div>\r\n                                                    : ''}\r\n                                            </div>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                : null\r\n                            }\r\n                        </Grid>\r\n                    </Container>\r\n                    { this.renderSceneChangeDialog() }\r\n                    { this.renderEditFolderDialog() }\r\n                    { this.renderMoveDialog() }\r\n                    { this.renderDeleteDialog() }\r\n                    { this.renderAddDialog() }\r\n                    { this.renderError() }\r\n                </div>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(withTheme(App));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { MuiThemeProvider} from '@material-ui/core/styles';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\nimport { version } from '../package.json';\n\nimport theme from '@iobroker/adapter-react/Theme';\n\nwindow.adapterName = 'scenes';\n\nconsole.log('iobroker.' + window.adapterName + '@' + version);\nlet themeName = window.localStorage ? window.localStorage.getItem('App.themeName') || 'light' : 'light';\n\nfunction build() {\n    return ReactDOM.render(<MuiThemeProvider theme={ theme(themeName) }>\n        <App onThemeChange={_theme => {\n            themeName = _theme;\n            build();\n        }}/>\n    </MuiThemeProvider>, document.getElementById('root'));\n}\n\nbuild();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}