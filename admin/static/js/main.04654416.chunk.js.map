{"version":3,"sources":["serviceWorker.js","components/SceneForm.js","components/SceneMembersForm.js","components/ExportImportDialog.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","SceneForm","props","setStateWithParent","newState","cb","setState","updateScene","common","native","sceneObj","scene","JSON","parse","stringify","members","state","showDialog","sceneId","_id","this","key","imagePrefix","socket","dialogName","title","I18n","t","selected","onOk","onClose","name","on","className","classes","editItem","onTrue","onFalse","enabled","right","Switch","checked","trigger","id","onChange","e","target","condition","Grid","container","spacing","item","xs","TextField","fullWidth","InputLabelProps","shrink","label","value","onClick","FormControl","InputLabel","Select","MenuItem","cron","Box","clsx","columnContainer","oneColumn","height","scroll","desc","sm","width100","engine","instances","map","replace","min","burstInterval","helperText","type","parseInt","FormControlLabel","style","paddingTop","control","Checkbox","virtualGroup","renderOnTrueFalse","renderSelectIdDialog","React","Component","withStyles","theme","alignRight","textAlign","buttonsContainer","margin","width","display","flexDirection","float","overflowY","overflowX","paddingRight","marginBottom","color","palette","p","background","SceneMembersForm","memberStateChange","states","val","objectTypes","undefined","parseFloat","createSceneMembers","ids","length","openedMembers","objectNames","Promise","all","getObject","then","obj","template","setIfTrue","setIfFalse","stopAllDelays","disabled","delay","Utils","getObjectNameFromObj","language","getLanguage","onFalseEnabled","push","forEach","subscribeState","catch","showError","deleteSceneMember","i","splice","deleteDialog","unsubscribeState","renderMember","member","index","_valStr","toString","setIfTrueTolerance","Math","abs","memberTrueFalse","memberTrue","setIfFalseTolerance","memberFalse","memberUncertain","opened","includes","setIfTrueVisible","varType","setIfFalseVisible","countEnabled","u","Paper","memberCard","memberToolbar","IconButton","memberFolder","pos","indexOf","sort","localStorage","setItem","memberTitle","memberDesc","memberButtons","size","marginLeft","aria-label","intervalBetweenCommands","setValue","InputProps","endAdornment","doNotOverwrite","smallOnTrueFalse","stateValueTrue","stateValueFalse","getItemStyle","isDragging","draggableStyle","userSelect","getListStyle","isDraggingOver","render","sceneState","selectedSceneChanged","engineId","Toolbar","gutters","guttersZero","Typography","variant","sceneTitle","instanceNotActive","sceneSubTitle","sceneTrue","sceneFalse","sceneUncertain","testButtons","width100WithButton","defaultValue","onKeyUp","keyCode","onWriteScene","writeSceneState","sceneEnabled","Button","btnTestTrue","btnTestFalse","btnCollapseAll","btnExpandAll","onDragEnd","droppableId","provided","snapshot","droppableProps","ref","innerRef","draggableId","draggableProps","dragHandleProps","placeholder","renderDeleteDialog","getItem","bind","readObjects","result","destination","source","removed","results","resolve","that","updateSceneMembers","multiSelect","Dialog","open","DialogTitle","DialogActions","changed","borderRadius","padding","fontSize","fontWeight","whiteSpace","maxWidth","overflow","textOverflow","backgroundColor","position","top","left","flexGrow","marginRight","content","fontStyle","minHeight","minWidth","opacity","ExportImportDialog","text","error","toast","Snackbar","autoHideDuration","Alert","severity","aria-labelledby","fullScreen","aria-describedby","isImport","DialogContent","divWithoutTitle","autoFocus","mode","onLoad","editor","codeEditor","focus","themeType","newValue","readOnly","editorProps","$blockScrolling","copy","setTimeout","renderToast","border","getFolderPrefix","split","shift","pop","join","FORBIDDEN_CHARS","App","extendedProps","translations","require","sceneSwitch","event","scenes","selectedSceneId","selectedSceneData","setObject","refreshData","addSceneToFolderPrefix","folderPrefix","noRefresh","oldId","delObject","console","log","changeSelectedScene","renderTreeScene","level","search","ListItem","paddingLeft","button","ListItemIcon","root","itemIconRoot","itemIcon","ListItemText","primary","listItemTitle","secondary","listItemSubTitle","ListItemSecondaryAction","changingScene","CircularProgress","deleteScene","Object","keys","nextId","find","query","parts","decodeURIComponent","getUrlQuery","port","host","iobForceHost","lang","systemLang","ready","folders","addFolderDialog","addFolderDialogTitle","editFolderDialog","editFolderDialogTitle","showSearch","moveDialog","newFolder","exportDialog","importDialog","menuOpened","getSystemConfig","systemConfig","getAdapterInstances","adapterName","values","subFolders","prefix","currentFolder","parent","folder","findFolder","getObjectView","_scenes","buildTree","getData","burstIntervall","from","user","ts","acl","parentFolder","_parentFolder","newName","newSelectedId","promises","newId","isIdUnique","getFolderList","subFolder","concat","confirmCb","sceneChangeDialog","noGutters","folderItem","toggleFolder","itemIconFolder","createScene","getNewSceneId","editFolderDialogTitleOrigin","a","b","renderTree","List","list","leftMenuItem","parentId","role","read","write","def","astro","matches","ignoreUnsaved","buttonIcon","addFolder","isUnique","renameFolder","writeScene","importedScene","mainToolbar","textInput","showDrawer","cloneScene","toolbarButtons","renderListToolbar","heightMinusToolbar","Drawer","anchor","paper","drawer","renderDrawerContent","renderSceneTopToolbar","heightMinus2Toolbars","renderSceneSettings","renderSceneMembers","renderSceneBottomToolbar","Container","fullWidthContainer","settingsBackground","heightMinusMargin","membersCell","themeName","renderInOneColumn","renderInMoreThanOneColumn","renderSceneChangeDialog","renderEditFolderDialog","renderMoveDialog","renderAddFolderDialog","renderExportImportDialog","renderError","GenericApp","withWidth","main","tabContent","cursor","paddingBottom","buttonsContainer1","marginTop","noHeight","withTheme","version","getThemeName","Sentry","dsn","release","integrations","SentryIntegrations","build","ReactDOM","onThemeChange","_theme","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.04654416.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nconst styles = theme => ({\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    width100: {\r\n        width: '100%'\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    editItem: {\r\n        display: 'block',\r\n        marginBottom: theme.spacing(2),\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    onTrue: {\r\n        background: 'lightgreen',\r\n    },\r\n    onFalse: {\r\n        background: '#ff9999',\r\n    },\r\n});\r\n\r\nclass SceneForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        this.state = {\r\n            common: sceneObj.common,\r\n            native: sceneObj.native,\r\n            showDialog: null,\r\n            sceneId: props.scene._id,\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const sceneObj = props.scene ? JSON.parse(JSON.stringify(props.scene)) : {};\r\n\r\n        delete sceneObj.native.members;\r\n\r\n        if (JSON.stringify(sceneObj.common) !== JSON.stringify(state.common) || JSON.stringify(sceneObj.native) !== JSON.stringify(state.native)) {\r\n            return {\r\n                common: sceneObj.common,\r\n                native: sceneObj.native,\r\n            };\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    setStateWithParent = (newState, cb) => {\r\n        this.setState(newState, () =>\r\n            this.props.updateScene(newState.common, newState.native, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n                key=\"selectDialog\"\r\n                imagePrefix={'../..'}\r\n                socket={ this.props.socket }\r\n                dialogName=\"memberEdit\"\r\n                title={ I18n.t('Select for ') }\r\n                selected={ null }\r\n                onOk={ this.state.showDialog }\r\n                onClose={ () => this.setState({showDialog: false}) }\r\n            /> : null;\r\n    };\r\n\r\n    renderOnTrueFalse(name) {\r\n        const on = this.state.native[name];\r\n\r\n        return [\r\n            <div key=\"switch\" className={ this.props.classes.editItem }>\r\n                <h4>{ on === this.state.native.onTrue ? (this.state.native.onFalse.enabled ? I18n.t('Trigger for TRUE') : I18n.t('Trigger')) : I18n.t('Trigger for FALSE') }\r\n                    <span className={ this.props.classes.right }>\r\n                        <Switch checked={ !!on.trigger.id }\r\n                                onChange={ e => {\r\n                                    if (e.target.checked) {\r\n                                        this.setState({\r\n                                            showDialog: id => {\r\n                                                const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                native[name].trigger.id = id;\r\n                                                native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                                this.setStateWithParent({native});\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                        native[name].trigger.id = '';\r\n                                        this.setStateWithParent({native});\r\n                                    }\r\n                                } }\r\n                        />\r\n                    </span>\r\n                </h4>\r\n            </div>,\r\n            <div key=\"id\" className={ this.props.classes.editItem }>\r\n                {on.trigger.id ?\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={8}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Trigger ID') }\r\n                                value={ on.trigger.id }\r\n                                onClick={ () => {\r\n                                    this.setState({\r\n                                        showDialog: id => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.id = id;\r\n                                            native[name].trigger.condition = native[name].trigger.condition || '==';\r\n                                            this.setStateWithParent({native});\r\n                                        }\r\n                                    });\r\n                                } }\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2}>\r\n                            <FormControl>\r\n                                <InputLabel shrink={ true }>{ I18n.t('Condition') }</InputLabel>\r\n                                <Select value={ on.trigger.condition || '==' }\r\n                                        onChange={ e => {\r\n                                            const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                            native[name].trigger.condition = e.target.value;\r\n                                            this.setStateWithParent({native});\r\n                                        } }\r\n                                >\r\n                                    <MenuItem value=\"==\">==</MenuItem>\r\n                                    <MenuItem value=\"!=\">!=</MenuItem>\r\n                                    <MenuItem value=\">\">&gt;</MenuItem>\r\n                                    <MenuItem value=\"<\">&lt;</MenuItem>\r\n                                    <MenuItem value=\">=\">&gt;=</MenuItem>\r\n                                    <MenuItem value=\"<=\">&lt;=</MenuItem>\r\n                                    <MenuItem value=\"update\">{ I18n.t('on update') }</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps= {{shrink: true} } label={ I18n.t('Value') }\r\n                                value={ on.trigger.value || '' }\r\n                                onChange={ e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native[name].trigger.value = e.target.value;\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    : null}\r\n            </div>,\r\n            <div key=\"cron\" className={ this.props.classes.editItem }>\r\n                <TextField\r\n                    fullWidth\r\n                    InputLabelProps={{shrink: true}}\r\n                    label={ name === 'onTrue' ? I18n.t('On time (CRON expression)') : I18n.t('Off time (CRON expression)')}\r\n                    value={ on.cron || '' }\r\n                    onChange={e => {\r\n                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                        native[name].cron = e.target.value;\r\n                        this.setStateWithParent({native});\r\n                    }}\r\n                />\r\n            </div>\r\n        ];\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.props.width);\r\n        let result = <Box key=\"sceneForm\" className={ clsx(this.props.classes.columnContainer, !this.props.oneColumn && this.props.classes.height) }>\r\n            <Box className={ this.props.classes.scroll }>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene name') }\r\n                        value={ this.state.common.name }\r\n                        onChange={ e => {\r\n                           const common = JSON.parse(JSON.stringify(this.state.common));\r\n                           common.name = e.target.value;\r\n                           this.setStateWithParent({common});\r\n                       } }/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <TextField\r\n                        fullWidth\r\n                        InputLabelProps={ {shrink: true} }\r\n                        label={ I18n.t('Scene description') }\r\n                        value={ this.state.common.desc }\r\n                        onChange={ e => {\r\n                               const common = JSON.parse(JSON.stringify(this.state.common));\r\n                               common.desc = e.target.value;\r\n                               this.setStateWithParent({common});\r\n                           }\r\n                        }/>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={ 1 }>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControl className={this.props.classes.width100}>\r\n                                <InputLabel shrink={true}>{ I18n.t('Instance') }</InputLabel>\r\n                                <Select\r\n                                    value={ this.state.common.engine }\r\n                                    onChange={e => {\r\n                                        const common = JSON.parse(JSON.stringify(this.state.common));\r\n                                        common.engine = e.target.value;\r\n                                        this.setStateWithParent({common});\r\n                                    }}\r\n                                >\r\n                                    { this.props.instances.map(id => <MenuItem key={ id } value={ id }>{ id.replace('system.adapter.', '') }</MenuItem>) }\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={ {shrink: true} }\r\n                                label={ I18n.t('Interval between commands') }\r\n                                min={ 0 }\r\n                                value={ this.state.native.burstInterval || 0 }\r\n                                helperText=\"ms\"\r\n                                type=\"number\"\r\n                                onChange={e => {\r\n                                    const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                    native.burstInterval = parseInt(e.target.value, 10);\r\n                                    this.setStateWithParent({native});\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Box className={ this.props.classes.editItem }>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            <FormControlLabel\r\n                                style={{paddingTop: 10}}\r\n                                title={ I18n.t('virtual_group_tooltip') }\r\n                                label={ I18n.t('Virtual group') } control={\r\n                                <Checkbox checked={this.state.native.virtualGroup}\r\n                                          onChange={e => {\r\n                                              const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                              native.virtualGroup = e.target.checked;\r\n                                              this.setStateWithParent({native});\r\n                                          }}/>\r\n                            }/>\r\n                        </Grid>\r\n                        <Grid item xs={ 12 } sm={ 6 }>\r\n                            { !this.state.native.virtualGroup ?\r\n                                <FormControlLabel\r\n                                    style={{paddingTop: 10}}\r\n                                    label={I18n.t('Set value if false')}\r\n                                    control={\r\n                                          <Checkbox\r\n                                              checked={ this.state.native.onFalse.enabled }\r\n                                                    onChange={e => {\r\n                                                        const native = JSON.parse(JSON.stringify(this.state.native));\r\n                                                        native.onFalse.enabled = e.target.checked;\r\n                                                        this.setStateWithParent({native});\r\n                                                    }}/>}\r\n                                />\r\n                                : null}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                { !this.state.native.virtualGroup ? this.renderOnTrueFalse('onTrue') : null }\r\n                { !this.state.native.virtualGroup && this.state.native.onFalse.enabled ? this.renderOnTrueFalse('onFalse') : null }\r\n            </Box>\r\n        </Box>;\r\n\r\n        return [\r\n            result,\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateScene: PropTypes.func.isRequired,\r\n    instances: PropTypes.array,\r\n    oneColumn: PropTypes.bool,\r\n    showError: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(SceneForm);","import React from 'react'\r\nimport clsx from 'clsx'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\n// own components\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\n// icons\r\nimport {AiOutlineClockCircle as IconClock} from 'react-icons/ai';\r\nimport {MdDelete as IconDelete} from 'react-icons/md';\r\nimport {MdAdd as IconAdd} from 'react-icons/md';\r\nimport {MdPlayArrow as IconPlay} from 'react-icons/md';\r\nimport {FaFolder as IconFolderClosed} from 'react-icons/fa';\r\nimport {FaFolderOpen as IconFolderOpened} from 'react-icons/fa';\r\nimport ClearIcon from '@material-ui/icons/Close';\r\nimport IconExpandAll from '@material-ui/icons/ExpandMore';\r\nimport IconCollapseAll from '@material-ui/icons/ExpandLess';\r\n\r\nconst TRUE_COLOR       = '#90ee90';\r\nconst FALSE_COLOR      = '#ff9999';\r\nconst TRUE_DARK_COLOR  = '#528952';\r\nconst FALSE_DARK_COLOR = '#774747';\r\nconst UNCERTAIN_COLOR  = '#bfb7be';\r\n\r\nconst styles = theme => ({\r\n    memberTrueFalse: {\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n        fontSize: 'initial',\r\n        fontWeight: 'initial',\r\n        margin: '0 ' + theme.spacing(1) + 'px',\r\n        textAlign: 'right',\r\n        whiteSpace: 'nowrap',\r\n        maxWidth: 300,\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    memberTrue: {\r\n        backgroundColor: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    memberFalse: {\r\n        backgroundColor: 'pink',\r\n    },\r\n    memberUncertain: {\r\n        color: '#FFF',\r\n        backgroundColor: '#808080',\r\n    },\r\n    memberCard: {\r\n        padding: 4,\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    memberFolder: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n    },\r\n    right: {\r\n        float: 'right',\r\n    },\r\n    scroll: {\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        height: '100%',\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    columnContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    alignRight: {\r\n        textAlign: 'right',\r\n    },\r\n    buttonsContainer: {\r\n        '& button': {\r\n            margin: '0 ' + theme.spacing(1) + 'px',\r\n        },\r\n    },\r\n    p: {\r\n        margin: theme.spacing(1) + 'px 0',\r\n    },\r\n    guttersZero: {\r\n        padding: 0,\r\n    },\r\n    sceneTitle: {\r\n        flexGrow: 1,\r\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\r\n    },\r\n    sceneSubTitle: {\r\n        fontSize: 'small',\r\n        borderRadius: 10,\r\n        padding: '2px ' + theme.spacing(1) + 'px',\r\n    },\r\n    sceneTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n    },\r\n    sceneFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n    },\r\n    sceneUncertain: {\r\n        background: UNCERTAIN_COLOR,\r\n    },\r\n    btnTestTrue: {\r\n        background: theme.palette.type === 'dark' ? TRUE_DARK_COLOR : TRUE_COLOR,\r\n        marginRight: theme.spacing(1),\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    btnTestFalse: {\r\n        background: theme.palette.type === 'dark' ? FALSE_DARK_COLOR : FALSE_COLOR,\r\n        marginBottom: theme.spacing(0.5),\r\n    },\r\n    btnExpandAll: {\r\n        float: 'right'\r\n    },\r\n    btnCollapseAll: {\r\n        float: 'right'\r\n    },\r\n    smallOnTrueFalse: {\r\n        fontSize: 'small',\r\n        textAlign: 'right',\r\n        width: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    stateValueTrue: {\r\n        color: '#60a060',\r\n        fontWeight: 'bold',\r\n    },\r\n    stateValueFalse: {\r\n        color: '#c15454',\r\n        fontWeight: 'bold',\r\n    },\r\n    changed: {\r\n        position: 'relative',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            width: 6,\r\n            height: 6,\r\n            borderRadius: 6,\r\n            background: '#FF0000',\r\n            position: 'absolute',\r\n            top: 5,\r\n            right: 5,\r\n        },\r\n    },\r\n    memberDesc: {\r\n        display: 'inline-block',\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n        marginLeft: 50,\r\n    },\r\n    memberTitle: {\r\n        fontSize: 14,\r\n        fontWeight: 'bold',\r\n        marginLeft: 50,\r\n    },\r\n    memberToolbar: {\r\n        width: '100%',\r\n        position: 'relative',\r\n        minHeight: 72,\r\n    },\r\n    memberButtons: {\r\n        textAlign: 'right',\r\n        position: 'absolute',\r\n        top: 2,\r\n        right: 2,\r\n    },\r\n    width100WithButton: {\r\n        width: 'calc(100% - 48px)',\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n    testButtons: {\r\n        minHeight: 48,\r\n    },\r\n    setValue: {\r\n        width: 'calc(50% - ' + theme.spacing(1) + 'px)',\r\n        minWidth: 100,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    disabled: {\r\n        opacity: 0.3\r\n    },\r\n    instanceNotActive: {\r\n        marginLeft: theme.spacing(1),\r\n        fontSize: 10,\r\n        fontStyle: 'italic',\r\n        color: '#FF0000',\r\n    }\r\n});\r\n\r\nclass SceneMembersForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let openedMembers = window.localStorage.getItem('Scenes.openedMembers') || '[]';\r\n        try {\r\n            openedMembers = JSON.parse(openedMembers);\r\n        } catch (e) {\r\n            openedMembers = [];\r\n        }\r\n\r\n        this.state = {\r\n            states: {},\r\n            openedMembers,\r\n            objectTypes: {},\r\n            objectNames: {},\r\n            members: JSON.parse(JSON.stringify(props.members)),\r\n            writeSceneState: '',\r\n            deleteDialog: null,\r\n            onFalseEnabled: props.onFalseEnabled,\r\n            virtualGroup: props.virtualGroup,\r\n            sceneEnabled: props.sceneEnabled,\r\n            selectedSceneChanged: props.selectedSceneChanged,\r\n            engineId: props.engineId,\r\n        };\r\n\r\n        this.engineId = this.state.engineId;\r\n\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.readObjects()\r\n            .then(newState =>\r\n                this.setState(newState, () => {\r\n                    // subscribe on scene state\r\n                    this.props.socket.subscribeState(this.props.sceneId, this.memberStateChange);\r\n                    this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n                    // subscribe on all states\r\n                    this.state.members.forEach(member =>\r\n                        member.id && this.props.socket.subscribeState(member.id, this.memberStateChange))\r\n                }));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.unsubscribeState(this.props.sceneId, this.memberStateChange);\r\n        this.state.engineId && this.props.socket.unsubscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n\r\n        this.state.members.forEach(member =>\r\n            this.props.socket.unsubscribeState(member.id, this.memberStateChange));\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const newState = {};\r\n        let changed = false;\r\n\r\n        if (props.onFalseEnabled !== state.onFalseEnabled) {\r\n            newState.onFalseEnabled = props.onFalseEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.virtualGroup !== state.virtualGroup) {\r\n            newState.virtualGroup = props.virtualGroup;\r\n            changed = true;\r\n        }\r\n        if (props.selectedSceneChanged !== state.selectedSceneChanged) {\r\n            newState.selectedSceneChanged = props.selectedSceneChanged;\r\n            changed = true;\r\n        }\r\n        if (props.sceneEnabled !== state.sceneEnabled) {\r\n            newState.sceneEnabled = props.sceneEnabled;\r\n            changed = true;\r\n        }\r\n        if (props.engineId !== state.engineId) {\r\n            newState.engineId = props.engineId;\r\n            changed = true;\r\n        }\r\n\r\n        return changed ? newState : null;\r\n    }\r\n\r\n    onDragEnd(result) {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n        const members = JSON.parse(JSON.stringify(this.state.members));\r\n        const [removed] = members.splice(result.source.index, 1);\r\n        members.splice(result.destination.index, 0, removed);\r\n\r\n        this.setStateWithParent({members});\r\n    }\r\n\r\n    readObjects() {\r\n        if (this.state.members) {\r\n            return Promise.all(\r\n                this.state.members.map(member =>\r\n                    this.props.socket.getObject(member.id)))\r\n                .then(results => {\r\n                    const objectTypes = {};\r\n                    const objectNames = {};\r\n                    results.forEach(obj => {\r\n                        if (obj && obj.common && obj.common.type) {\r\n                            objectTypes[obj._id] = obj.common.type;\r\n                            objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, false);\r\n                        }\r\n                    });\r\n\r\n                    return {objectTypes, objectNames};\r\n                })\r\n                .catch(e => this.props.showError(e));\r\n        } else {\r\n            return Promise.resolve({});\r\n        }\r\n    }\r\n\r\n    memberStateChange = (id, state) => {\r\n        const states = JSON.parse(JSON.stringify(this.state.states));\r\n        states[id] = state ? state.val : null;\r\n        const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n\r\n        if (!objectTypes[id] && states[id] !== null && states[id] !== undefined) {\r\n            objectTypes[id] = typeof states[id];\r\n        }\r\n\r\n        if (objectTypes[id] === 'boolean') {\r\n            if (states[id] === 'true') {\r\n                states[id] = true;\r\n            }\r\n            if (states[id] === 'false') {\r\n                states[id] = false;\r\n            }\r\n        } else if (objectTypes[id] === 'number') {\r\n            states[id] = parseFloat(states[id]);\r\n        }\r\n\r\n        this.setState({states, objectTypes});\r\n    };\r\n\r\n    createSceneMembers = ids => {\r\n        this.setState({showDialog: false}, () => {\r\n            if (ids.length) {\r\n                const openedMembers = [...this.state.openedMembers];\r\n                const objectTypes = JSON.parse(JSON.stringify(this.state.objectTypes));\r\n                const objectNames = JSON.parse(JSON.stringify(this.state.objectNames));\r\n                const members     = JSON.parse(JSON.stringify(this.state.members));\r\n\r\n                Promise.all(ids.map(id =>\r\n                    // Read type of state\r\n                    this.props.socket.getObject(id)\r\n                        .then(obj => {\r\n                            if (!obj) {\r\n                                return;\r\n                            }\r\n\r\n                            const template = {\r\n                                id,\r\n                                setIfTrue: null,\r\n                                setIfFalse: null,\r\n                                stopAllDelays: true,\r\n                                desc: null,\r\n                                disabled: false,\r\n                                delay: 0\r\n                            };\r\n\r\n                            if (obj) {\r\n                                objectNames[obj._id] = Utils.getObjectNameFromObj(obj, null, {language: I18n.getLanguage()}, true);\r\n                            }\r\n\r\n\r\n                            if (obj && obj.common && obj.common.type) {\r\n                                objectTypes[id] = obj.common.type;\r\n\r\n                                if (objectTypes[id] === 'boolean') {\r\n                                    template.setIfTrue = true;\r\n                                    if (this.state.onFalseEnabled) {\r\n                                        template.setIfFalse = false;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            members.push(template);\r\n\r\n                            // open added state\r\n                            openedMembers.push(id);\r\n                        })\r\n                        .then(() => this.setStateWithParent({objectTypes, objectNames, members, openedMembers}, () =>\r\n                            // Subscribe on all new members\r\n                            ids.forEach(id => this.props.socket.subscribeState(id, this.memberStateChange)))\r\n                        )\r\n                    )\r\n                )\r\n                    .catch(e => this.props.showError(e));\r\n            } else {\r\n                // Show alert\r\n                this.props.showError(I18n.t('Unknown error!'));\r\n            }\r\n        });\r\n    };\r\n\r\n    deleteSceneMember = id => {\r\n        let members = JSON.parse(JSON.stringify(this.state.members));\r\n\r\n        for (let i = 0; i < members.length; i++) {\r\n            if (members[i].id === id) {\r\n                members.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        this.setStateWithParent({members, deleteDialog: null}, () =>\r\n            this.props.socket.unsubscribeState(id, this.memberStateChange));\r\n    };\r\n\r\n    setStateWithParent(newState, cb) {\r\n        const that = this;\r\n        this.setState(newState, () =>\r\n            this.props.updateSceneMembers(that.state.members, cb));\r\n    };\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? <DialogSelectID\r\n            imagePrefix={'../..'}\r\n            key=\"selectDialogMembers\"\r\n            socket={ this.props.socket }\r\n            dialogName=\"memberEdit\"\r\n            multiSelect={ true }\r\n            title={ I18n.t('Select for ') }\r\n            selected={ null }\r\n            onOk={ id => this.createSceneMembers(id) }\r\n            onClose={ () => this.setState({showDialog: false}) }\r\n        /> : null;\r\n    }\r\n\r\n    renderDeleteDialog() {\r\n        if (this.state.deleteDialog === null) {\r\n            return;\r\n        }\r\n\r\n        return <Dialog\r\n            open={ true }\r\n            key=\"deleteDialog\"\r\n            onClose={ () =>\r\n                this.setState({deleteDialog: null}) }\r\n            >\r\n                <DialogTitle>{ I18n.t('Are you sure for delete this state?') }</DialogTitle>\r\n\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: null}) }>\r\n                        {I18n.t('Cancel')}\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={ e => this.deleteSceneMember(this.state.deleteDialog) }>\r\n                        { I18n.t('Delete') }\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>;\r\n    };\r\n\r\n    renderMember = (member, index) => {\r\n        let value = null;\r\n        const classes = this.props.classes;\r\n        if (this.state.states[member.id] !== undefined && this.state.states[member.id] !== null) {\r\n            let _valStr = this.state.states[member.id].toString();\r\n\r\n            if (_valStr === 'true') {\r\n                _valStr = 'TRUE';\r\n            } else if (_valStr === 'false') {\r\n                _valStr = 'FALSE';\r\n            }\r\n\r\n            if (member.setIfTrueTolerance && Math.abs(this.state.states[member.id] - member.setIfTrue) <= member.setIfTrueTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (this.state.states[member.id] === member.setIfTrue) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberTrue) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && member.setIfFalseTolerance && Math.abs(this.state.states[member.id] - member.setIfFalse) <= member.setIfFalseTolerance) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else if (member.setIfFalse !== undefined && this.state.states[member.id] === member.setIfFalse) {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberFalse) }>{ _valStr }</div>;\r\n            } else {\r\n                value = <div\r\n                    title={ I18n.t('Actual state value') }\r\n                    className={ clsx(classes.memberTrueFalse, classes.memberUncertain) }>{ _valStr }</div>;\r\n            }\r\n        }\r\n\r\n        const opened = this.state.openedMembers.includes(member.id);\r\n        const onFalseEnabled = !this.state.virtualGroup && this.state.onFalseEnabled;\r\n        let setIfTrueVisible = true;\r\n\r\n        let setIfTrue = member.setIfTrue;\r\n        if (setIfTrue === undefined || setIfTrue === null) {\r\n            setIfTrue = '';\r\n            setIfTrueVisible = false;\r\n        } else {\r\n            if (setIfTrue === true) {\r\n                setIfTrue = 'TRUE';\r\n            } else if (setIfTrue === false) {\r\n                setIfTrue = 'FALSE';\r\n            } else {\r\n                if (member.setIfTrueTolerance) {\r\n                    setIfTrue = setIfTrue + '±' + member.setIfTrueTolerance;\r\n                } else {\r\n                    setIfTrue = setIfTrue.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        const varType =  this.state.objectTypes[member.id];\r\n\r\n        if (onFalseEnabled && setIfTrueVisible && setIfTrue === '' && (varType === 'number' || varType === 'boolean')) {\r\n            setIfTrueVisible = false;\r\n        }\r\n\r\n        let setIfFalse = member.setIfFalse;\r\n        let setIfFalseVisible = onFalseEnabled;\r\n        if (setIfFalse === undefined || setIfFalse === null) {\r\n            setIfFalse = '';\r\n            setIfFalseVisible = false;\r\n        } else {\r\n            if (setIfFalse === true) {\r\n                setIfFalse = 'TRUE';\r\n            } else if (setIfFalse === false) {\r\n                setIfFalse = 'FALSE';\r\n            } else {\r\n                if (member.setIfFalseTolerance) {\r\n                    setIfFalse = setIfFalse + '±' + member.setIfFalseTolerance;\r\n                } else {\r\n                    setIfFalse = setIfFalse.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (setIfFalseVisible && setIfFalse === '' && (varType === 'number' || varType === 'boolean')) {\r\n            setIfFalseVisible = false;\r\n        }\r\n\r\n        // calculate enabled states\r\n        let countEnabled = 0;\r\n        for (let u = 0; u < index; u++) {\r\n            if (!this.state.members[u].disabled) {\r\n                countEnabled++;\r\n            }\r\n        }\r\n\r\n        return <Paper key={ member.id + '_' + index } className={ clsx(classes.memberCard, member.disabled && classes.disabled) }>\r\n            <div className={ classes.memberToolbar }>\r\n                <IconButton className={ classes.memberFolder} title={ I18n.t('Edit') } onClick={ () => {\r\n                    const openedMembers = [...this.state.openedMembers];\r\n                    const pos = openedMembers.indexOf(member.id);\r\n                    if (pos !== -1) {\r\n                        openedMembers.splice(pos, 1);\r\n                    } else {\r\n                        openedMembers.push(member.id);\r\n                        openedMembers.sort();\r\n                    }\r\n                    window.localStorage.setItem('Scenes.openedMembers', JSON.stringify(openedMembers));\r\n                    this.setState({openedMembers});\r\n                }}>\r\n                    { opened ? <IconFolderOpened/> : <IconFolderClosed/> }\r\n                </IconButton>\r\n                <div className={ classes.memberTitle }>{ member.id }</div>\r\n                <div className={ classes.memberDesc }>{ member.desc || this.state.objectNames[member.id] || '' }</div>\r\n                <div className={ classes.memberButtons }>\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 5 }} aria-label=\"Delete\" title={I18n.t('Delete')}\r\n                        onClick={ () => this.setState({deleteDialog: member.id}) }>\r\n                        <IconDelete/>\r\n                    </IconButton>\r\n                    <Switch\r\n                        checked={ !member.disabled }\r\n                        onChange={ e => {\r\n                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                            members[index].disabled = !e.target.checked;\r\n                            this.setStateWithParent({members});\r\n                        }}\r\n                        name={ member.id }\r\n                    />\r\n                    { value }\r\n                </div>\r\n            </div>\r\n            <div>{ member.desc } { !opened && !member.disabled && (this.props.intervalBetweenCommands || member.delay) ?\r\n                <span> <IconClock/> { this.props.intervalBetweenCommands * countEnabled + (member.delay || 0) + I18n.t('ms') + ' ' + I18n.t('from scene start')}</span> : null }</div>\r\n            {\r\n                opened ?\r\n                    <div>\r\n                        {/*<Box className={classes.p}>\r\n                            <TextField\r\n                                fullWidth\r\n                                InputLabelProps={{shrink: true}} label={I18n.t('Description')}\r\n                                value={member.desc || ''}\r\n                                onChange={e => {\r\n                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                    members[index].desc = e.target.value;\r\n                                    this.setStateWithParent({members});\r\n                                }}\r\n                            />\r\n                        </Box>*/ }\r\n                        { !this.state.virtualGroup ? <Box className={ classes.p }>\r\n                            { this.state.objectTypes[member.id] === 'boolean' ?\r\n                                <FormControl className={ classes.setValue }>\r\n                                    <InputLabel>{ onFalseEnabled ? I18n.t('Setpoint by TRUE') : I18n.t('Setpoint') }</InputLabel>\r\n                                    <Select\r\n                                        value={ member.setIfTrue === true || member.setIfTrue === 'true' ? 'true' : (member.setIfTrue === false || member.setIfTrue === 'false' ? 'false' : 'null')}\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].setIfTrue = e.target.value === 'true' ? true : (e.target.value === 'false' ? false : null);\r\n                                            this.setStateWithParent({members});\r\n                                        } }\r\n                                    >\r\n                                        <MenuItem value=\"false\">FALSE</MenuItem>\r\n                                        <MenuItem value=\"true\">TRUE</MenuItem>\r\n                                        <MenuItem value=\"null\">{I18n.t('NOT CHANGE')}</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                                :\r\n                                <Box className={ classes.p }>\r\n                                    <TextField\r\n                                        InputLabelProps={ {shrink: true} }\r\n                                        label={ onFalseEnabled ? I18n.t('Setpoint by TRUE') : I18n.t('Setpoint') }\r\n                                        value={ member.setIfTrue === undefined || member.setIfTrue === null ? '' : member.setIfTrue }\r\n                                        className={ classes.setValue }\r\n                                        InputProps={{\r\n                                            endAdornment: member.setIfTrue ?\r\n                                                <IconButton\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                        members[index].setIfTrue = null;\r\n                                                        this.setStateWithParent({members});\r\n                                                    }}>\r\n                                                    <ClearIcon />\r\n                                                </IconButton>\r\n                                                : undefined,\r\n                                        }}\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            if (this.state.objectTypes[member.id] === 'number') {\r\n                                                members[index].setIfTrue = parseFloat(e.target.value.replace(',', '.'));\r\n                                            } else {\r\n                                                members[index].setIfTrue = e.target.value;\r\n                                            }\r\n\r\n                                            this.setStateWithParent({members});\r\n                                         } }/>\r\n                                    <TextField\r\n                                        InputLabelProps={ {shrink: true} }\r\n                                        label={ '± ' + (onFalseEnabled ? I18n.t('Tolerance by TRUE') : I18n.t('Tolerance')) }\r\n                                        value={ member.setIfTrueTolerance === undefined || member.setIfTrueTolerance === null ? '' : member.setIfTrueTolerance }\r\n                                        title={ I18n.t('Absolute value, not percent') }\r\n                                        className={ classes.setValue }\r\n                                        InputProps={{\r\n                                            endAdornment: member.setIfTrueTolerance ?\r\n                                                <IconButton\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                        members[index].setIfTrueTolerance = null;\r\n                                                        this.setStateWithParent({members});\r\n                                                    }}>\r\n                                                    <ClearIcon />\r\n                                                </IconButton>\r\n                                                : undefined,\r\n                                        }}\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].setIfTrueTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                                            this.setStateWithParent({members});\r\n                                        } }/>\r\n                                </Box>\r\n                            }\r\n                        </Box> : null }\r\n                        { !this.state.virtualGroup && this.state.onFalseEnabled ?\r\n                            <Box className={ classes.p }>\r\n                                {\r\n                                    this.state.objectTypes[member.id] === 'boolean' ?\r\n                                        <FormControl className={ classes.setValue }>\r\n                                            <InputLabel>{ I18n.t('Setpoint by FALSE') }</InputLabel>\r\n                                            <Select\r\n                                                value={ member.setIfFalse === true || member.setIfFalse === 'true' ? 'true' : (member.setIfFalse === false || member.setIfFalse === 'false' ? 'false' : 'null')}\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].setIfFalse = e.target.value === 'true' ? true : (e.target.value === 'false' ? false : null);\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            >\r\n                                                <MenuItem value=\"false\">FALSE</MenuItem>\r\n                                                <MenuItem value=\"true\">TRUE</MenuItem>\r\n                                                <MenuItem value=\"null\">{I18n.t('NOT CHANGE')}</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        <Box className={ classes.p }>\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                InputLabelProps={ {shrink: true} }\r\n                                                label={ I18n.t('Setpoint by FALSE') }\r\n                                                value={ member.setIfFalse === undefined || member.setIfFalse === null ? '' : member.setIfFalse }\r\n                                                className={ classes.setValue }\r\n                                                InputProps={{\r\n                                                    endAdornment: member.setIfFalse ?\r\n                                                        <IconButton\r\n                                                            size=\"small\"\r\n                                                            onClick={() => {\r\n                                                                const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                                members[index].setIfFalse = null;\r\n                                                                this.setStateWithParent({members});\r\n                                                            }}>\r\n                                                            <ClearIcon />\r\n                                                        </IconButton>\r\n                                                        : undefined,\r\n                                                }}\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    if (this.state.objectTypes[member.id] === 'number') {\r\n                                                        members[index].setIfFalse = parseFloat(e.target.value.replace(',', '.'));\r\n                                                    } else {\r\n                                                        members[index].setIfFalse = e.target.value;\r\n                                                    }\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                            <TextField\r\n                                                InputLabelProps={ {shrink: true} }\r\n                                                label={ '± ' + I18n.t('Tolerance by FALSE') }\r\n                                                title={ I18n.t('Absolute value, not percent') }\r\n                                                value={ member.setIfFalseTolerance === undefined || member.setIfFalseTolerance === null ? '' : member.setIfFalseTolerance }\r\n                                                className={ classes.setValue }\r\n                                                InputProps={{\r\n                                                    endAdornment: member.setIfFalseTolerance ?\r\n                                                        <IconButton\r\n                                                            size=\"small\"\r\n                                                            onClick={() => {\r\n                                                                const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                                members[index].setIfFalseTolerance = null;\r\n                                                                this.setStateWithParent({members});\r\n                                                            }}>\r\n                                                            <ClearIcon />\r\n                                                        </IconButton>\r\n                                                        : undefined,\r\n                                                }}\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].setIfFalseTolerance = e.target.value === '' ? '' : parseFloat(e.target.value.replace(',', '.'));\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                        </Box>\r\n                                }\r\n                            </Box>\r\n                            : null}\r\n                        <Box className={ classes.p }>\r\n                            <Grid container spacing={ 4 }>\r\n                                <Grid item xs={ 12 } sm={ 6 }>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        InputLabelProps={{shrink: true}}\r\n                                        label={ I18n.t('Delay from start of scene (ms)')}\r\n                                        title={ I18n.t(\r\n                                            'Additionally to the interval between commands. E.g. if the interval %s, this state will be set after %s ms from scene start',\r\n                                            this.props.intervalBetweenCommands,\r\n                                            this.props.intervalBetweenCommands * index + (member.delay || 0)\r\n                                        )}\r\n                                        value={ member.delay || 0}\r\n                                        min={ 0 }\r\n                                        type=\"number\"\r\n                                        onChange={e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].delay = parseInt(e.target.value, 10);\r\n                                            this.setStateWithParent({members});\r\n                                        }}/>\r\n                                </Grid>\r\n                                <Grid item xs={ 12 } sm={ 6 }>\r\n                                    <FormControlLabel\r\n                                        label={ I18n.t('Stop already started commands') }\r\n                                        control={\r\n                                            <Checkbox\r\n                                                checked={ member.stopAllDelays }\r\n                                                onChange={ e => {\r\n                                                    const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                                    members[index].stopAllDelays = e.target.checked;\r\n                                                    this.setStateWithParent({members});\r\n                                                } }\r\n                                            />\r\n                                    }/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                        <Box className={ classes.p }>\r\n                            <FormControlLabel\r\n                                label={ I18n.t('Do not overwrite state if it has the required value') }\r\n                                title={\r\n                                    I18n.t('For example, if the value is already at \"%s\" and \"%s\" is the setpoint, then write the value anyway if this checkbox is activated.',\r\n                                        member.setIfTrue === undefined || member.setIfTrue === null ? 'null' : member.setIfTrue.toString(),\r\n                                        member.setIfTrue === undefined || member.setIfTrue === null ? 'null' : member.setIfTrue.toString())\r\n                                }\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={ !!member.doNotOverwrite }\r\n                                        onChange={ e => {\r\n                                            const members = JSON.parse(JSON.stringify(this.state.members));\r\n                                            members[index].doNotOverwrite = e.target.checked;\r\n                                            this.setStateWithParent({members});\r\n                                        } }\r\n                                    />\r\n                            }/>\r\n                        </Box>\r\n                    </div> :\r\n                    (!this.state.virtualGroup ? <div className={ classes.smallOnTrueFalse }>\r\n                        { setIfTrueVisible ? `${onFalseEnabled ? I18n.t('Set if TRUE') : I18n.t('Setpoint')}: ` : ''}\r\n                        { setIfTrueVisible ? <span className={ classes.stateValueTrue }>{ setIfTrue }</span> : null }\r\n                        { setIfFalseVisible && onFalseEnabled ? `${setIfTrueVisible ? ' / ' : ''}${I18n.t('Set if FALSE')}: ` : null}\r\n                        { setIfFalseVisible && onFalseEnabled ? <span className={ classes.stateValueFalse }>{ setIfFalse }</span> : null}\r\n                    </div> : <div style={ {height: 8} }/>)\r\n            }\r\n        </Paper>\r\n    };\r\n\r\n    onWriteScene(val) {\r\n        if (val === 'true') {\r\n            val = true;\r\n        } else if (val === 'false') {\r\n            val = false;\r\n        } else if (typeof val === 'string' && parseFloat(val.replace(',', '.')).toString() === val) {\r\n            val = parseFloat(val.replace(',', '.'));\r\n        }\r\n\r\n        this.props.socket.setState(this.props.sceneId, val)\r\n            .catch(e => this.props.showError(e));\r\n    }\r\n\r\n    getItemStyle = (isDragging, draggableStyle) => ({\r\n        // some basic styles to make the items look a bit nicer\r\n        userSelect: 'none',\r\n        background: isDragging ? 'lightgreen' : 'inherit',\r\n\r\n        // styles we need to apply on draggables\r\n        ...draggableStyle\r\n    });\r\n\r\n    getListStyle = isDraggingOver => ({\r\n        background: isDraggingOver ? 'lightblue' : 'inherit',\r\n    });\r\n\r\n    render = () => {\r\n        let sceneState = this.state.states[this.props.sceneId];\r\n        if (this.state.selectedSceneChanged) {\r\n            sceneState = I18n.t('Save scene before test');\r\n        } else if (sceneState === undefined || sceneState === null) {\r\n            sceneState = '';\r\n        }\r\n\r\n        if (this.engineId !== this.state.engineId) {\r\n            this.engineId && this.props.socket.unsubscribeState(this.engineId + '.alive', this.memberStateChange);\r\n            this.state.engineId && this.props.socket.subscribeState(this.state.engineId + '.alive', this.memberStateChange);\r\n            this.engineId = this.state.engineId;\r\n        }\r\n\r\n        const onFalseEnabled =!this.state.virtualGroup && this.state.onFalseEnabled;\r\n\r\n        let result = <div key=\"SceneMembersForm\" className={ clsx(!this.props.oneColumn && this.props.classes.height, this.props.classes.columnContainer) }>\r\n            <Toolbar classes={{ gutters: this.props.classes.guttersZero }}>\r\n                <Typography variant=\"h6\" className={ clsx(this.props.classes.sceneTitle) } >\r\n                    { I18n.t('Scene states') }{ !this.state.states[this.state.engineId + '.alive'] ? <span className={ this.props.classes.instanceNotActive }>{ I18n.t('Instance not active') }</span> : ''}\r\n                    <br/>\r\n                    <span className={ clsx(\r\n                        this.props.classes.sceneSubTitle,\r\n                        !this.state.virtualGroup && sceneState === true && this.props.classes.sceneTrue,\r\n                        !this.state.virtualGroup && sceneState === false && this.props.classes.sceneFalse,\r\n                        !this.state.virtualGroup && sceneState === 'uncertain' && this.props.classes.sceneUncertain,\r\n                    ) }>{ I18n.t('Scene state:') } { sceneState === true ? 'TRUE' : (sceneState === false ? 'FALSE' : sceneState.toString()) }</span>\r\n                </Typography>\r\n                <IconButton title={I18n.t('Add new state')} onClick={() => this.setState({showDialog: true})}>\r\n                    <IconAdd/>\r\n                </IconButton>\r\n            </Toolbar>\r\n            <div className={ clsx(this.props.classes.testButtons, this.props.classes.width100) }>\r\n                {  !this.state.selectedSceneChanged && this.state.virtualGroup ? <TextField\r\n                    className={ this.props.classes.width100WithButton }\r\n                    label={ I18n.t('Write to virtual group') }\r\n                    defaultValue={ sceneState }\r\n                    onKeyUp={e => e.keyCode === 13 && this.onWriteScene(this.state.writeSceneState)}\r\n                    onChange={e => this.setState({writeSceneState: e.target.value}) }\r\n                /> : null}\r\n                { !this.state.selectedSceneChanged && this.state.virtualGroup && this.state.members.length ? <IconButton\r\n                    onClick={e => this.onWriteScene(this.state.writeSceneState) }\r\n                ><IconPlay/></IconButton> : null}\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && !this.state.virtualGroup ? <Button\r\n                    className={ this.props.classes.btnTestTrue }\r\n                    onClick={ () => this.onWriteScene(true) }\r\n                ><IconPlay/>{ !onFalseEnabled ? I18n.t('Test') : I18n.t('Test TRUE') }</Button> : null }\r\n                { this.state.sceneEnabled && !this.state.selectedSceneChanged && onFalseEnabled && this.state.members.length ? <Button\r\n                    className={ this.props.classes.btnTestFalse }\r\n                    onClick={ () => this.onWriteScene(false) }\r\n                ><IconPlay/>{ I18n.t('Test FALSE') }</Button> : null }\r\n                {this.state.members.length > 1 && this.state.openedMembers.length ? <IconButton\r\n                    title={I18n.t('Collapse all')}\r\n                    className={ this.props.classes.btnCollapseAll }\r\n                    onClick={ () => {\r\n                        window.localStorage.setItem('Scenes.openedMembers', '[]');\r\n                        this.setState({openedMembers: []});\r\n                    } }\r\n                ><IconCollapseAll/></IconButton> : null }\r\n                {this.state.members.length > 1 && this.state.openedMembers.length !== this.state.members.length ? <IconButton\r\n                    title={I18n.t('Expand all')}\r\n                    className={ this.props.classes.btnExpandAll }\r\n                    onClick={ () => {\r\n                        const openedMembers = this.state.members.map(member => member.id);\r\n                        window.localStorage.setItem('Scenes.openedMembers', JSON.stringify(openedMembers));\r\n                        this.setState({openedMembers});\r\n                    } }\r\n                ><IconExpandAll/></IconButton> : null }\r\n            </div>\r\n            <DragDropContext onDragEnd={ this.onDragEnd }>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div className={ this.props.classes.scroll }\r\n                             {...provided.droppableProps}\r\n                             ref={ provided.innerRef }\r\n                             style={ this.getListStyle(snapshot.isDraggingOver) }\r\n                        >\r\n                            { this.state.members.map((member, i) =>\r\n                                <Draggable key={ member.id + '_' + i } draggableId={ member.id + '_' + i } index={ i }>\r\n                                    {(provided, snapshot) =>\r\n                                        <div\r\n                                            ref={ provided.innerRef }\r\n                                            {...provided.draggableProps }\r\n                                            {...provided.dragHandleProps }\r\n                                            style={ this.getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            ) }\r\n                                        >{ this.renderMember(member, i) }</div>}\r\n                                </Draggable>\r\n                            )}\r\n                            { provided.placeholder }\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>;\r\n\r\n        return [\r\n            result,\r\n            this.renderDeleteDialog(),\r\n            this.renderSelectIdDialog()\r\n        ];\r\n    }\r\n}\r\n\r\nSceneMembersForm.propTypes = {\r\n    classes: PropTypes.object,\r\n    socket: PropTypes.object,\r\n    scene: PropTypes.object,\r\n    updateSceneMembers: PropTypes.func,\r\n    sceneId: PropTypes.string,\r\n    onFalseEnabled: PropTypes.bool,\r\n    virtualGroup: PropTypes.bool,\r\n    sceneEnabled: PropTypes.bool,\r\n    selectedSceneChanged: PropTypes.bool,\r\n    intervalBetweenCommands: PropTypes.number,\r\n    engineId: PropTypes.string,\r\n    oneColumn: PropTypes.bool,\r\n    showError: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(SceneMembersForm);","// Common\nimport React from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Alert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-noconflict/mode-json';\nimport 'ace-builds/src-noconflict/theme-clouds_midnight';\nimport 'ace-builds/src-noconflict/theme-chrome';\nimport 'ace-builds/src-noconflict/ext-language_tools'\n\n// Own\nimport I18n from '@iobroker/adapter-react/i18n';\nimport copy from '@iobroker/adapter-react/Components/copy-to-clipboard';\n\nconst styles = theme => ({\n    divWithoutTitle: {\n        width: '100%',\n        height: '100%',\n        border: '2px solid #00000000',\n    },\n    error: {\n        border: '2px solid #FF0000',\n    },\n});\n\nclass ExportImportDialog extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: props.sceneObj ? JSON.stringify(props.sceneObj, null, 2) : '',\n            error: false,\n            toast: '',\n        };\n    }\n\n    onChange(value) {\n        const newState = {text: value};\n        try {\n            JSON.parse(value);\n            if (this.state.error) {\n                newState.error = false;\n            }\n\n            this.setState(newState);\n        } catch (e) {\n            newState.error = true;\n            this.setState(newState);\n        }\n    }\n\n    renderToast() {\n        return <Snackbar open={ !!this.state.toast } autoHideDuration={ 3000 } onClick={ () => this.setState({ toast: '' }) } onClose={ () => this.setState({ toast: '' }) }>\n            <Alert color=\"info\" severity=\"success\" >{ this.state.toast }</Alert>\n        </Snackbar>;\n    }\n\n    render() {\n        return <Dialog\n            open={ true }\n            onClose={ () => this.props.onClose() }\n            aria-labelledby=\"export-dialog-title\"\n            fullWidth\n            maxWidth=\"lg\"\n            fullScreen={ true }\n            aria-describedby=\"export-dialog-description\"\n        >\n            <DialogTitle id=\"export-dialog-title\">{ this.props.isImport ? I18n.t('Import scene') : I18n.t('Export scene') }</DialogTitle>\n            <DialogContent>\n                <div className={ clsx(this.props.classes.divWithoutTitle, this.state.error && this.props.classes.error) }>\n                    <AceEditor\n                        autoFocus\n                        mode=\"json\"\n                        width=\"100%\"\n                        height=\"100%\"\n                        onLoad={editor => {\n                            this.codeEditor = editor;\n                            this.codeEditor.focus();\n                        }}\n                        theme={ this.props.themeType === 'dark' ? 'clouds_midnight' : 'chrome' }\n                        onChange={ newValue => this.onChange(newValue) }\n                        value={ this.state.text || '' }\n                        name=\"UNIQUE_ID_OF_DIV\"\n                        fontSize={ 14 }\n                        readOnly={ !this.props.isImport }\n                        editorProps={{ $blockScrolling: true }}\n                    />\n                </div>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={ () => this.props.onClose() } autoFocus={ !this.props.isImport }>\n                    { I18n.t('Close') }\n                </Button>\n                { this.props.isImport ?\n                    <Button\n                        disabled={ !this.state.text || this.state.error }\n                        onClick={ () => this.props.onClose(JSON.parse(this.state.text)) }\n                        color=\"primary\"\n                    >\n                        { I18n.t('Import') }\n                    </Button>\n                    :\n                    <Button onClick={ () => {\n                        copy(this.state.text);\n                        this.setState({ toast: I18n.t('Copied') });\n                        setTimeout(() => this.props.onClose(), 500);\n                    } } color=\"primary\" autoFocus>\n                        { I18n.t('Copy to clipboard') }\n                    </Button>}\n                { this.renderToast() }\n            </DialogActions>\n        </Dialog>;\n    }\n}\n\nExportImportDialog.propTypes = {\n    classes: PropTypes.object,\n    sceneObj: PropTypes.object,\n    themeType: PropTypes.string,\n    onClose: PropTypes.func,\n    isImport: PropTypes.bool,\n};\n\nexport default withStyles(styles)(ExportImportDialog);","// Common\nimport React from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport { withTheme } from '@material-ui/core/styles';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport withWidth from \"@material-ui/core/withWidth\";\n\n// MaterialUi\nimport Grid from '@material-ui/core/Grid';\nimport Switch from '@material-ui/core/Switch';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Drawer from '@material-ui/core/Drawer';\n\n// Own\nimport Utils from '@iobroker/adapter-react/Components/Utils';\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\nimport Loader from '@iobroker/adapter-react/Components/Loader'\nimport I18n from '@iobroker/adapter-react/i18n';\n\nimport SceneForm from './components/SceneForm';\nimport SceneMembersForm from './components/SceneMembersForm';\nimport ExportImportDialog from './components/ExportImportDialog';\n\n// icons\nimport {MdExpandLess as IconCollapse} from 'react-icons/md';\nimport {MdExpandMore as IconExpand} from 'react-icons/md';\nimport {MdAdd as IconAdd} from 'react-icons/md';\nimport {MdModeEdit as IconEdit} from 'react-icons/md';\nimport {MdCreateNewFolder as IconFolderAdd} from 'react-icons/md';\nimport {MdClose as IconCancel} from 'react-icons/md';\nimport {MdCheck as IconCheck} from 'react-icons/md';\nimport {MdSave as IconSave} from 'react-icons/md';\nimport {MdDelete as IconDelete} from 'react-icons/md';\nimport {MdFileDownload as IconExport} from 'react-icons/md';\nimport {FaScroll as IconScript} from 'react-icons/all';\nimport {FaFolder as IconFolderClosed} from 'react-icons/all';\nimport {FaFolderOpen as IconFolderOpened} from 'react-icons/all';\n// import {MdFileUpload as IconImport} from 'react-icons/md';\nimport {FaClone as IconClone} from 'react-icons/fa';\nimport {FaBars as IconMenu} from 'react-icons/fa';\nimport {BsFolderSymlink as IconMoveToFolder} from 'react-icons/bs';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nconst LEVEL_PADDING = 16;\nconst MARGIN_MEMBERS = 20;\n\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        height: 'calc(100% + 4px)',\n        backgroundColor: theme.palette.type === 'dark' ? '#000': '#fff',\n        overflowX: 'hidden',\n    },\n    mainToolbar: {\n        background: theme.palette.primary.main,\n    },\n    tabContent: {\n        padding: 10,\n        height: 'calc(100% - 64px - 48px - 20px)',\n        overflow: 'auto'\n    },\n    textInput: {\n        display: 'block',\n    },\n    width100: {\n        width: '100%',\n    },\n    noGutters: {\n        paddingLeft: 0,\n        paddingRight: 0,\n    },\n    height: {\n        height: '100%',\n    },\n    heightMinusToolbar: {\n        height: 'calc(100% - 48px)',\n    },\n    heightMinus2Toolbars: {\n        height: 'calc(100% - 96px)',\n    },\n    heightMinusMargin: {\n        height: 'calc(100% - ' + MARGIN_MEMBERS + 'px)',\n    },\n    folderItem: {\n        fontWeight: 'bold',\n        cursor: 'pointer',\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\n    },\n    fullWidthContainer: {\n        maxWidth: 'inherit',\n        paddingTop: 2,\n        paddingBottom: 2,\n        paddingLeft: 2,\n        paddingRight: 2,\n        overflow: 'hidden'\n    },\n    columnContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    scroll: {\n        overflowY: 'auto',\n        overflowX: 'hidden',\n        height: '100%',\n        width: '100%',\n    },\n    buttonsContainer1: {\n        '& button': {\n            margin: '0 ' + theme.spacing(1) + 'px',\n        },\n    },\n    alignRight: {\n        textAlign: 'right',\n    },\n    list: {\n        width: '100%',\n        padding: 0,\n    },\n    right: {\n        float: 'right',\n    },\n    membersCell: {\n        backgroundColor: theme.palette.type === 'dark' ? '#566770': '#ADD8E6',\n        marginTop: MARGIN_MEMBERS,\n        marginRight: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n        paddingTop: 0,\n        paddingLeft: 10,\n        paddingRight: 10,\n        paddingBottom: 10,\n\n        borderRadius: 4,\n        height: 'calc(100% - ' + theme.spacing(1) + 'px)',\n    },\n    leftMenuItem: {\n        display: 'block',\n        borderRadius: 10,\n    },\n    p: {\n        margin: '1em 0',\n    },\n    changed: {\n        position: 'relative',\n        '&:after': {\n            content: '\"\"',\n            width: 6,\n            height: 6,\n            borderRadius: 6,\n            background: '#FF0000',\n            position: 'absolute',\n            top: 5,\n            right: 5,\n        },\n    },\n    sceneTitle: {\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\n        flexGrow: 1,\n        paddingLeft: theme.spacing(1),\n    },\n    sceneSubTitle: {\n        fontSize: 'small',\n        display: 'block'\n    },\n    toolbarButtons: {\n        marginRight: theme.spacing(1),\n    },\n    settingsBackground: {\n        background: theme.palette.type === 'dark' ? '#3a3a3a': '#eeeeee',\n    },\n    listItemTitle: {\n        color: theme.palette.type === 'dark' ? '#FFF': '#000',\n    },\n    listItemSubTitle: {\n        color: theme.palette.type === 'dark' ? '#bababa': '#2a2a2a',\n    },\n    disabled: {\n        opacity: 0.3\n    },\n    itemIconRoot: {\n        minWidth: 24 + theme.spacing(1),\n    },\n    itemIcon: {\n        width: 24,\n        height: 24,\n    },\n    itemIconFolder: {\n        color: theme.palette.type === 'dark' ? '#ffca2c' : '#ffca2c'\n    },\n    noHeight: {\n        height: 'inherit',\n    },\n    drawer: {\n        overflow: 'hidden'\n    },\n});\n\nfunction getUrlQuery() {\n    const parts = (window.location.search || '').replace(/^\\?/, '').split('&');\n    const query = {};\n    parts.forEach(item => {\n        const [name, val] = item.split('=');\n        query[decodeURIComponent(name)] = val !== undefined ? decodeURIComponent(val) : true;\n    });\n    return query;\n}\n\nfunction getFolderPrefix(sceneId) {\n    let result = sceneId.split('.');\n    result.shift();\n    result.shift();\n    result.pop();\n    result = result.join('.');\n    return result;\n}\n\nfunction getFolderList(folder) {\n    let result = [];\n    result.push(folder);\n    Object.values(folder.subFolders).forEach(subFolder =>\n        result = result.concat(getFolderList(subFolder)));\n\n    return result;\n}\n\nconst FORBIDDEN_CHARS = /[.\\][*,;'\"`<>\\\\?]/g;\n\nclass App extends GenericApp {\n    constructor(props) {\n        const extendedProps = {...props};\n        extendedProps.translations = {\n            'en': require('./i18n/en'),\n            'de': require('./i18n/de'),\n            'ru': require('./i18n/ru'),\n            'pt': require('./i18n/pt'),\n            'nl': require('./i18n/nl'),\n            'fr': require('./i18n/fr'),\n            'it': require('./i18n/it'),\n            'es': require('./i18n/es'),\n            'pl': require('./i18n/pl'),\n            'zh-cn': require('./i18n/zh-cn'),\n        };\n\n        super(props, extendedProps);\n\n        const query = getUrlQuery();\n\n        this.port = query.port || (window.location.port === '3000' ? 8081 : window.location.port);\n        this.host = query.host || window.location.hostname;\n\n        window.iobForceHost = this.host;\n    }\n\n    onConnectionReady() {\n        let opened;\n        try {\n            opened = JSON.parse(window.localStorage.getItem('Scenes.opened')) || [];\n        } catch (e) {\n            opened = [];\n        }\n\n        const newState = {\n            lang: this.socket.systemLang,\n            ready: false,\n            selectedSceneId: window.localStorage.getItem('Scenes.selectedSceneId') || '',\n            opened,\n            scenes: {},\n            folders: null,\n            search: null,\n            addFolderDialog: null,\n            addFolderDialogTitle: null,\n            editFolderDialog: null,\n            editFolderDialogTitle: null,\n            changingScene: '',\n            showSearch: null,\n            instances: [],\n            selectedSceneChanged: false,\n            deleteDialog: null,\n            moveDialog: null,\n            newFolder: '',\n            selectedSceneData: null,\n            exportDialog: false,\n            importDialog: false,\n            menuOpened: false,\n        };\n\n        this.socket.getSystemConfig()\n            .then(systemConfig => {\n                newState.systemConfig = systemConfig;\n\n                return this.socket.getAdapterInstances(window.adapterName)\n                    .then(instances => {\n                        newState.instances = instances.map(item => item._id);\n                        this.setState(newState, () =>\n                            this.refreshData());\n                    });\n            })\n            .catch(e => this.showError(e));\n    }\n\n    sceneSwitch = event => {\n        const id = event.target.name;\n        let scenes = JSON.parse(JSON.stringify(this.state.scenes));\n\n        if (id === this.state.selectedSceneId) {\n            scenes[id] = JSON.parse(JSON.stringify(this.state.selectedSceneData));\n            scenes[id].common.enabled = event.target.checked;\n        }\n\n        scenes[id].common.enabled = event.target.checked;\n\n        this.socket.setObject(id, scenes[id])\n            .then(() => this.refreshData(id))\n            .catch(e => this.showError(e));\n    };\n\n    buildTree(scenes) {\n        scenes = Object.values(scenes);\n\n        let folders = {subFolders: {}, scenes: {}, id: '', prefix: ''};\n\n        // create missing folders\n        scenes.forEach((scene) => {\n            let id = scene._id;\n            const parts = id.split('.');\n            parts.shift();\n            parts.shift();\n            let currentFolder = folders;\n            let prefix = '';\n            for (let i = 0; i < parts.length - 1; i++) {\n                if (prefix) {\n                    prefix = prefix + '.';\n                }\n                prefix = prefix + parts[i];\n                if (!currentFolder.subFolders[parts[i]]) {\n                    currentFolder.subFolders[parts[i]] = {\n                        subFolders: {},\n                        scenes: {},\n                        id: parts[i],\n                        prefix,\n                    }\n                }\n                currentFolder = currentFolder.subFolders[parts[i]];\n            }\n            currentFolder.scenes[id] = scene;\n        });\n\n        return folders;\n    }\n\n    findFolder(parent, folder) {\n        if (parent.prefix === folder.prefix) {\n            return parent;\n        }\n        for (let index in parent.subFolders) {\n            let result = this.findFolder(parent.subFolders[index], folder);\n            if (result) {\n                return result;\n            }\n        }\n    }\n\n    getData() {\n        let scenes;\n        return this.socket.getObjectView('scene.0.', 'scene.\\u9999', 'state')\n            .then(_scenes => {\n                scenes = _scenes;\n                return {scenes, folders: this.buildTree(scenes)};\n            })\n            .catch(e => this.showError(e));\n    }\n\n    refreshData(changingScene) {\n        const that = this;\n        return new Promise(resolve => {\n            if (changingScene) {\n                this.setState({changingScene}, () => resolve());\n            } else {\n                this.setState({ready: false}, () => resolve());\n            }\n        })\n            .then(() => this.getData())\n            .then(newState => {\n                newState.ready = true;\n                newState.changingScene = '';\n                newState.selectedSceneChanged = false;\n\n                // Fill missing data\n                Object.keys(newState.scenes).forEach(id => {\n                    const sceneObj = newState.scenes[id];\n                    sceneObj.common = sceneObj.common || {};\n                    sceneObj.native = sceneObj.native || {};\n\n                    // rename attribute\n                    if (sceneObj.native.burstIntervall !== undefined) {\n                        sceneObj.native.burstInterval = sceneObj.native.burstIntervall;\n                        delete sceneObj.native.burstIntervall;\n                    }\n\n                    sceneObj.native.burstInterval = parseInt(sceneObj.native.burstInterval || 0, 10);\n                    sceneObj.native.onFalse = sceneObj.native.onFalse || {};\n                    sceneObj.native.onTrue  = sceneObj.native.onTrue  || {};\n                    sceneObj.native.onFalse.trigger = sceneObj.native.onFalse.trigger || {condition: '=='};\n                    sceneObj.native.onTrue.trigger  = sceneObj.native.onTrue.trigger  || {condition: '=='};\n                    sceneObj.native.members = sceneObj.native.members || [];\n                    const members = sceneObj.native.members;\n                    delete sceneObj.native.members;\n                    sceneObj.native.members = members; // place it on the last place\n\n                    delete sceneObj.from;\n                    delete sceneObj.user;\n                    delete sceneObj.ts;\n                    delete sceneObj.acl;\n                });\n\n                if (!newState.scenes[this.state.selectedSceneId]) {\n                    newState.selectedSceneId = Object.keys(newState.scenes).shift() || '';\n                }\n\n                if ((newState.selectedSceneId || that.state.selectedSceneId) &&\n                    newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]) {\n                    newState.selectedSceneData = JSON.parse(JSON.stringify(newState.scenes[newState.selectedSceneId || that.state.selectedSceneId]));\n                } else {\n                    newState.selectedSceneData = null;\n                }\n\n                that.setState(newState);\n            });\n    }\n\n    addFolder(parentFolder, id) {\n        let folders = JSON.parse(JSON.stringify(this.state.folders));\n        let _parentFolder = this.findFolder(folders, parentFolder);\n\n        let opened = JSON.parse(JSON.stringify(this.state.opened));\n\n        _parentFolder.subFolders[id] = {\n            scenes: {},\n            subFolders: {},\n            id,\n            prefix: _parentFolder.prefix ? _parentFolder.prefix + '.' + id : id\n        };\n\n        opened.push(id);\n\n        this.setState({folders, opened});\n    }\n\n    addSceneToFolderPrefix = (scene, folderPrefix, noRefresh) => {\n        let oldId = scene._id;\n        let sceneId = scene._id.split('.').pop();\n        scene._id = 'scene.0.' + folderPrefix + (folderPrefix ? '.' : '') + sceneId;\n\n        return this.socket.delObject(oldId)\n            .then(() => {\n                console.log('Deleted ' + oldId);\n                return this.socket.setObject(scene._id, scene)\n            })\n            .catch(e => this.showError(e))\n            .then(() => {\n                console.log('Set new ID: ' + scene._id);\n                return !noRefresh && this.refreshData(sceneId)\n                    .then(() => this.changeSelectedScene(scene._id))\n                    .catch(e => this.showError(e));\n            });\n    };\n\n    renameFolder(folder, newName) {\n        return new Promise(resolve => this.setState({changingScene: folder}, () => resolve()))\n            .then(() => {\n                let newSelectedId;\n                let pos;\n                // if selected folder opened, replace its ID in this.state.opened\n                if ((pos = this.state.opened.indexOf(folder.prefix)) !== -1) {\n                    const opened = [...this.state.opened];\n                    opened.splice(pos, 1);\n                    opened.push(newName);\n                    opened.sort();\n                    this.setState({opened});\n                }\n\n                let prefix = folder.prefix.split('.');\n                prefix[prefix.length - 1] = newName;\n                prefix = prefix.join('.');\n\n                if (Object.keys(folder.scenes).find(id => id === this.state.selectedSceneId)) {\n                    newSelectedId = 'scene.0.' + prefix + '.' + this.state.selectedSceneId.split('.').pop();\n                }\n\n                const promises = Object.keys(folder.scenes).map(sceneId =>\n                    this.addSceneToFolderPrefix(folder.scenes[sceneId], prefix, true));\n\n                return Promise.all(promises)\n                    .then(() => this.refreshData(folder))\n                    .then(() => newSelectedId && this.setState({selectedSceneId: newSelectedId}));\n            });\n    }\n\n    renderMoveDialog() {\n        if (!this.state.moveDialog) {\n            return null;\n        }\n\n        const newFolder = this.state.newFolder === '__root__' ? '' : this.state.newFolder;\n        const sceneId = this.state.selectedSceneId.split('.').pop();\n        const newId = 'scene.0.' + newFolder + (newFolder ? '.' : '') + sceneId;\n\n        const isIdUnique = !Object.keys(this.state.scenes).find(id => id === newId);\n\n        return <Dialog\n            open={ true }\n            key=\"moveDialog\"\n            onClose={ () => this.setState({moveDialog: null}) }\n        >\n            <DialogTitle>{ I18n.t('Move to folder') }</DialogTitle>\n            <DialogContent>\n                <FormControl classes={ {root: this.props.classes.width100} }>\n                    <InputLabel shrink={ true }>{ I18n.t('Folder') }</InputLabel>\n                    <Select\n                        className={ this.props.classes.width100 }\n                        value={ this.state.newFolder || '__root__' }\n                        onChange={e => this.setState({newFolder: e.target.value}) }>\n                        { getFolderList(this.state.folders).map(folder =>\n                            <MenuItem\n                                key={ folder.prefix }\n                                value={ folder.prefix || '__root__' }\n                            >\n                                { folder.prefix ? folder.prefix.replace('.', ' > ') : I18n.t('Root') }\n                            </MenuItem>)\n                        }\n                    </Select>\n                </FormControl>\n            </DialogContent>\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                <Button variant=\"contained\" onClick={ () => this.setState({moveDialog: null}) }>\n                    { I18n.t('Cancel') }\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    disabled={ !isIdUnique }\n                    color=\"primary\" onClick={ e =>\n                        this.setState({moveDialog: null}, () =>\n                            this.addSceneToFolderPrefix(this.state.scenes[this.state.selectedSceneId], this.state.newFolder === '__root__' ? '' : this.state.newFolder))\n                    }\n                >\n                    { I18n.t('Move to folder') }\n                </Button>\n            </DialogActions>\n        </Dialog>;\n    }\n\n    /*deleteFolder(folder) {\n        if (Object.values(folder.scenes).length) {\n            return this.showError(I18n.t('Cannot delete non-empty folder'));\n        } else {\n            //delete folder;\n            this.setState(this.state);\n        }\n    }*/\n\n    renderTreeScene = (item, level) => {\n        const scene = this.state.scenes[item._id];\n        if (!scene || (this.state.search && !item.common.name.includes(this.state.search))) {\n            return null;\n        }\n\n        level = level || 0;\n\n        const changed = this.state.selectedSceneId && this.state.selectedSceneId === scene._id && this.state.selectedSceneChanged;\n\n        return <ListItem\n            style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\n            key={ item._id }\n            selected={ this.state.selectedSceneId ? this.state.selectedSceneId === scene._id : false }\n            button\n            className={ clsx(changed && this.props.classes.changed, !scene.common.enabled && this.props.classes.disabled) }\n            onClick={ () =>\n                this.changeSelectedScene(scene._id)\n                    .catch(() => console.log('ignore')) }>\n            <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} }><IconScript className={ this.props.classes.itemIcon }/></ListItemIcon>\n            <ListItemText\n                classes={ {primary: this.props.classes.listItemTitle, secondary: this.props.classes.listItemSubTitle} }\n                primary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) }\n                secondary={ Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}, true) }\n                />\n            <ListItemSecondaryAction>\n                {this.state.changingScene === scene._id ?\n                    <CircularProgress size={ 24 }/>\n                    :\n                    <Switch\n                        checked={ scene.common.enabled }\n                        onChange={ this.sceneSwitch }\n                        name={ scene._id }\n                    />\n                }\n            </ListItemSecondaryAction>\n        </ListItem>;\n    };\n\n    toggleFolder(folder) {\n        const opened = [...this.state.opened];\n        const pos = opened.indexOf(folder.prefix);\n        if (pos === -1) {\n            opened.push(folder.prefix);\n        } else {\n            opened.splice(pos, 1);\n\n            // If active scene is inside this folder select the first scene\n            if (Object.keys(folder.scenes).includes(this.state.selectedSceneId)) {\n                // To do ask question\n                if (this.state.selectedSceneChanged) {\n                    this.confirmCb = () => {\n                        this.setState({selectedSceneId: '', selectedSceneData: null, selectedSceneChanged: false, opened});\n                        window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\n                    };\n                    return this.setState({sceneChangeDialog: 'empty'});\n                }\n\n                this.setState({selectedSceneId: '', selectedSceneData: null, selectedSceneChanged: false});\n            }\n        }\n\n        window.localStorage.setItem('Scenes.opened', JSON.stringify(opened));\n\n        this.setState({opened});\n    }\n\n    renderTree(parent, level) {\n        let result = [];\n        level = level || 0;\n        let opened = this.state.opened ? this.state.opened.includes(parent.prefix) : false;\n\n        // Show folder item\n        parent && parent.id && result.push(<ListItem\n            key={ parent.prefix }\n            classes={ {gutters: this.props.classes.noGutters} }\n            className={ clsx(this.props.classes.width100, this.props.classes.folderItem) }\n            style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\n        >\n            <ListItemIcon classes={ {root: this.props.classes.itemIconRoot} } onClick={ () => this.toggleFolder(parent) }>{ opened ?\n                <IconFolderOpened className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/> :\n                <IconFolderClosed className={ clsx(this.props.classes.itemIcon, this.props.classes.itemIconFolder) }/>\n            }</ListItemIcon>\n            <ListItemText>{ parent.id }</ListItemText>\n            <ListItemSecondaryAction>\n                <IconButton onClick={ () => this.toggleFolder(parent) } title={ opened ? I18n.t('Collapse') : I18n.t('Expand')  }>\n                    { opened ? <IconExpand/> : <IconCollapse/> }\n                </IconButton>\n            </ListItemSecondaryAction>\n        </ListItem>);\n\n        if (parent && (opened || !parent.id)) { // root cannot be closed and have id === ''\n            parent.id && result.push(<ListItem key={ 'keys_' + parent.prefix }>\n                <ListItemSecondaryAction>\n                    <IconButton\n                        onClick={() => this.createScene(this.getNewSceneId(), parent.id) }\n                        title={ I18n.t('Create new scene') }\n                    ><IconAdd/></IconButton>\n                    { /* <IconButton\n                        onClick={() => this.setState({addFolderDialog: parent, addFolderDialogTitle: ''})}\n                        title={ I18n.t('Create new folder') }\n                    ><IconFolderAdd/></IconButton> */ }\n\n                    <IconButton onClick={ () => this.setState({editFolderDialog: parent, editFolderDialogTitle: parent.id, editFolderDialogTitleOrigin: parent.id}) }\n                                title={ I18n.t('Edit folder name') }\n                    ><IconEdit/></IconButton>\n                </ListItemSecondaryAction>\n            </ListItem>);\n\n            const values = Object.values(parent.scenes);\n            const subFolders = Object.values(parent.subFolders);\n\n            // add first sub-folders\n            result.push(subFolders.sort((a, b) => a.id > b.id ? 1 : (a.id < b.id ? -1 : 0)).map(subFolder =>\n                this.renderTree(subFolder, level + 1)));\n\n            // Add as second scenes\n\n            result.push(<ListItem\n                key={ 'items_' + parent.prefix }\n                classes={ {gutters: this.props.classes.noGutters} }\n                className={ this.props.classes.width100 }>\n                <List\n                    className={ this.props.classes.list }\n                    classes={ {root: this.props.classes.leftMenuItem} }\n                    style={ {paddingLeft: level * LEVEL_PADDING + this.props.theme.spacing(1)} }\n                >\n                    { values.length ?\n                        values.sort((a, b) => a._id > b._id ? 1 : (a._id < b._id ? -1 : 0)).map(scene => this.renderTreeScene(scene, level))\n                        :\n                        (!subFolders.length ? <ListItem><ListItemText className={ this.props.classes.folderItem}>{ I18n.t('No scenes created yet')}</ListItemText></ListItem> : '')\n                    }\n                </List>\n            </ListItem>);\n        }\n\n        return result;\n    };\n\n    createScene(name, parentId) {\n        let template = {\n            common: {\n                name: '',\n                type: 'boolean',\n                role: 'scene.state',\n                desc: '',\n                enabled: true,\n                read: true,\n                write: true,\n                def: false,\n                engine: 'system.adapter.scenes.0'\n            },\n            native: {\n                onTrue: {\n                    trigger: {},\n                    cron: null,\n                    astro: null\n                },\n                onFalse: {\n                    enabled: false,\n                    trigger: {},\n                    cron: null,\n                    astro: null\n                },\n                members: []\n            },\n            type: 'state'\n        };\n\n        template.common.name = name;\n        let id = 'scene.0.' + (parentId ? parentId + '.' : '') + template.common.name;\n\n        this.setState({changingScene: id}, () =>\n            this.socket.setObject(id, template)\n                .then(() => this.refreshData(id))\n                .then(() => this.changeSelectedScene(id))\n                .catch(e => this.showError(e))\n        );\n    };\n\n    cloneScene(id) {\n        let scene = JSON.parse(JSON.stringify(this.state.scenes[id]));\n        scene._id = scene._id.split('.');\n        scene._id.pop();\n        scene._id.push(this.getNewSceneId());\n        scene._id = scene._id.join('.');\n        scene.common.name = scene.common.name + ' ' + I18n.t('copy');\n\n        this.setState({changingScene: scene._id}, () =>\n            this.socket.setObject(scene._id, scene)\n                .then(() => this.refreshData(scene._id))\n                .then(() => this.changeSelectedScene(scene._id))\n                .catch(e => this.showError(e))\n        );\n    };\n\n    writeScene() {\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\n        scene._id = this.state.selectedSceneId;\n\n        const folder = getFolderPrefix(scene._id);\n        const newId = 'scene.0.' + (folder ? folder + '.' : '') + scene.common.name.replace(FORBIDDEN_CHARS, '_').replace(/\\s/g, '_');\n\n        if (scene._id !== newId) {\n            // check if the scene name is unique\n            if (Object.keys(this.state.scenes).find(id => id === newId)) {\n                return this.showError(I18n.t('Name is not unique. Please change name before the save.'));\n            }\n\n            // delete first the old scene\n            return this.socket.delObject(scene._id)\n                .then(() => {\n                    scene._id = newId;\n                    return this.socket.setObject(scene._id, scene);\n                })\n                .then(() => this.refreshData(this.state.selectedSceneId))\n                .then(() => this.changeSelectedScene(newId))\n                .catch(e => this.showError(e));\n        } else {\n            return this.socket.setObject(this.state.selectedSceneId, scene)\n                .then(() => this.refreshData(this.state.selectedSceneId))\n                .catch(e => this.showError(e));\n        }\n    }\n\n    updateScene(common, native, cb) {\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\n        if (common) {\n            scene.common = JSON.parse(JSON.stringify(common));\n        }\n        if (native) {\n            const members = scene.native.members;\n            scene.native = JSON.parse(JSON.stringify(native));\n            scene.native.members = members;\n        }\n\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\n    };\n\n    deleteScene = (id) => {\n        return this.socket.delObject(id)\n            .then(() => {\n                if (this.state.selectedSceneId === id) {\n                    return this.refreshData(id)\n                        .then(() => {\n                            const ids = Object.keys(this.state.scenes);\n                            // Find next scene\n                            let nextId = ids.find(_id => _id > id) || '';\n                            if (!nextId) {\n                                // try prev scene\n                                for (let i = ids.length - 1; i >= 0; i--) {\n                                    if (ids[i] < id) {\n                                        nextId = ids[i];\n                                        break;\n                                    }\n                                }\n                            }\n                            if (!nextId && ids.length) {\n                                nextId = ids.shift();\n                            }\n\n                            return this.changeSelectedScene(nextId);\n                        });\n                } else {\n                    return this.refreshData(id);\n                }\n            })\n            .catch(e => this.showError(e));\n    };\n\n    getNewSceneId() {\n        let newId = 0;\n\n        for (const id in this.state.scenes) {\n            let shortId = id.split('.').pop();\n            let matches = shortId.match(/^scene([0-9]+)$/);\n            if (matches && parseInt(matches[1], 10) >= newId) {\n                newId = parseInt(matches[1]) + 1;\n            }\n        }\n\n        return 'scene' + newId;\n    };\n\n    updateSceneMembers(members, cb) {\n        const scene = JSON.parse(JSON.stringify(this.state.selectedSceneData));\n        scene.native.members = JSON.parse(JSON.stringify(members));\n\n        let selectedSceneChanged = JSON.stringify(this.state.scenes[this.state.selectedSceneId]) !== JSON.stringify(scene);\n        this.setState({selectedSceneChanged, selectedSceneData: scene}, () => cb && cb());\n    };\n\n    changeSelectedScene(newId, ignoreUnsaved, cb) {\n        return new Promise(resolve => {\n            if (this.state.selectedSceneId !== newId) {\n                if (this.state.selectedSceneChanged && !ignoreUnsaved) {\n                    this.confirmCb = cb;\n                    this.setState({sceneChangeDialog: newId}, () => resolve());\n                } else {\n                    window.localStorage.setItem('Scenes.selectedSceneId', newId);\n                    this.setState({\n                        selectedSceneData: this.state.scenes[newId] ? JSON.parse(JSON.stringify(this.state.scenes[newId])) : null,\n                        sceneChangeDialog: '',\n                        selectedSceneId: newId || '',\n                        selectedSceneChanged: false,\n                        menuOpened: false,\n                    }, () => {\n                        resolve();\n                        cb && cb();\n                    });\n                }\n            } else {\n                resolve();\n                cb && cb();\n            }\n        });\n    }\n\n    renderAddFolderDialog() {\n        return this.state.addFolderDialog ?\n            <Dialog\n                open={ !!this.state.addFolderDialog }\n                onClose={ () => this.setState({addFolderDialog: null}) }\n            >\n                <DialogTitle>{I18n.t('Create folder')}</DialogTitle>\n                <DialogContent className={ this.props.classes.p }>\n                    <TextField label={ I18n.t('Title') } value={ this.state.addFolderDialogTitle } onChange={ e =>\n                        this.setState({addFolderDialogTitle: e.target.value.replace(FORBIDDEN_CHARS, '_')}) }/>\n                </DialogContent>\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                    <Button variant=\"contained\" onClick={ () => this.setState({addFolderDialog: null}) }>\n                        <IconCancel className={ this.props.classes.buttonIcon }/>\n                        { I18n.t('Cancel') }\n                    </Button>\n                    <Button variant=\"contained\" disabled={!this.state.addFolderDialogTitle || Object.keys(this.state.folders.subFolders).find(name => name === this.state.addFolderDialogTitle)} onClick={() => {\n                        this.addFolder(this.state.addFolderDialog, this.state.addFolderDialogTitle);\n                        this.setState({addFolderDialog: null});\n                    }} color=\"primary\" autoFocus>\n                        <IconCheck className={ this.props.classes.buttonIcon }/>\n                        {I18n.t('Create')}\n                    </Button>\n                </DialogActions>\n            </Dialog> : null;\n    }\n\n    renderEditFolderDialog() {\n        const isUnique = !Object.keys(this.state.folders.subFolders).find(folder => folder.id === this.state.editFolderDialogTitle);\n\n        return this.state.editFolderDialog ? <Dialog open={ !!this.state.editFolderDialog } onClose={ () => this.setState({editFolderDialog: null}) }>\n            <DialogTitle>{ I18n.t('Edit folder') }</DialogTitle>\n            <DialogContent>\n                <TextField\n                    label={ I18n.t('Title') }\n                    value={ this.state.editFolderDialogTitle }\n                    onChange={ e => this.setState({editFolderDialogTitle: e.target.value.replace(FORBIDDEN_CHARS, '_')}) }/>\n            </DialogContent>\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                <Button variant=\"contained\" onClick={ () => this.setState({editFolderDialog: null}) }>\n                    <IconCancel className={ this.props.classes.buttonIcon }/>\n                    { I18n.t('Cancel') }\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    disabled={ !this.state.editFolderDialogTitle || this.state.editFolderDialogTitleOrigin === this.state.editFolderDialogTitle || !isUnique}\n                    onClick={ () => {\n                        this.renameFolder(this.state.editFolderDialog, this.state.editFolderDialogTitle)\n                            .then(() => this.setState({editFolderDialog: null}));\n                    }}\n                    color=\"primary\"\n                    autoFocus\n                >\n                    <IconCheck className={ this.props.classes.buttonIcon }/>\n                    { I18n.t('Apply') }\n                </Button>\n            </DialogActions>\n        </Dialog> : null;\n    }\n\n    renderSceneChangeDialog() {\n        const that = this;\n        return this.state.sceneChangeDialog ? <Dialog\n            open={ true }\n            key=\"sceneChangeDialog\"\n            onClose={ () => this.setState({sceneChangeDialog: ''}) }>\n                <DialogTitle>{ I18n.t('Are you sure for cancel unsaved changes?') }</DialogTitle>\n                <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                    <Button variant=\"contained\" onClick={() => {\n                        this.confirmCb = null; // cancel callback\n                        this.setState({sceneChangeDialog: ''});\n                    }}>\n                        <IconCancel/> { I18n.t('Cancel') }\n                    </Button>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={ () =>\n                        this.changeSelectedScene(this.state.sceneChangeDialog, true, () => {\n                            const cb = this.confirmCb;\n                            this.confirmCb = null;\n                            cb && cb();\n                        })\n                            .catch(() => console.log('ignore')) }>\n                        { I18n.t('Discard') }\n                    </Button>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={e => {\n                        // save scene\n                        this.writeScene()\n                            .then(() => that.changeSelectedScene(that.state.sceneChangeDialog === 'empty' ? '' : that.state.sceneChangeDialog, true, () => {\n                                const cb = this.confirmCb;\n                                this.confirmCb = null;\n                                cb && cb();\n                            }))\n                            .catch(() => console.log('ignore'))\n                    }}>\n                        <IconSave/> { I18n.t('Save changes') }\n                    </Button>\n                </DialogActions>\n            </Dialog> : null;\n    };\n\n    renderDeleteDialog() {\n        return this.state.deleteDialog ? <Dialog\n            open={ true }\n            key=\"deleteDialog\"\n            onClose={ () => this.setState({deleteDialog: false}) }\n        >\n            <DialogTitle>{ I18n.t('Are you sure for delete this scene?') }</DialogTitle>\n            <DialogActions className={ clsx(this.props.classes.alignRight, this.props.classes.buttonsContainer) }>\n                <Button variant=\"contained\" onClick={ () => this.setState({deleteDialog: false}) }>\n                    {I18n.t('Cancel')}\n                </Button>\n                <Button variant=\"contained\" color=\"secondary\" onClick={e => {\n                    this.deleteScene(this.state.selectedSceneId);\n                    this.setState({deleteDialog: false});\n                }}>\n                    { I18n.t('Delete') }\n                </Button>\n            </DialogActions>\n        </Dialog> : null;\n    }\n\n    renderExportImportDialog() {\n        if (!this.state.exportDialog && !this.state.importDialog) {\n            return null;\n        }\n\n        return <ExportImportDialog\n            isImport={ !!this.state.importDialog }\n            themeType={ this.state.themeType }\n            onClose={ importedScene => {\n                if (this.state.importDialog && importedScene) {\n                    const scene = this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId];\n                    importedScene.common._id = scene._id;\n                    importedScene.common.name = scene.name || importedScene.common.name;\n                    this.setState({selectedSceneData: importedScene,  importDialog: false});\n                } else {\n                    this.setState({exportDialog: false, importDialog: false})\n                }\n            } }\n            sceneObj={ this.state.exportDialog ? this.state.selectedSceneData || this.state.scenes[this.state.selectedSceneId] : '' }\n        />\n    }\n\n    renderListToolbar() {\n        return <Toolbar key=\"toolbar\" variant=\"dense\" className={ this.props.classes.mainToolbar }>\n                <IconButton\n                    onClick={ () => this.createScene(this.getNewSceneId()) }\n                    title={ I18n.t('Create new scene') }\n                ><IconAdd/></IconButton>\n\n                <IconButton\n                    onClick={ () => this.setState({addFolderDialog: this.state.folders, addFolderDialogTitle: ''}) }\n                    title={ I18n.t('Create new folder') }\n                ><IconFolderAdd/></IconButton>\n\n                <span className={this.props.classes.right}>\n                                            <IconButton onClick={() => this.setState({showSearch: !this.state.showSearch}) }>\n                                                <SearchIcon/>\n                                            </IconButton>\n                                        </span>\n                {this.state.showSearch ?\n                    <TextField\n                        value={ this.state.search }\n                        className={ this.props.classes.textInput }\n                        onChange={ e => this.setState({search: e.target.value}) }/> : null\n                }\n            </Toolbar>;\n    }\n\n    renderSceneTopToolbar(showDrawer) {\n        return <Toolbar variant=\"dense\" key=\"topToolbar\" classes={ {gutters: this.props.classes.noGutters} }>\n            { this.props.width !== 'md' && this.props.width !== 'sm' && this.props.width !== 'xs' ? <Typography variant=\"h6\" className={ this.props.classes.sceneTitle }>\n                { I18n.t('Scene options') /*Utils.getObjectNameFromObj(scene, null, {language: I18n.getLanguage()}) */}\n                <span className={this.props.classes.sceneSubTitle}>{ Utils.getObjectNameFromObj(this.state.scenes[this.state.selectedSceneId], null, {language: I18n.getLanguage()}, true) }</span>\n            </Typography> : null }\n\n            { showDrawer ? <IconButton aria-label=\"Open list\" title={ I18n.t('Open list') } onClick={ () => this.setState({menuOpened: true}) }><IconMenu/></IconButton> : null }\n            <IconButton aria-label=\"Clone\" title={ I18n.t('Clone') } onClick={ () => this.cloneScene(this.state.selectedSceneId) }><IconClone/></IconButton>\n\n            <IconButton aria-label=\"Delete\" title={ I18n.t('Delete') } onClick={ () => this.setState({deleteDialog: true}) }><IconDelete/></IconButton>\n\n            <IconButton aria-label=\"Move to folder\" title={ I18n.t('Move to folder') } onClick={ () => this.setState({moveDialog: true, newFolder: getFolderPrefix(this.state.selectedSceneId)}) }><IconMoveToFolder/></IconButton>\n\n            <IconButton aria-label=\"Export\" title={ I18n.t('Export scene') } onClick={ () => this.setState({exportDialog: true}) }><IconExport/></IconButton>\n\n            {/*<IconButton aria-label=\"Import\" title={ I18n.t('Import scene') } onClick={ () => this.setState({importDialog: true}) }><IconImport/></IconButton>*/}\n        </Toolbar>;\n    }\n\n    renderSceneBottomToolbar() {\n        return <Toolbar variant=\"dense\" key=\"bottomToolbar\" classes={ {gutters: this.props.classes.noGutters} }>\n            <div style={{flexGrow: 1}}/>\n            { this.state.selectedSceneChanged ? <Button\n                className={ this.props.classes.toolbarButtons }\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => this.writeScene()}\n            >\n                { I18n.t('Save') }\n            </Button> : null }\n\n            { this.state.selectedSceneChanged ? <Button\n                className={ this.props.classes.toolbarButtons }\n                variant=\"contained\"\n                onClick={ () => this.refreshData(this.state.selectedSceneId) }\n            >\n                { I18n.t('Cancel') }\n            </Button> : null }\n        </Toolbar>;\n    }\n\n    renderDrawerContent() {\n        return [\n            this.renderListToolbar(),\n            <div key=\"list\" className={ this.props.classes.heightMinusToolbar }>\n                <List className={ this.props.classes.scroll }>\n                    { this.renderTree(this.state.folders) }\n                </List>\n            </div>\n        ];\n    }\n\n    renderSceneMembers(oneColumn) {\n        return <SceneMembersForm\n            key={ 'selected' + this.state.selectedSceneId }\n            oneColumn={ oneColumn }\n            showError={ e => this.showError(e) }\n            updateSceneMembers={ (members, cb) => this.updateSceneMembers(members, cb) }\n            selectedSceneChanged={ this.state.selectedSceneChanged }\n            sceneEnabled={ this.state.selectedSceneData.common.enabled }\n            members={ this.state.selectedSceneData.native.members }\n            socket={ this.socket }\n            onFalseEnabled={ this.state.selectedSceneData.native.onFalse.enabled }\n            virtualGroup={ this.state.selectedSceneData.native.virtualGroup }\n            sceneId={ this.state.selectedSceneId }\n            engineId={ this.state.selectedSceneData.common.engine }\n            intervalBetweenCommands={ this.state.selectedSceneData.native.burstInterval || 0 }\n        />;\n    }\n\n    renderSceneSettings(oneColumn) {\n        if (!this.state.selectedSceneData) {\n            this.state.selectedSceneData = JSON.parse(JSON.stringify(this.state.scenes[this.state.selectedSceneId]));\n        }\n\n        return <SceneForm\n            key={ this.state.selectedSceneId }\n            showError={ e => this.showError(e) }\n            oneColumn={ oneColumn }\n            updateScene={ (common, native, cb) => this.updateScene(common, native, cb) }\n            scene={ this.state.selectedSceneData }\n            socket={ this.socket }\n            instances={ this.state.instances }\n        />;\n    }\n\n    renderInOneColumn() {\n        return [\n            <Drawer\n                key=\"drawer\"\n                anchor=\"left\"\n                open={ this.state.menuOpened }\n                onClose={() => this.setState({menuOpened: false}) }\n                classes={ {paper: this.props.classes.drawer }}\n            >\n                { this.renderDrawerContent() }\n            </Drawer>,\n            this.renderSceneTopToolbar(true),\n            this.state.selectedSceneId ? <div\n                    key=\"main\"\n                    className={ this.props.classes.heightMinus2Toolbars }\n                    style={{ overflowY: 'auto', overflowX: 'hidden'}}\n                >\n                    { this.renderSceneSettings(true) }\n                    { this.renderSceneMembers(true) }\n                </div> : null,\n            this.renderSceneBottomToolbar(),\n        ]\n    }\n\n    renderInMoreThanOneColumn() {\n        const showDrawer = this.props.width === 'sm' || this.props.width === 'xs';\n\n        return <Container className={ clsx(this.props.classes.height, this.props.classes.fullWidthContainer) }>\n            <Grid container spacing={ 1 } className={ this.props.classes.height }>\n                { showDrawer ?\n                    <Drawer anchor=\"left\" open={ this.state.menuOpened } onClose={() => this.setState({menuOpened: false}) }>\n                        { this.renderDrawerContent() }\n                    </Drawer> :\n                    <Grid item xs={ 3 } className={ clsx(this.props.classes.columnContainer, this.props.classes.height) }>\n                        { this.renderDrawerContent() }\n                    </Grid>\n                }\n                { this.state.selectedSceneId && this.state.scenes[this.state.selectedSceneId] ?\n                    <Grid item xs={ showDrawer ? 12 : 9 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\n                        <Grid container spacing={ 1 } className={ clsx(this.props.classes.height, this.props.classes.settingsBackground) }>\n                            <Grid item xs={ this.props.width === 'xs' ? 12 : 5 } className={ this.props.classes.heightMinus2Toolbars }>\n                                { this.renderSceneTopToolbar(showDrawer) }\n                                <div className={this.props.classes.height}>\n                                    {this.state.selectedSceneId ? this.renderSceneSettings() : null}\n                                </div>\n                                { this.renderSceneBottomToolbar() }\n                            </Grid>\n                            <Grid item xs={ this.props.width === 'xs' ? 12 : 7 } className={ clsx(this.props.classes.height) }>\n                                <div className={ clsx(this.props.classes.heightMinusMargin) }>\n                                    { this.state.selectedSceneId ?\n                                        <div className={ clsx(this.props.classes.membersCell, this.props.classes.height) }>\n                                            { this.renderSceneMembers() }\n                                        </div>\n                                        : null}\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    : null\n                }\n            </Grid>\n        </Container>\n    }\n\n    render() {\n        if (!this.state.ready) {\n            return <MuiThemeProvider theme={ this.state.theme }>\n                <Loader theme={ this.state.themeName }/>\n            </MuiThemeProvider>;\n        }\n\n        const oneColumn = this.props.width === 'xs';\n\n        return (\n            <MuiThemeProvider theme={ this.state.theme }>\n                <div className={ this.props.classes.root }>\n                    { oneColumn ?\n                        this.renderInOneColumn() :\n                        this.renderInMoreThanOneColumn()\n                    }\n\n                    { this.renderSceneChangeDialog() }\n                    { this.renderEditFolderDialog() }\n                    { this.renderMoveDialog() }\n                    { this.renderDeleteDialog() }\n                    { this.renderAddFolderDialog() }\n                    { this.renderExportImportDialog() }\n                    { this.renderError() }\n                </div>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default withWidth()(withStyles(styles)(withTheme(App)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Sentry from '@sentry/browser';\nimport * as SentryIntegrations from '@sentry/integrations';\nimport { MuiThemeProvider} from '@material-ui/core/styles';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\nimport { version } from '../package.json';\n\nimport theme from '@iobroker/adapter-react/Theme';\nimport Utils from '@iobroker/adapter-react/Components/Utils';\n\nwindow.adapterName = 'scenes';\n\nconsole.log('iobroker.' + window.adapterName + '@' + version);\nlet themeName = Utils.getThemeName();\n\nfunction build() {\n    return ReactDOM.render(<MuiThemeProvider theme={ theme(themeName) }>\n        <App onThemeChange={_theme => {\n            themeName = _theme;\n            build();\n        }}/>\n    </MuiThemeProvider>, document.getElementById('root'));\n}\n\n// if not local development\nif (window.location.host !== 'localhost:3000') {\n    Sentry.init({\n        dsn: 'https://89fc6260a1af4df68f9db767a603b7e5@sentry.iobroker.net/86',\n        release: 'iobroker.' + window.adapterName + '@' + version,\n        integrations: [\n            new SentryIntegrations.Dedupe()\n        ]\n    });\n}\n\nbuild();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n// Service worker works only with HTTPS and valid certificates, so do not enable it\nserviceWorker.unregister();\n\n"],"sourceRoot":""}